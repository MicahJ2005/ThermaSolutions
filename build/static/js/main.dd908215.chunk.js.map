{"version":3,"sources":["redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/dropdownOptionsReducer.js","redux/reducers/patientReducer.js","redux/reducers/postOpReducer.js","redux/reducers/adverseEventsReducer.js","redux/reducers/followUpReducer.js","redux/reducers/followUpHistoryReducer.js","redux/reducers/allUsersReducer.js","redux/reducers/individualUserReducer.js","redux/reducers/pathologyHistoryReducer.js","redux/reducers/operativeHistoryReducer.js","redux/reducers/pciReducer.js","redux/reducers/primaryTumorReducer.js","redux/reducers/intakeReducer.js","redux/reducers/psdssReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/patientSaga.js","redux/sagas/postOpSaga.js","redux/sagas/adverseEventsSaga.js","redux/sagas/followUpSaga.js","redux/sagas/followUpHistorySaga.js","redux/sagas/addNewUserSaga.js","redux/sagas/allUsersSaga.js","redux/sagas/editIndividualProfileSaga.js","redux/sagas/getIndividualUserSaga.js","redux/sagas/pathologyNotesSaga.js","redux/sagas/operativeNotesSaga.js","redux/sagas/interventionResectionSaga.js","redux/sagas/getPathologyHistorySaga.js","redux/sagas/getOperativeHistorySaga.js","redux/sagas/pciSaga.js","redux/sagas/primaryTumorSaga.js","redux/sagas/intakeSaga.js","redux/sagas/psdssSaga.js","redux/sagas/index.js","components/LogOutButton/LogOutButton.js","components/Nav/Nav.js","components/Footer/Footer.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/AboutPage/AboutPage.js","components/InfoPage/InfoPage.js","components/PrimaryTumorPage/PrimaryTumorDetails.js","components/PrimaryTumorPage/PrimaryTumorTreatment.js","components/PrimaryTumorPage/PrimaryTumorPage.js","components/IntakePage/IntakePageGeneralInfo.js","components/IntakePage/IntakePageNeoAdjuvant.js","components/IntakePage/IntakePageDiagnostic.js","components/IntakePage/IntakePage.js","components/PSDSSPage/PSDSSPageData.js","components/PSDSSPage/PSDSSPage.js","components/InterventionPage/ResectionDropdown.js","components/InterventionPage/AdditionalPageInfo.js","components/InterventionPage/InterventionPage.js","components/PathologyNotesPage/PathologyNotesHistory.js","components/PathologyNotesPage/PathologyNotesPage.js","components/OperativeNotesPage/OperativeNotesHistory.js","components/OperativeNotesPage/OperativeNotesPage.js","components/PostOpPage/ReoperationSelector.js","components/PostOpPage/MortalitySelector.js","components/PostOpPage/DischargeStatus.js","components/PostOpPage/ClavienScore.js","components/PostOpPage/SeriousAdverseEvents.js","components/PostOpPage/PostOpPage.js","components/FollowUpPage/Modality.js","components/FollowUpPage/Location.js","components/FollowUpPage/SystemicLocation.js","components/FollowUpPage/FollowUpDetailTreatment.js","components/FollowUpPage/Status.js","components/FollowUpPage/FollowUpDetailRecurrence.js","components/FollowUpPage/FollowUpDetailDetail.js","components/FollowUpPage/FollowUpDetail.js","components/FollowUpPage/ChemotherapyType.js","components/FollowUpPage/AdjuvantChemotherapy.js","components/FollowUpPage/Biological.js","components/FollowUpPage/AddFollowUpDialog.js","components/FollowUpPage/FollowUpPage.js","components/CurrentPatientInfo/CurrentPatientInfo.js","components/App/AppTheme.js","components/App/ColorectalTheme.js","components/App/AppendixTheme.js","components/App/GastricTheme.js","components/App/MesotheliomaTheme.js","components/App/OtherTheme.js","components/App/OvarianTheme.js","components/App/PseudomyxomaTheme.js","components/MainTabsPage/MainTabsPage.js","components/ManageUsersPage/ManageUsersTable.js","components/ManageUsersPage/ManageUsersPage.js","components/PatientProfileSearchResult/PatientProfileSearchResult.js","components/PatientProfileSearchPage/PatientProfileSearchPage.js","components/App/App.js","index.js"],"names":["combineReducers","loginMessage","state","arguments","length","undefined","type","registrationMessage","loginMode","userReducer","action","payload","dropDownOptions","currentStatusOptions","id","status","primaryLocationOptions","mLocationOptions","differentiationOptions","interventionTypeOptions","settingOptions","reasonAcuteOptions","primaryTumorSurgeryOptions","adjChemoTypeOptions","biologicalOptions","scopyConclusionOptions","synchMetaOptions","asaScoreOptions","timingTreamentOptions","treamentTypeOptions","hipecTypeOptions","reasonOpenCloseOption","resections","name","stateName","stomaTypeOptions","hipecRegimentOptions","duration","value","rScoreOptions","recModalityOptions","recLocationOptions","systemicLocationOptions","recTreatmentOptions","t","n","m","seriousAdverseEvents","sae_type","clavienScore","score","optionsReducer","patientReducer","patientSearch","patient","newPatientId","postOpReducer","adverseEventsReducer","followUpReducer","followUpHistoryReducer","allUsersReducer","individualUserReducer","pathologyHistoryReducer","operativeHistoryReducer","pciReducer","primaryTumorReducer","intakeReducer","psdssReducer","rootReducer","errors","user","dropdownOptions","postOp","followUp","followUpHistory","adverseEvents","loginUser","logoutUser","loginSaga","config","regenerator_default","a","wrap","_context","prev","next","put","headers","Content-Type","withCredentials","axios","post","t0","console","log","response","stop","_marked","this","_context2","_marked2","_context3","takeLatest","_marked3","registerUser","registrationSaga","registrationSaga_marked","registrationSaga_marked2","fetchUser","userSaga","get","sent","data","userSaga_marked","userSaga_marked2","fetchPatient","addNewPatient","setPatientFromCookie","patientSaga","call","concat","patientSaga_marked","patientSaga_marked2","patientObject","patientSaga_marked3","_context4","_marked4","_context5","takeEvery","_marked5","addPostOp","fetchPostOp","updatePostOp","postOpSaga","postOpSaga_marked","postOpSaga_marked2","patient_id","alert","postOpSaga_marked3","postOpSaga_marked4","fetchAdverseEvent","updateAdverseEvent","adverseEventSaga","adverseEventsSaga_marked","events","eventsToSend","adverse_events","filter","eventIn","checked","clavien_score","arrayEventOptionIds","arrayPatientIds","arrayClavienScores","forEach","element","push","adverseEventsSaga_marked2","adverseEventsSaga_marked3","addFollowUp","fetchFollowUp","updateFollowUp","followUpSaga","followUpSaga_marked","followUpSaga_marked2","followUpSaga_marked3","followUpSaga_marked4","addFollowUpHistory","fetchFollowUpHistory","updateFollowUpHistory","followUpHistorySaga","followUpHistorySaga_marked","followUpHistorySaga_marked2","followUpHistorySaga_marked3","followUpHistorySaga_marked4","addNewUser","addNewUserSaga","profileUserId","addNewUserSaga_marked","addNewUserSaga_marked2","getAllUsers","getAllUsersSaga","allUsersSaga_marked","allUsersSaga_marked2","editProfile","editProfileSaga","userId","editIndividualProfileSaga_marked","editIndividualProfileSaga_marked2","selectProfile","findUserProfileSaga","userID","getIndividualUserSaga_marked","getIndividualUserSaga_marked2","pathologyNotes","pathologyNotesSaga","pathologyNotesSaga_marked","pathologyNotesSaga_marked2","operativeNotes","operativeNotesSaga","operativeNotesSaga_marked","operativeNotesSaga_marked2","interventionResection","interventionSaga","interventionResectionSaga_marked","interventionResectionSaga_marked2","pathologyHistory","getPathologyHistorySaga","getPathologyHistorySaga_marked","getPathologyHistorySaga_marked2","operativeHistory","getOperativeHistorySaga","getOperativeHistorySaga_marked","getOperativeHistorySaga_marked2","pciTotal","pciTotalSaga","pciSaga_marked","pciSaga_marked2","getInitalValues","updateEntries","primaryTumorSaga","primaryTumorSaga_marked","userInfo","primaryTumorSaga_marked2","primaryTumorSaga_marked3","getInitalDataForIntake","sendUpdatedDataToDB","intakeSaga","intakeSaga_marked","intakeSaga_marked2","intakeSaga_marked3","getInitalValuesForPSDSS","updateEntriesForPSDSS","psdssSaga","psdssSaga_marked","psdssSaga_marked2","psdssSaga_marked3","rootSaga","all","adverseEventsSaga","allUsersSaga","editIndividualUserSaga","pathologyHistorySaga","operativeHistorySaga","sagas_marked","connect","props","react_default","createElement","className","onClick","dispatch","Link","to","Fragment","components_LogOutButton_LogOutButton","title","first_name","last_name","Footer","LoginPage","username","password","login","event","preventDefault","_this","handleInputChangeFor","propertyName","setState","Object","defineProperty","target","_this2","role","onSubmit","htmlFor","onChange","Component","RegisterPage","ComponentToShow","ComponentToProtect","component","otherProps","objectWithoutProperties","Route","assign","AboutPage","InfoPage","PrimaryTumorDetails","labelWidth","ReactDOM","findDOMNode","InputLabelRef","offsetWidth","classes","Grid_default","container","spacing","item","xs","TextField_default","handleChange","moment","primary_tumor","date_primary_diagnosis","format","margin","label","variant","FormControl_default","fullWidth","InputLabel_default","ref","Select_default","primary_location","input","OutlinedInput_default","MenuItem_default","map","location","key","m_location","gridItem","differentiation","dif","formControl","FormLabel_default","RadioGroup_default","row","aria-label","group","mucinous","FormControlLabel_default","control","Radio_default","reduxState","withStyles","theme","marginBottom","dropDown","unit","PrimaryTumorTreatment","date_prime_surgery","intervention_type","int","setting","set","prime_tumor_surgery","pts","adj_chemotherapy","adj_chemotherapy_type","adj","biological","InputLabelProps","shrink","notes","multiline","rows","PrimaryTumorPage","changesMade","chemo_type_1","chemo_type_2","reason_acute","setValuesForPatient","objectSpread","upsertEntriesInDB","PrimaryTumorPage_PrimaryTumorDetails","PrimaryTumorPage_PrimaryTumorTreatment","Button_default","button","color","IntakePageGeneral","intake","weight_kg","notched","classNames","textField","length_m","disabled","bmi_auto","ca125","crp","leucocyte","smoking","diabetes","insulin_dependent","cardiovascular","hypertension","IntakePageNeoAdjuvant","neo_adjuvant_chemo","neo_adjuvant_chemo_type","treatmentPrimeTumorNotes","IntakePageDiagnostic","diagnostic_scopy","scopy_conclusion","dense","date_scopy","IntakePage","stoma_pre_hipec","stoma_type","scopy_notes","syn_metachronous","date_diagnosis_pc","assessment_of_pss","asa_score_date_time_stamp","date","setInitialState","calculateBMI","bmi","height","Number","String","parseFloat","toFixed","_this$setState","updateEntriesInDB","IntakePageGeneralInfo","IntakePage_IntakePageNeoAdjuvant","IntakePage_IntakePageDiagnostic","PSDSSPage","direction","justify","alignItems","Checkbox_default","psdssInfo","synchronous_liver_treatment","handleChangeCheckbox","date_treatment","psdss","timing","time","treatment_type","Typography_default","root","width","marginTop","overflowX","table","paddingBottom","headingElements","containerPaper","padding","clinical","pci","histology","total","calculatePSDSS","calculatedNum","toggleSwitch","align","Divider_default","itme","PSDSSPageData","ResectionDropdown","myOptions","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","heading","ExpansionPanelDetails_default","FormGroup_default","option","index","flexGrow","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","minWidth","paper","textAlign","palette","text","secondary","AdditionalPageInfo","anastomosis","DialogContent_default","AnastomosisNumber","revisionStoma","stomaPostHIPEC","stomaType","bloodLoss","bloodLossTime","hipecRegiment","volume","concentration","rScore","lesionSizeScore","InterventionPage","central","rightUpper","Epigastrium","leftUpper","leftFlank","leftLower","pelvisPCI","rightLower","rightFlank","upperJejunum","lowerJejunum","upperIlium","lowerIlium","PCITotal","surgeonOne","surgeonTwo","surgeonThree","nrHipec","hipecType","reasonOC","expanded1","expanded2","StomaPostHIPECType","interventionId","ovaries","uterus","omentum","rectum","sigmoid","left_colon","transverse_colon","right_colon","ileocaecal","appendix","duodenum","jejunum","ileum","gallbladder","stomach","spleen","diagphram_l","diagphram_r","pancreas","bladder","urether","lymphnodes","left_peritoneum","right_peritoneum","peritoneum","pelvis","calculatePCI","PCI","handlePCIChange","expansionPanel1","expansionPanel2","saveForm","confirmAlert","message","buttons","interventionState","intervention","pci_0","pci_1","pci_2","pci_3","pci_4","pci_5","pci_6","pci_7","pci_8","pci_9","pci_10","pci_11","pci_12","pci_score","surgeon_1","surgeon_2","surgeon_3","nrhipec","hipec_type","reason_oc","anastomosis_number","revision_stoma","stoma_post_hipec_type","bloodloss","hipec_regiment","r_score","stoma_post_hipec","defaultExpanded","Table_default","TableHead_default","TableRow_default","TableCell_default","TableBody_default","alt","src","sm","InterventionPage_ResectionDropdown","InterventionPage_AdditionalPageInfo","PathologyNotesHistory","note","pathology_report","date_completed","React","tableWrapper","PathologyNotesPage","firstName","lastName","savePathologyNotes","PathologyNotesPage_PathologyNotesHistory","pathState","OperativeNotesHistory","operative_notes","OperativeNotesPage","saveOperativeNotes","OperativeNotesPage_OperativeNotesHistory","val","ReoperationSelector","reoperation","i","renderOptions","MortalitySelector","hospital_mortality","DischargeStatus","status_at_discharge","ClavienScore","clavienScoreOptions","handleChangeClavienScore","SeriousAdverseEvent","handleChangeAdverseEvent","PostOpPage_ClavienScore","PostOpPage","icu_stays","mcu_stays","hospital_stays","serious_adverse_event","discharge_notes","toConsumableArray","savePostOp","expanded","SeriousAdverseEvents","PostOpPage_ReoperationSelector","PostOpPage_MortalitySelector","PostOpPage_DischargeStatus","display","flexWrap","marginLeft","marginRight","backgroundColor","minHeight","menu","flexDirection","Modality","recurrence","rec_modality","Location","SystemicLocation","syst_location","RecurrenceTreatment","treatment","Status","FollowUpDetailRecurrence","cea","FollowUpPage_Modality","FollowUpPage_Location","FollowUpPage_SystemicLocation","FollowUpDetailTreatment","FollowUpPage_Status","treatment_notes","FollowUpDetailDetail","follow_up_id","evidence_of_disease","follow_up_notes","last_contact","followUpDate","history","lastContactDate","treatmentDate","FollowUpPage_FollowUpDetailRecurrence","ExpansionPanelActions_default","expasion","superCool","FollowUpDetail","FollowUpPage_FollowUpDetailDetail","ChemotherapyType","adjuvant_chemo","adjuvant_chemo_type","AdjuvantChemotherapy","myValue","Biological","AddFollowUpDialog","open","handleClickOpen","handleClose","react","Dialog_default","onClose","aria-labelledby","DialogTitle_default","DialogContentText_default","DialogActions_default","FollowUpPage","date_of_death","section","FollowUpPage_AdjuvantChemotherapy","FollowUpPage_ChemotherapyType","FollowUpPage_Biological","FollowUpPage_AddFollowUpDialog","FollowUpPage_FollowUpDetail","CurrentPatientInfo","redBold","patient_no","dob","Math","floor","Date","getTime","gender","hipec_date","referal_date","type_of_cancer","diagnosis_date","alive_on_date","sensor","hospital_telephone","referring_doctor","current_status","interval_prime_surgery","survival_hipec_death","survival_hipec_last_contact","interval_diagnosis_pc_hipec","red","textTransform","border","boxShadow","appTheme","createMuiTheme","primary","main","background","default","useNextVariants","overrides","MuiExpansionPanelSummary","TabContainer","style","children","MainTabsPage","handleTabChange","patientId","document","cookie","replace","MuiThemeProvider_default","components_CurrentPatientInfo_CurrentPatientInfo","AppBar_default","position","Tabs_default","indicatorColor","textColor","scrollable","scrollButtons","Tab_default","components_PrimaryTumorPage_PrimaryTumorPage","components_IntakePage_IntakePage","components_PSDSSPage_PSDSSPage","components_InterventionPage_InterventionPage","components_PathologyNotesPage_PathologyNotesPage","components_OperativeNotesPage_OperativeNotesPage","components_PostOpPage_PostOpPage","components_FollowUpPage_FollowUpPage","EnhancedTableHead","_this$props","order","orderBy","numeric","sortDirection","TableSortLabel_default","active","EnhancedTableToolbar","numSelected","Toolbar_default","highlight","spacer","paddingRight","lighten","light","dark","flex","actions","EnhancedTable","selected","page","rowsPerPage","accessLevel","handleRequestSort","property","handleSelectAllClick","handleChangePage","handleChangeRowsPerPage","isSelected","indexOf","access_level","swal","_this$state","emptyRows","min","Paper_default","ManageUsersTable_EnhancedTableToolbar","ManageUsersTable_EnhancedTableHead","onSelectAllClick","onRequestSort","rowCount","scope","colSpan","TablePagination_default","rowsPerPageOptions","count","backIconButtonProps","nextIconButtonProps","onChangePage","onChangeRowsPerPage","autoFocus","ManageUsersPage","maxWidth","searchForm","handleActiveUserChange","handleNewUserSubmit","Search_default","rightIcon","Add_default","ManageUsersTable","leftIcon","iconSmall","icon","PatientProfileSearchResult","clearState","selectPatient","refering_doctor","current_date","current_time","last_contact_date","withRouter","mixins","gutters","paddingTop","formControlSub","selectEmpty","radio","formLabel","diaplay","grid","PatientProfileSearchPage","variables","currentStatus","handleNewPatientChange","calculateAge","age","handleSearchChange","addPatient","searchPatient","required","placeholder","components_PatientProfileSearchResult_PatientProfileSearchResult","disableBackdropClick","InputBase_default","InputProps","readOnly","onBlur","formControlAge","displayEmpty","toc","hipec","ipshipec","survivalhipecdeath","survivalhipeclastcontact","intervalDiagnosisPcHipec","verticalAlign","App","HashRouter","components_Nav_Nav","Switch","Redirect","exact","from","path","components_ProtectedRoute_ProtectedRoute","render","components_Footer_Footer","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","apply","run","react_redux_es","components_App_App","getElementById"],"mappings":"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","file":"static/js/main.dd908215.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","const optionsReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'GET_DROPDOWN_OPTIONS':\n      return dropDownOptions;\n    default:\n      return state;\n  }\n};\nconst dropDownOptions ={\ncurrentStatusOptions: [\n  {id: 1, status: 'Death of Disease'},\n  {id: 2, status: 'Alive with Disease'},\n  {id: 3, status: 'No Evidence of Disease'},\n  {id: 4, status: 'Treatment Related Death'}\n],\n\nprimaryLocationOptions: [\n  {id: 1, status: 'Appendix'},\n  {id: 2, status: 'Right Colon'},\n  {id: 3, status: 'Transverse'},\n  {id: 4, status: 'Left Colon'},\n  {id: 5, status: 'Sigmoid'},\n  {id: 6, status: 'Rectum'},\n  {id: 7, status: 'NS'},\n  {id: 8, status: 'Unknown'},\n],\n\nmLocationOptions: [\n  {id: 1, status: 'No'},\n  {id: 2, status: 'PC'},\n  {id: 3, status: 'Liver'},\n  {id: 4, status: 'PC + Liver'},\n  {id: 5, status: 'Lung'},\n  {id: 6, status: 'PC + Lung'},\n  {id: 7, status: 'Ovarian'},\n  {id: 8, status: 'PC + Ovarian'},\n  {id: 9, status: 'Other'},\n],\n\n differentiationOptions: [\n  {id: 1, status: 'Good'},\n  {id: 2, status: 'Moderate'},\n  {id: 3, status: 'Poor'},\n  {id: 4, status: 'Signet Cell'},\n  {id: 5, status: 'Unknown'},\n],\n\ninterventionTypeOptions: [\n  {id: 1, status: 'Open'},\n  {id: 2, status: 'Lap Scope'},\n  {id: 3, status: 'HIPEC at Primary'},\n  {id: 4, status: 'Unknown'},\n],\n\nsettingOptions: [\n  {id: 1, status: 'Elective'},\n  {id: 2, status: 'Acute'},\n  {id: 3, status: 'At HIPEC'},\n  {id: 4, status: 'Unknown'},\n],\n\nreasonAcuteOptions: [\n  {id: 1, status: 'Not Acute'},\n  {id: 2, status: 'Obstruction'},\n  {id: 3, status: 'Perforation'},\n  {id: 4, status: 'Blow Out'},\n  {id: 5, status: 'Other'},\n],\n\nprimaryTumorSurgeryOptions: [\n  {id: 1, status: 'Tumor in Sito'},\n  {id: 2, status: 'Resected'},\n  {id: 3, status: 'Not Applicable'}\n],\n\nadjChemoTypeOptions: [\n  {id: 1, status: 'Oxaliplatin'},\n  {id: 2, status: 'Capecitabine'},\n  {id: 3, status: 'Capox'},\n  {id: 4, status: 'Folfox'},\n  {id: 5, status: 'Folfiri'},\n  {id: 6, status: '5FU'},\n  {id: 7, status: 'Irinotecan'},\n  {id: 8, status: 'Other'}\n],\n\nbiologicalOptions: [\n  {id: 1, status: 'Bevacizumab'},\n  {id: 2, status: 'Cetuximab'},\n  {id: 3, status: 'Panitimumab'}\n],\n\nscopyConclusionOptions: [\n  {id: 1, status: 'Amenable'},\n  {id: 2, status: 'Benefit of Doubt'},\n  {id: 3, status: 'No Go'}\n],\n\nsynchMetaOptions: [\n  {id: 1, status: 'Synchronous'},\n  {id: 2, status: 'Metachronous'}\n],\n\nasaScoreOptions: [\n  {id: 1, status: 'Normal Healthy'},\n  {id: 2, status: 'Mild Systemic Disease'},\n  {id: 3, status: 'Severe Systemic Disease'},\n  {id: 4, status: 'Severe Systemic Disease + Constant Threat To Life'},\n],\n\ntimingTreamentOptions: [\n  {id: 1, status: 'Before Diagnosis PC'},\n  {id: 2, status: 'Before HIPEC Procedure'},\n  {id: 3, status: 'In HIPEC Procedure'},\n  {id: 4, status: 'After HIPEC'},\n],\n\ntreamentTypeOptions: [\n  {id: 1, status: 'RFA'},\n  {id: 2, status: 'Surgery'},\n  {id: 3, status: 'Systemic Chemotherapy'},\n  {id: 4, status: 'Other'},\n],\n\nhipecTypeOptions: [\n  {id: 1, status: 'Open CRS + HIPEC'},\n  {id: 2, status: 'Scopic CRS + HIPEC'},\n  {id: 3, status: 'CRS Only'},\n  {id: 4, status: 'Open-Close'},\n  {id: 5, status: 'HIPEC Only'},\n  {id: 6, status: 'Open CRS + Closed HIPEC'},\n],\n\nreasonOpenCloseOption: [\n  {id: 1, status: 'sPCI/PCI Too High'},\n  {id: 2, status: 'Small Bowel Involvement'},\n  {id: 3, status: 'Irresectable Primary Tumor'},\n  {id: 4, status: 'Liver Metastasis'},\n  {id: 5, status: 'No PC'},\n],\n\nresections: [\n  {id: 1, name: 'Ovaries', stateName: \"ovaries\", status: false},\n  {id: 2, name: 'Uterus', stateName: \"uterus\", status: false},\n  {id: 3, name: 'Omentum', stateName: \"omentum\", status: false},\n  {id: 4, name: 'Rectum', stateName: \"rectum\", status: false},\n  {id: 5, name: 'Sigmoid', stateName: \"sigmoid\", status: false},\n  {id: 6, name: 'Left Colon', stateName: \"left_colon\", status: false},\n  {id: 7, name: 'Transverse Colon', stateName: \"transverse_colon\", status: false},\n  {id: 8, name: 'Right Colon', stateName: \"right_colon\", status: false},\n  {id: 9, name: 'Ileocaecal', stateName: \"ileocaecal\", status: false},\n  {id: 10, name: 'Appendix', stateName: \"appendix\", status: false},\n  {id: 11, name: 'Duodenum', stateName: \"duodenum\", status: false},\n  {id: 12, name: 'Jejunum', stateName: \"jejunum\", status: false},\n  {id: 13, name: 'Ileum', stateName: \"ileum\", status: false},\n  {id: 14, name: 'Gallbladder', stateName: \"gallbladder\", status: false},\n  {id: 15, name: 'Stomach', stateName: \"stomach\", status: false},\n  {id: 16, name: 'Spleen', stateName: \"spleen\", status: false},\n  {id: 17, name: 'Diagphram L', stateName: \"diagphram_l\", status: false},\n  {id: 18, name: 'Diagphram R', stateName: \"diagphram_r\", status: false},\n  {id: 19, name: 'Pancreas', stateName: \"pancreas\", status: false},\n  {id: 20, name: 'Bladder', stateName: \"bladder\", status: false},\n  {id: 21, name: 'Urether', stateName: \"urether\", status: false},\n  {id: 22, name: 'Lymphnodes', stateName: \"lymphnodes\", status: false},\n  {id: 23, name: 'Left Peritoneum', stateName: \"left_peritoneum\", status: false},\n  {id: 24, name: 'Right Peritoneum', stateName: \"right_peritoneum\", status: false},\n  {id: 25, name: 'Peritoneum', stateName: \"peritoneum\", status: false},\n  {id: 26, name: 'Pelvis', stateName: \"pelvis\", status: false},\n],\n\nstomaTypeOptions: [\n  {id: 1, status: 'Double Barrel Ileostomy'},\n  {id: 2, status: 'Ileostomy'},\n  {id: 3, status: 'Double Barrel Colonostomy'},\n  {id: 4, status: 'Colonostomy'}\n],\n\nhipecRegimentOptions: [\n  {id: 1, status: 'MMC'},\n  {id: 2, status: 'Oxaliplaten/5FU/LV'},\n  {id: 3, status: 'Cisplatin'},\n  {id: 4, status: 'Other'},\n],\n\nduration: [\n  {id: 1, status: \"30 Minutes\", value: 30},\n  {id: 1, status: \"60 Minutes\", value: 60},\n  {id: 1, status: \"90 Minutes\", value: 90},\n  {id: 1, status: \"120 Minutes\", value: 120},\n ],\n\nrScoreOptions: [\n  {id: 1, status: 'R1 - No Macroscopic Tumor'},\n  {id: 2, status: 'R2A - Residual Tumor < 2.5mm'},\n  {id: 3, status: 'R2B - Residual Tumor 2.5mm - 2.5cm'},\n],\n\nrecModalityOptions: [\n  {id: 1, status: 'Radiology'},\n  {id: 2, status: 'Surgery'},\n  {id: 3, status: 'Autopsy'},\n  {id: 4, status: 'Other'},\n],\n\nrecLocationOptions: [\n  {id: 1, status: 'Local / PC'},\n  {id: 2, status: 'Systemic'},\n  {id: 3, status: 'Local / Systemic'}\n],\n\nsystemicLocationOptions: [\n  {id: 1, status: 'Liver'},\n  {id: 2, status: 'Lung'},\n  {id: 3, status: 'Liver / Lung'},\n  {id: 4, status: 'Other'},\n],\n\nrecTreatmentOptions: [\n  {id: 1, status: 'Curative Surgery'},\n  {id: 2, status: 'Palliative Surgery'},\n  {id: 3, status: 'Systemic Chemotherapy'},\n  {id: 4, status: 'reHIPEC'},\n  {id: 5, status: 'Palliative / No Treatment'},\n  {id: 6, status: 'Radiotherapy'},\n  {id: 7, status: 'Combination Treatment'},\n],\n\nt: [\n  {id: 1, status: 0, name: 'x'},\n  {id: 2, status: 1, name: '0'},\n  {id: 3, status: 2, name: '1'},\n  {id: 4, status: 3, name: '2'},\n  {id: 5, status: 4, name: '3'},\n  {id: 6, status: 5, name: '4'},\n  {id: 7, status: 6, name: 'No Input'}\n\n],\n\nn: [\n  {id: 1, status: 0, name: 'x'},\n  {id: 2, status: 1, name: '0'},\n  {id: 3, status: 2, name: '1'},\n  {id: 4, status: 3, name: '2'},\n  {id: 5, status: 6, name: 'No Input'}\n\n],\n\nm: [\n  {id: 1, status: 0, name: 'x'},\n  {id: 2, status: 1, name: '0'},\n  {id: 3, status: 2, name: '1'},\n  {id: 5, status: 6, name: 'No Input'}\n\n],\n\nseriousAdverseEvents: [\n  {id: 1, sae_type: 'Abcess'},\n  {id: 2, sae_type: 'Anastomotic Leakage'},\n  {id: 3, sae_type: 'Anemia'},\n  {id: 4, sae_type: 'Bleeding'},\n  {id: 5, sae_type: 'Cardiac'},\n  {id: 6, sae_type: 'Electrolyte Disorder'},\n  {id: 7, sae_type: 'Fistula'},\n  {id: 8, sae_type: 'Gastroparesis'},\n  {id: 9, sae_type: 'Ileus'},\n  {id: 10, sae_type: 'Other Infection'},\n  {id: 11, sae_type: 'Pneumonia'},\n  {id: 12, sae_type: 'Pulmonary Embolism'},\n  {id: 13, sae_type: 'Urinoma'},\n  {id: 14, sae_type: 'Uninary Tract Infection'},\n  {id: 15, sae_type: 'Wound Dehiscense'},\n  {id: 16, sae_type: 'Wound Infection'},\n  {id: 17, sae_type: 'Other Event'},\n],\n\nclavienScore: [\n  {id: 1, score: '1'},\n  {id: 2, score: '2'},\n  {id: 3, score: '3A'},\n  {id: 4, score: '3B'},\n  {id: 5, score: '4A'},\n  {id: 6, score: '4B'},\n  {id: 7, score: '5'},\n]\n}\n\n// user will be on the redux state at:\n// state.user\nexport default optionsReducer;\n","const patientReducer = (state = [], action) => {\n    switch (action.type) {\n      case 'FIND_PATIENT':\n        return {patientSearch: action.payload};\n      case 'DROP_PATIENT_RESULT':\n        return {patientSearch: ''};\n      case 'SET_PATIENT_RESULT':\n        return {patient: action.payload};\n      case 'ADD_PATIENT':\n        return {patient: action.payload};\n      case 'LAST_PATIENT_ID_PLUS_ONE':\n        return {patient: {newPatientId: action.payload}}\n      case 'SET_PATIENT':\n        return action.payload;\n      \n      default:\n        return state;\n    }\n    // return state;\n  };\n  \n  // user will be on the redux state at:\n  // state.user\n  export default patientReducer;\n  ","const postOpReducer = (state = {}, action) => {\n  // console.log('in post op reducer');\n  switch (action.type) {\n    case 'SET_POST_OP':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// postOp will be on the redux state at:\n// state.postOp\nexport default postOpReducer;","const adverseEventsReducer = (state = [], action) => {\n  // console.log('in adverse events reducer', action.payload);\n  switch (action.type) {\n    case 'SET_ADVERSE_EVENT':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// adverseEvents will be on the redux state at:\n// state.adverseEvents\nexport default adverseEventsReducer;","const followUpReducer = (state = {}, action) => {\n  // console.log('in post op reducer');\n  switch (action.type) {\n    case 'SET_FOLLOW_UP':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// followUp will be on the redux state at:\n// state.followUp\nexport default followUpReducer;","const followUpHistoryReducer = (state = [], action) => {\n  // console.log('in post op reducer');\n  switch (action.type) {\n    case 'SET_FOLLOW_UP_HISTORY':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// followUp will be on the redux state at:\n// state.followUp\nexport default followUpHistoryReducer;","const allUsersReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_ALL_USERS':\n            return action.payload;\n        default:\n            return state;\n    }\n  };\n  \n  \n  export default allUsersReducer;","const individualUserReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'GET_INDIVIDUAL_USER':\n            return action.payload;\n        default:\n            return state;\n    }\n  };\n  \n  \n  export default individualUserReducer;","const pathologyHistoryReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'GET_INDIVIDUAL_PATHOLOGY_HISTORY':\n            return action.payload;\n        default:\n            return state;\n    }\n  };\n  \n  \n  export default pathologyHistoryReducer;","const operativeHistoryReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'GET_INDIVIDUAL_OPERATIVE_HISTORY':\n            return action.payload;\n        default:\n            return state;\n    }\n  };\n  \n  \n  export default operativeHistoryReducer;","const pciReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'GET_PCI':\n            return action.payload;\n        default:\n            return state;\n    }\n  };\n  \n  \n  export default pciReducer;","const primaryTumorReducer = (state = [], action) => {\n    // console.log('inside primaryTumorReducer');\n    switch (action.type) {\n      case 'SET_INIT_VALUES':\n        return action.payload;\n        case 'UPDATE_INIT_FIELDS':\n        return action.payload\n      default:\n        return state;\n    }\n  };\n  \n  \n  export default primaryTumorReducer;","const intakeReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_INITAL_DATA_FOR_INTAKE':\n            return action.payload;\n        default:\n            return state;\n    }\n  };\n  \n  \n  export default intakeReducer;","const psdssReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_INITIAL_DATA_FOR_PSDSS':\n            return action.payload;\n        default:\n            return state;\n    }\n  };\n  \n  \n  export default psdssReducer;","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport dropdownOptions from './dropdownOptionsReducer';\nimport patientReducer from './patientReducer';\nimport postOp from './postOpReducer';\nimport adverseEvents from './adverseEventsReducer';\nimport followUp from './followUpReducer';\nimport followUpHistory from './followUpHistoryReducer';\nimport allUsersReducer from './allUsersReducer';\nimport individualUserReducer from './individualUserReducer';\nimport pathologyHistoryReducer from './pathologyHistoryReducer';\nimport operativeHistoryReducer from './operativeHistoryReducer';\nimport pciReducer from './pciReducer';\nimport primaryTumorReducer from './primaryTumorReducer';\nimport intakeReducer from './intakeReducer';\nimport psdssReducer from './psdssReducer';\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  dropdownOptions,\n  patientReducer,\n  postOp, // will contain post op information for patient_id\n  followUp, // will contain follow up information for patient_id\n  followUpHistory, // will contain recurrence information for followup_id\n  adverseEvents, // will contain adverse events for patient_id\n  allUsersReducer,\n  individualUserReducer,\n  pathologyHistoryReducer,\n  operativeHistoryReducer,\n  pciReducer,\n  primaryTumorReducer,\n  intakeReducer,\n  psdssReducer,\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import axios from 'axios';\nimport { call, put, takeLatest, takeEvery, take, fork } from 'redux-saga/effects';\n\nfunction* fetchPatient(action) {\n    try {\n      const response = yield call(axios.get, `/api/find-a-patient/${action.payload}`);\n      yield put({ type: 'SET_PATIENT', payload: response.data });\n      console.log(response.data);\n    } catch (error) {\n      console.log('Patient GET request failed', error);\n    }\n  }\n\nfunction* newPatientId(action) {\n    try {\n        const response = yield call(axios.get, `/api/new-patient-id`);\n        yield put({ type: 'SET_PATIENT', payload: response.data });\n        console.log(response.data);\n    } catch (error) {\n        console.log('Patient GET request failed', error);\n    }\n}\n\n// Saga triggered on ADD_PATIENT\nfunction* addNewPatient(action) {\n    try {\n        console.log('IN ADD NEW PATIENT', action.payload);\n        yield call(axios.post, '/api/add-a-patient', action.payload.patientObject);\n        console.log('Payload from add-a-patient', action.payload);\n        yield put({ type: 'SET_PATIENT', payload: action.payload.patientObject });\n        // document.cookie = `patientID=${action.payload.patientObject.patient_no}`;\n        // action.payload.history.push(`/MainTabsPage`);\n    }\n    catch (error) {\n        console.log('there was an error with your POST', error);\n    }\n}\n\nfunction* setPatientFromCookie(action) {\n    try {\n        console.log('CALL TO FIND-A-PATIENT', action.payload);\n        const response = yield call(axios.get,`/api/find-a-patient/${action.payload}`);\n        yield put({type: 'SET_PATIENT_RESULT', payload: response.data.patientSearch});\n\n    }\n    catch {\n        console.log('error in our setPatientFromCookie SAGA');\n    }\n}\n\nfunction* patientSaga() {\n  yield takeEvery('FIND_PATIENT', fetchPatient);\n  yield takeEvery('ADD_PATIENT', addNewPatient);\n  yield takeEvery('LAST_PATIENT_ID_PLUS_ONE', newPatientId);\n  yield takeLatest('GET_PATIENT_ID_FROM_COOKIE', setPatientFromCookie);\n}\n\nexport default patientSaga;\n","import axios from 'axios';\nimport { call, put, takeLatest } from 'redux-saga/effects';\n\n// worker SAGA: will be fired on 'ADD_POST_OP' action\n// user entered a new patient .. will add a blank row for patient\nfunction* addPostOp(action) {\n  try {\n      // axios asynch call to add item on database\n      yield call(axios.post, '/api/post_op', action.payload);\n      // will need to make a call to update the list of item\n      // yield put( { type: 'FETCH_ITEMS' } );\n  }\n  catch (error) {\n      console.log('error with add post op post request');\n  }\n}\n\n// worker Saga: will be fired on \"FETCH_POST_OP\" actions\nfunction* fetchPostOp(action) {\n  // action payload is id\n  console.log('in fetch post op Saga', action.payload);\n  // let patientId = action.payload;\n  try {\n    console.log('IN FETCH POST OP BEFORE GOING TO SERVER')\n    const response = yield axios.get(`api/post_op/${action.payload}`);\n    console.log('response from post op call :', response);\n    // set state\n    yield put({ type: 'SET_POST_OP', payload: response.data });\n    // console.log('after SET POST OP:', response.data);\n  } catch (error) {\n    console.log('Post op get request failed', error);\n  }\n}\n\nfunction* updatePostOp(action) {\n  // action payload\n  console.log('in update post op Saga', action.payload);\n  try {\n      yield call(axios.put, `/api/post_op`, action.payload);\n      // let patientId = this.props.reduxState.patientReducer.patient.id;\n      yield put( { type: 'FETCH_POST_OP' , payload: action.payload.patient_id} );\n  } catch (error) {\n      console.log(error);\n      alert('Unable to update post op');\n  }\n}\n\n// Will we ever need this? Will they remove patients?\n// worker SAGA: will be fired on 'DELETE_ITEM' actions\n// function* deleteItem(action) {\n//   try {\n//     //axios call to remove selected category\n//     yield call(axios.delete, '/api/item', {params: {id: action.payload}});\n//     // will need to make a call to update the list of catgories\n//     yield put( { type: 'FETCH_ITEMS' } );\n//   }\n//   catch (error) {\n//     console.log('error with delete request to /api/item');\n//   } \n// }\n\nfunction* postOpSaga() {\n  yield takeLatest('ADD_POST_OP', addPostOp);\n  yield takeLatest('FETCH_POST_OP', fetchPostOp);\n  yield takeLatest('UPDATE_POST_OP', updatePostOp);\n  // yield takeLatest('DELETE_ITEM', deleteItem);\n}\n\nexport default postOpSaga;\n","import axios from 'axios';\nimport { call, put, takeLatest } from 'redux-saga/effects';\n\n// worker SAGA: will be fired on 'ADD_POST_OP' action\n// user entered a new patient .. will add a blank row for patient\n// function* addAdverseEvent(action) {\n//   try {\n//       // axios asynch call to add item on database\n//       yield call(axios.post, '/api/adverse_event', action.payload);\n//       // will need to make a call to update the list of item\n//       // yield put( { type: 'FETCH_ITEMS' } );\n//   }\n//   catch (error) {\n//       console.log('error with add adverse events post request');\n//   }\n// }\n\n// worker Saga: will be fired on \"FETCH_ADVERSE_EVENT\" actions\nfunction* fetchAdverseEvent(action) {\n  console.log('in fetch adverse event Saga', action.payload);\n  // let patientId = action.payload.patient.id;\n  try {\n    const response = yield axios.get(`api/adverse_event/${action.payload}`);\n    console.log('response from adverse event call :', response);\n    // set state\n    yield put({ type: 'SET_ADVERSE_EVENT', payload: response.data });\n  } catch (error) {\n    console.log('Adverse event get request failed', error);\n  }\n}\n\n// worker Saga: will be fired on \"UPDATE_ADVERSE_EVENT\" actions\nfunction* updateAdverseEvent(action) {\n  console.log('in update adverse event Saga', action.payload);\n\n  let events = action.payload.adverse_events.filter(function(eventIn) {\n    return (eventIn.checked == true && eventIn.clavien_score != null);\n  });\n\n  let eventsToSend = {\n    patient_id: action.payload.patient_id,\n    arrayEventOptionIds: [],\n    arrayPatientIds: [],\n    arrayClavienScores: [],\n  }\n\n  events.forEach(element => {\n    eventsToSend.arrayEventOptionIds.push(element.id);\n    eventsToSend.arrayPatientIds.push(element.patient_id);\n    eventsToSend.arrayClavienScores.push(element.clavien_score);\n  });\n\n  // console.log('delete adverse_events table:', action.payload.id);\n  // try {\n  //   // yield call(axios.delete, '/api/item', {params: {id: action.payload}});\n\n  //   yield call(axios.delete, `/api/adverse_event`, {params: {id: action.payload.id}});\n  //   // yield put( { type: 'FETCH_ADVERSE_EVENT' } );\n  // } catch (error) {\n  //     console.log(error);\n  //     alert('Unable to update adverse event');\n  // }\n\n  console.log('what to update in adverse_events table:', eventsToSend, eventsToSend.patient_id);\n  try {\n      yield call(axios.post, `/api/adverse_event`, eventsToSend);\n      yield put( { type: 'FETCH_ADVERSE_EVENT', payload: action.payload.patient_id } );\n  } catch (error) {\n      console.log(error);\n      alert('Unable to update adverse event');\n  }\n}\n\n// Will we ever need this? Will they remove patients?\n// worker SAGA: will be fired on 'DELETE_ITEM' actions\n// function* deleteItem(action) {\n//   try {\n//     //axios call to remove selected category\n//     yield call(axios.delete, '/api/item', {params: {id: action.payload}});\n//     // will need to make a call to update the list of catgories\n//     yield put( { type: 'FETCH_ITEMS' } );\n//   }\n//   catch (error) {\n//     console.log('error with delete request to /api/item');\n//   } \n// }\n\nfunction* adverseEventSaga() {\n  yield takeLatest('UPDATE_ADVERSE_EVENT', updateAdverseEvent);\n  yield takeLatest('FETCH_ADVERSE_EVENT', fetchAdverseEvent);\n  // yield takeLatest('UPDATE_ADVERSE_EVENT', updateAdverseEvent);\n  // yield takeLatest('DELETE_ITEM', deleteItem);\n}\n\nexport default adverseEventSaga;\n","import axios from 'axios';\nimport { call, put, takeLatest } from 'redux-saga/effects';\n\n// worker SAGA: will be fired on 'ADD_FOLLOW_UP' action\n// user entered a new patient .. will add a blank row for patient\nfunction* addFollowUp(action) {\n  try {\n      // axios asynch call to add item on database\n      yield call(axios.post, '/api/follow_up', action.payload);\n  }\n  catch (error) {\n      console.log('error with add follow up post request');\n  }\n}\n\n// worker Saga: will be fired on \"FETCH_FOLLOW_UP\" actions\nfunction* fetchFollowUp(action) {\n  // console.log('in fetch follow up Saga', action.payload);\n  try {\n    const response = yield axios.get(`api/follow_up/${action.payload}`);\n    // set state\n    yield put({ type: 'SET_FOLLOW_UP', payload: response.data });\n  } catch (error) {\n    console.log('follow up get request failed', error);\n  }\n}\n\n// worker Saga: will be fired on \"UPDATE_FOLLOW_UP\" actions\nfunction* updateFollowUp(action) {\n  console.log('in update follow up Saga', action.payload);\n  try {\n      yield call(axios.put, `/api/follow_up`, action.payload);\n      // call to update state\n      yield put( { type: 'FETCH_FOLLOW_UP' , payload: action.payload.patient_id} );\n  } catch (error) {\n      console.log(error);\n      alert('Unable to update follow up');\n  }\n}\n\n// Will we ever need this? Will they remove patients?\n// worker SAGA: will be fired on 'DELETE_ITEM' actions\n// function* deleteItem(action) {\n//   try {\n//     //axios call to remove selected category\n//     yield call(axios.delete, '/api/item', {params: {id: action.payload}});\n//     // will need to make a call to update the list of catgories\n//     yield put( { type: 'FETCH_ITEMS' } );\n//   }\n//   catch (error) {\n//     console.log('error with delete request to /api/item');\n//   } \n// }\n\nfunction* followUpSaga() {\n  yield takeLatest('ADD_FOLLOW_UP', addFollowUp);\n  yield takeLatest('FETCH_FOLLOW_UP', fetchFollowUp);\n  yield takeLatest('UPDATE_FOLLOW_UP', updateFollowUp);\n  // yield takeLatest('DELETE_ITEM', deleteItem);\n}\n\nexport default followUpSaga;\n","import axios from 'axios';\nimport { call, put, takeLatest } from 'redux-saga/effects';\n\n// worker SAGA: will be fired on 'ADD_FOLLOW_UP_HISTORY' action\nfunction* addFollowUpHistory(action) {\n  try {\n      // axios asynch call to add item on database\n      yield call(axios.post, '/api/follow_up_history', action.payload);\n      yield put( { type: 'FETCH_FOLLOW_UP_HISTORY' , payload: action.payload.patient_id} );\n  }\n  catch (error) {\n      console.log('error with add follow up history post request');\n  }\n}\n\n// worker Saga: will be fired on \"FETCH_FOLLOW_UP_HISTORY\" actions\nfunction* fetchFollowUpHistory(action) {\n  // console.log('in fetch follow up history Saga', action.payload);\n  try {\n    const response = yield axios.get(`api/follow_up_history/${action.payload}`);\n    // console.log('response from follow up history:', response);\n    // set state\n    yield put({ type: 'SET_FOLLOW_UP_HISTORY', payload: response.data });\n  } catch (error) {\n    console.log('follow up history get request failed', error);\n  }\n}\n\nfunction* updateFollowUpHistory(action) {\n  console.log('in update follow up history Saga', action.payload);\n  try {\n      yield call(axios.put, `/api/follow_up_history`, action.payload);\n      yield put( { type: 'FETCH_FOLLOW_UP_HISTORY' , payload: action.payload.patient_id} );\n  } catch (error) {\n      console.log(error);\n      alert('Unable to update follow up history');\n  }\n}\n\n// Will we ever need this? Will they remove patients?\n// worker SAGA: will be fired on 'DELETE_ITEM' actions\n// function* deleteItem(action) {\n//   try {\n//     //axios call to remove selected category\n//     yield call(axios.delete, '/api/item', {params: {id: action.payload}});\n//     // will need to make a call to update the list of catgories\n//     yield put( { type: 'FETCH_ITEMS' } );\n//   }\n//   catch (error) {\n//     console.log('error with delete request to /api/item');\n//   } \n// }\n\nfunction* followUpHistorySaga() {\n  yield takeLatest('ADD_FOLLOW_UP_HISTORY', addFollowUpHistory);\n  yield takeLatest('FETCH_FOLLOW_UP_HISTORY', fetchFollowUpHistory);\n  yield takeLatest('UPDATE_FOLLOW_UP_HISTORY', updateFollowUpHistory);\n  // yield takeLatest('DELETE_ITEM', deleteItem);\n}\n\nexport default followUpHistorySaga;\n","import { takeLatest , call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* addNewUser(action) {\n    try {\n        yield call(axios.post, '/addNewUser', action.payload)\n        yield put({ type: 'RENDER_ALL_USERS', payload: action.payload.profileUserId })\n\n    } catch (error) {\n        console.log(error);\n        alert('Unable to add new user');\n    }\n}\n\nfunction* addNewUserSaga() {\n  yield takeLatest('ADD_NEW_USER', addNewUser);\n  \n}\n\nexport default addNewUserSaga;","import { put, takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* getAllUsers(action) { \n    try {\n        const response = yield call(axios.get, `/getAllUsers`)\n        yield put(({ type: 'SET_ALL_USERS', payload: response.data}))\n        \n      }\n      catch (error) {\n        console.log('error with getting reques', error);\n        \n      }\n}\n\nfunction* getAllUsersSaga() {\n  yield takeLatest('RENDER_ALL_USERS', getAllUsers);\n  \n}\n\nexport default getAllUsersSaga;","import { takeLatest , call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* editProfile(action) { \n    console.log('edit profile action.payload', action.payload);\n    \n    try {\n        yield call(axios.put, `/editUserProfile/${action.payload.userId}`, action.payload);\n        yield put({ type: 'RENDER_ALL_USERS', payload: action.payload.profileUserId } )\n\n    } catch (error) {\n        console.log(error);\n        alert('Unable to add project');\n    }\n}\n\n\nfunction* editProfileSaga() {\n  yield takeLatest('EDIT_INDIVIDUAL_USER', editProfile);\n  \n}\n\nexport default editProfileSaga;","import { put, takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* selectProfile(action) {\n    try {\n        const response = yield call(axios.get, `/getIndividualProfile/${action.payload.userID}`)\n        yield put({ type: 'GET_INDIVIDUAL_USER', payload: response.data })\n        \n        \n      }\n      catch (error) {\n        console.log('error with getting request', error);\n        \n      }\n}\n\n\n\nfunction* findUserProfileSaga() {\n  yield takeLatest('FIND_USER_PROFILE', selectProfile);\n  \n}\n\nexport default findUserProfileSaga;","import { takeLatest , call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* pathologyNotes(action) {\n    try {\n        yield call(axios.post, `/pathologyNotes`, action.payload);\n        yield put({ type: 'GET_PATHOLOGY_HISTORY', payload: action.payload.userId } )\n\n    } catch (error) {\n        console.log(error);\n        alert('Unable to add project');\n    }\n}\n\n\nfunction* pathologyNotesSaga() {\n  yield takeLatest('UPDATE_PATHOLOGY_NOTE', pathologyNotes);\n  \n}\n\nexport default pathologyNotesSaga;","import { takeLatest , call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* operativeNotes(action) { \n    try {\n        yield call(axios.post, `/operativeNotes`, action.payload);\n        yield put({ type: 'GET_OPERATIVE_HISTORY', payload: action.payload.userId } )\n\n    } catch (error) {\n        console.log(error);\n        alert('Unable to add project');\n    }\n}\n\n\nfunction* operativeNotesSaga() {\n  yield takeLatest('UPDATE_OPERATIVE_NOTE', operativeNotes);\n  \n}\n\nexport default operativeNotesSaga;","import { takeLatest , call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* interventionResection(action) { \n    try {\n        yield call(axios.put, `/interventionResection/${action.payload.userId}`, action.payload);\n        yield put({ type: 'GET_PCI_TOTAL', payload: action.payload.userId } )\n\n    } catch (error) {\n        console.log(error);\n        alert('Unable to add project, Please make sure all fields have been filled out!');\n    }\n}\n\n\nfunction* interventionSaga() {\n  yield takeLatest('POST_INTERVENTION_PAGE', interventionResection);\n  \n}\n\nexport default interventionSaga;","import { put, takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* pathologyHistory(action) {\n    try {\n        const response = yield call(axios.get, `/getPathologyHistory/${action.payload}`)\n        yield put({ type: 'GET_INDIVIDUAL_PATHOLOGY_HISTORY', payload: response.data })\n        \n        \n      }\n      catch (error) {\n        console.log('error with getting reques', error);\n        \n      }\n}\n\n\n\nfunction* getPathologyHistorySaga() {\n  yield takeLatest('GET_PATHOLOGY_HISTORY', pathologyHistory);\n  \n}\n\nexport default getPathologyHistorySaga;","import { put, takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* operativeHistory(action) {\n    try {\n        const response = yield call(axios.get, `/getOperativeHistory/${action.payload}`)\n        yield put({ type: 'GET_INDIVIDUAL_OPERATIVE_HISTORY', payload: response.data })\n        \n        \n      }\n      catch (error) {\n        console.log('error with getting reques', error);\n        \n      }\n}\n\n\n\nfunction* getOperativeHistorySaga() {\n  yield takeLatest('GET_OPERATIVE_HISTORY', operativeHistory);\n  \n}\n\nexport default getOperativeHistorySaga;","import { put, takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* pciTotal(action) {\n    try {\n        const response = yield call(axios.get, `/pciTotal/${action.payload}`)\n        yield put({ type: 'GET_PCI', payload: response.data })\n        \n        \n      }\n      catch (error) {\n        console.log('error with getting reques', error);\n        \n      }\n}\n\nfunction* pciTotalSaga() {\n    console.log('in PCI Total Saga');\n    \n  yield takeLatest('GET_PCI_TOTAL', pciTotal);\n  \n}\n\nexport default pciTotalSaga;","import { takeLatest , call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* getInitalValues(action) { \n    console.log('Getting init values for primary tumor page', action.payload);\n    \n    try {\n        const response = yield call(axios.post, `/api/primaryTumor/getDataFor`, {id: action.payload});\n        yield put({ type: 'SET_INIT_VALUES', payload: response.data } )\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nfunction* updateEntries(action) {\n    console.log('Sending data to server to update database')\n\n    try{\n        const response = yield call(axios.put, `/api/primaryTumor`, {userInfo: action.payload})\n        yield put({type: 'SET_INIT_VALUES', payload: response.data})\n    }\n    catch(error){\n        console.log('error trying to update db from primaryTumorSaga')\n    }\n}\n\n\nfunction* primaryTumorSaga() {\n  yield takeLatest('GET_INITIAL_VALUES', getInitalValues);\n  yield takeLatest('UPSERT_DATA_FOR_PRIMARY_TUMOR', updateEntries);\n}\n\nexport default primaryTumorSaga;","import { put, takeLatest , call } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* getInitalDataForIntake(action) { \n    console.log('Getting init values for intake page', action.payload);\n    \n    try {\n        console.log(action.payload, 'this is our action.payload for our get init data on the intake saga')\n        const response = yield axios.get( `/api/intake/${action.payload}`);\n        yield put({ type: 'SET_INITAL_DATA_FOR_INTAKE', payload: response.data } )\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nfunction* sendUpdatedDataToDB(action) {\n    console.log('SENDING DATA TO DB FOR THE INTAKE PAGE', action.payload)\n    try {\n        const response = yield call(axios.post, '/api/intake/', action.payload);\n        yield put({type: 'SET_INITAL_DATA_FOR_INTAKE', payload: response.data})\n        console.log(response.data);\n    }\n    catch(error){\n        console.log(error)\n    }\n}\n\n\n\nfunction* intakeSaga() {\n  yield takeLatest('GET_INITIAL_DATA_FOR_INTAKE', getInitalDataForIntake);\n  yield takeLatest('UPSERT_DATA_FOR_INTAKE', sendUpdatedDataToDB);\n}\n\nexport default intakeSaga;","import { takeLatest , call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\n\nfunction* getInitalValuesForPSDSS(action) {     \n    try {\n        const response = yield axios.get(`/api/psdss/${action.payload}`);\n        yield put({type: 'SET_INITIAL_DATA_FOR_PSDSS', payload: response.data});\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nfunction* updateEntriesForPSDSS(action) {\n    console.log('Sending data to server to update database')\n\n    try{\n        const response = yield call(axios.put, `/api/psdss`, action.payload)\n        yield put({type: 'SET_INITIAL_DATA_FOR_PSDSS', payload: response.data});\n    }\n    catch(error){\n        console.log('error trying to update db from psdssSaga')\n    }\n}\n\n\nfunction* psdssSaga() {\n  yield takeLatest('GET_INITIAL_DATA_FOR_PSDSS', getInitalValuesForPSDSS);\n  yield takeLatest('UPSERT_DATA_FOR_PSDSS', updateEntriesForPSDSS);\n}\n\nexport default psdssSaga;","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport patientSaga from './patientSaga';\nimport postOpSaga from './postOpSaga';\nimport adverseEventsSaga from './adverseEventsSaga';\nimport followUpSaga from './followUpSaga';\nimport followUpHistorySaga from './followUpHistorySaga';\nimport addNewUserSaga from './addNewUserSaga';\nimport allUsersSaga from './allUsersSaga';\nimport editIndividualUserSaga from './editIndividualProfileSaga';\nimport findUserProfileSaga from './getIndividualUserSaga';\nimport pathologyNotesSaga from './pathologyNotesSaga';\nimport operativeNotesSaga from './operativeNotesSaga';\nimport interventionSaga from './interventionResectionSaga';\nimport pathologyHistorySaga from './getPathologyHistorySaga';\nimport operativeHistorySaga from './getOperativeHistorySaga';\nimport pciTotalSaga from './pciSaga';\nimport primaryTumorSaga from './primaryTumorSaga';\nimport intakeSaga from './intakeSaga';\nimport psdssSaga from './psdssSaga';\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    patientSaga(),\n    postOpSaga(),\n    adverseEventsSaga(),\n    followUpSaga(),\n    followUpHistorySaga(),\n    addNewUserSaga(),\n    allUsersSaga(),\n    editIndividualUserSaga(),\n    findUserProfileSaga(),\n    pathologyNotesSaga(),\n    operativeNotesSaga(),\n    interventionSaga(),\n    pathologyHistorySaga(),\n    operativeHistorySaga(),\n    pciTotalSaga(),\n    primaryTumorSaga(),\n    intakeSaga(),\n    psdssSaga(),\n  ]);\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst LogOutButton = props => (\n  <button\n    // This button shows up in multiple locations and is styled differently\n    // because it's styled differently depending on where it is used, the className\n    // is passed to it from it's parents through React props\n    className={props.className}\n    onClick={() => props.dispatch({ type: 'LOGOUT' })}\n  >\n    Log Out\n  </button>\n);\n\n// This component doesn't need 'mapStateToProps'\n// because it doesn't care what the current state is.\n// No matter what the redux state is, this button will always be a log out button\n// this component still needs 'connect' though, because it is going to dispatch a redux action\nexport default connect()(LogOutButton);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport './Nav.css';\n\nconst Nav = (props) => (\n  <div className=\"nav\">\n    <Link to=\"/home\">\n      <h2 className=\"nav-title\">HIPEC Patient Database Application</h2>\n    </Link>\n    {/* <div className=\"nav-right\">\n      <Link className=\"nav-link\" to=\"/home\"> */}\n        {/* Show this link if they are logged in or not,\n        but call this link 'Home' if they are logged in,\n        and call this link 'Login / Register' if they are not */}\n        {/* {props.user.id ? 'Home' : 'Login / Register'}\n      </Link> */}\n      {/* Show the link to the info page and the logout button if the user is logged in */}\n      <Link className=\"nav-link\" to=\"/about\">\n        About\n      </Link>\n      {props.user.id && (\n        <>\n          <Link className=\"nav-link\" to=\"/info\">\n            Info Page\n          </Link>\n          <LogOutButton className=\"nav-link\"/>\n        </>\n      )}\n      {/* Always show this link since the about page is not protected */}\n      <Link className=\"nav-link\" to=\"#\"><strong>{props.user.title} {props.user.first_name} {props.user.last_name}</strong></Link>\n    {/* </div> */}\n  </div>\n);\n\n// Instead of taking everything from state, we just want the user\n// object to determine if they are logged in\n// if they are logged in, we show them a few more links \n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user }) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(Nav);\n","import React from 'react';\nimport './Footer.css'\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst Footer = () => (\n  <footer>\n    &copy; Therma Solutions\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.loginMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.loginMessage}\n          </h2>\n        )}\n        <form onSubmit={this.login}>\n          <h1>Login</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"log-in\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Log In\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_REGISTER_MODE'})}}\n          >\n            Register\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(LoginPage);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({type: 'REGISTRATION_INPUT_ERROR'});\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.registrationMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        <form onSubmit={this.registerUser}>\n          <h1>Register User</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_LOGIN_MODE'})}}\n          >\n            Login\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(RegisterPage);\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React from 'react';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst AboutPage = () => (\n  <div>\n    <div>\n      <p>\n        This about page is for anyone to read!\n      </p>\n    </div>\n  </div>\n);\n\nexport default AboutPage;\n","import React from 'react';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst InfoPage = () => (\n  <div>\n    <p>\n      Info Page\n    </p>\n  </div>\n);\n\nexport default InfoPage;\n","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport moment from 'moment';\n\nconst styles = theme => ({\n    gridItem:{\n        marginBottom: 30,\n    },\n    dropDown:{\n        fullWidth: true,\n    },\n      group: {\n        margin: `${theme.spacing.unit}px 0`,\n      },\n});\nclass PrimaryTumorDetails extends Component {\n\n    state = {\n        labelWidth: 0,\n    }\n\n    componentDidMount() {\n        this.setState({\n            labelWidth: ReactDOM.findDOMNode(this.InputLabelRef).offsetWidth,\n        });\n    }\n    render() {\n        const { classes } = this.props;\n        return(\n            <div>\n            <Grid container spacing={24}>\n                <Grid item xs={2}>\n                  <TextField\n                      onChange={this.props.handleChange}\n                      value={moment(this.props.primary_tumor.date_primary_diagnosis).format('YYYY-MM-DD')}\n                      name=\"date_primary_diagnosis\"\n                      margin=\"dense\"\n                      label=\"Primary Diagnosis Date\"\n                      type=\"date\"\n                      variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={3}>\n                  <FormControl variant=\"outlined\" margin=\"dense\" fullWidth>\n                      <InputLabel \n                              htmlFor=\"primary_location\"\n                              ref={ref => {\n                                this.InputLabelRef = ref;\n                              }}\n                          >\n                              Primary Location\n                          </InputLabel>\n                          <Select\n                              value={this.props.primary_tumor.primary_location}\n                              onChange={this.props.handleChange}\n                              input={\n                              <OutlinedInput\n                                  value={this.props.primary_tumor.primary_location}\n                                  name=\"primary_location\"\n                                  id=\"primary_location\"\n                                  labelWidth={this.state.labelWidth}\n                              />\n                              }\n                          >\n                              <MenuItem value=\"\">\n                                  <em>None</em>\n                              </MenuItem>\n                              {this.props.dropdownOptions.primaryLocationOptions.map(location => (\n                                  <MenuItem key={location.id} value={location.id}>{location.status}</MenuItem> \n                              ))} \n                          </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={2} >\n                    <FormControl variant=\"outlined\" margin=\"dense\" fullWidth>\n                    <InputLabel\n                            ref={ref => {\n                              this.InputLabelRef = ref;\n                            }}\n                             htmlFor=\"t\"\n                          >\n                              Tumor\n                          </InputLabel>\n                    <Select\n                        value={this.props.primary_tumor.t}\n                        onChange={this.props.handleChange}\n                        input={\n                        <OutlinedInput\n                            value={this.props.primary_tumor.t}\n                            name=\"t\"\n                            id=\"t\"\n                            labelWidth={this.state.labelWidth}\n                        />\n                        }\n                    >\n                        {this.props.dropdownOptions.t.map(t => (\n                            <MenuItem key={t.id} value={t.status}>{t.name}</MenuItem> \n                        ))} \n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={2}>\n                <FormControl variant=\"outlined\" margin=\"dense\" fullWidth>\n                      <InputLabel \n                              htmlFor=\"n-input\"\n                              ref={ref => {\n                                this.InputLabelRef = ref;\n                              }}\n                          >\n                              Node\n                          </InputLabel>\n                    <Select\n                        value={this.props.primary_tumor.n}\n                        onChange={this.props.handleChange}\n                        input={\n                        <OutlinedInput\n                            value={this.props.primary_tumor.n}\n                            name=\"n\"\n                            id=\"n-input\"\n                            labelWidth={this.state.labelWidth}\n                        />\n                        }\n                    >\n                        {this.props.dropdownOptions.n.map(n => (\n                            <MenuItem key={n.id} value={n.status}>{n.name}</MenuItem> \n                        ))} \n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={3}>\n                <FormControl variant=\"outlined\" margin=\"dense\" fullWidth>\n                    <InputLabel \n                              htmlFor=\"m\"\n                              ref={ref => {\n                                this.InputLabelRef = ref;\n                              }}\n                          >\n                              Metastasis\n                          </InputLabel>\n                    <Select\n                        value={this.props.primary_tumor.m}\n                        onChange={this.props.handleChange}\n                        input={\n                        <OutlinedInput\n                            value={this.props.primary_tumor.m}\n                            name=\"m\"\n                            id=\"m-input\"\n                            labelWidth={this.state.labelWidth}\n                        />\n                        }\n                    >\n                        {this.props.dropdownOptions.m.map(m => (\n                            <MenuItem key={m.id} value={m.status}>{m.name}</MenuItem> \n                        ))} \n                        </Select>\n                    </FormControl>\n                </Grid>\n            </Grid>\n            <Grid container spacing={24}>\n            <Grid item xs={4}>\n                <FormControl variant=\"outlined\" margin=\"dense\" fullWidth>\n                    <InputLabel \n                              htmlFor=\"m_location\"\n                              ref={ref => {\n                                this.InputLabelRef = ref;\n                              }}\n                          >\n                              Metastasis Location\n                          </InputLabel>\n                          <Select\n                              value={this.props.primary_tumor.m_location}\n                              onChange={this.props.handleChange}\n                              input={\n                              <OutlinedInput\n                                  value={this.props.primary_tumor.m_location}\n                                  name=\"m_location\"\n                                  id=\"primary-location\"\n                                  labelWidth={this.state.labelWidth}\n                              />\n                              }\n                          >\n                              <MenuItem value=\"\">\n                                  <em>None</em>\n                              </MenuItem>\n                              {this.props.dropdownOptions.mLocationOptions.map(location => (\n                                  <MenuItem key={location.id} value={location.id}>{location.status}</MenuItem> \n                              ))} \n                          </Select>\n                    </FormControl>\n            </Grid>\n            <Grid item xs={4} className={classes.gridItem}>\n                        <FormControl variant=\"outlined\" fullWidth=\"true\" margin=\"dense\" >\n                        <InputLabel \n                              htmlFor=\"differentiation\"\n                              ref={ref => {\n                                this.InputLabelRef = ref;\n                              }}\n                          >\n                              Differentiation\n                          </InputLabel>                            \n                            <Select\n                                value={this.props.primary_tumor.differentiation}\n                                onChange={this.props.handleChange}\n                                input={\n                                <OutlinedInput\n                                    value={this.props.primary_tumor.differentiation}\n                                    name=\"differentiation\"\n                                    id=\"differentiation\"\n                                    labelWidth={this.state.labelWidth}\n                                />\n                                }\n                            >\n                                <MenuItem value=\"\">\n                                    <em>None</em>\n                                </MenuItem>\n                                {this.props.dropdownOptions.differentiationOptions.map(dif => (\n                                    <MenuItem key={dif.id} value={dif.id}>{dif.status}</MenuItem> \n                                ))} \n                            </Select>\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <FormControl component=\"fieldset\" className={classes.formControl}>\n                        <FormLabel component=\"legend\">Mucinous</FormLabel>\n                            <RadioGroup row\n                                aria-label=\"mucinous\"\n                                name=\"mucinous\"\n                                className={classes.group}\n                                value={this.props.primary_tumor.mucinous}\n                                onChange={this.props.handleChange}\n                            >\n                                <FormControlLabel value=\"1\" control={<Radio />} label=\"Yes\" />\n                                <FormControlLabel value=\"2\" control={<Radio />} label=\"No\" />\n                                <FormControlLabel value=\"3\" control={<Radio />} label=\"Unknown\" />\n                            </RadioGroup>\n                        </FormControl>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n  \n};\nconst mapStateToProps = reduxState => ({\n    dropdownOptions: reduxState.dropdownOptions,\n});\nexport default connect(mapStateToProps) (withStyles(styles)(PrimaryTumorDetails))","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport PropTypes from 'prop-types';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport moment from 'moment';\n\nconst styles = theme => ({\n    gridItem:{\n        marginBottom: 30,\n    },\n    dropDown:{\n        fullWidth: true,\n    },\n      group: {\n        margin: `${theme.spacing.unit}px 0`,\n      },\n});\n\nclass PrimaryTumorTreatment extends Component {\n\n    state = {\n        labelWidth: 0,\n    }\n\n    componentDidMount() {\n        this.setState({\n            labelWidth: ReactDOM.findDOMNode(this.InputLabelRef).offsetWidth,\n        });\n    }\n\n    render() {\n        const { classes } = this.props;\n        return(\n            <>\n            <Grid container spacing={24}>\n          <Grid item xs={2} className={classes.gridItem}>\n              <TextField \n              variant=\"outlined\"\n              margin=\"dense\"\n              label=\"Primary Surgery Date\"\n              type=\"date\"\n              fullWidth=\"true\"\n              onChange={this.props.handleChange}\n              name=\"date_prime_surgery\"\n              value={moment(this.props.primary_tumor.date_prime_surgery).format('YYYY-MM-DD')}\n              />\n          </Grid >\n          <Grid item xs={3} className={classes.gridItem}>\n              <FormControl variant=\"outlined\" fullWidth=\"true\" margin=\"dense\" >\n                  <InputLabel \n                              htmlFor=\"intervention_type\"\n                              ref={ref => {\n                                this.InputLabelRef = ref;\n                              }}\n                          >\n                              Intervention Type\n                  </InputLabel>                  \n                  <Select\n                      value={this.props.primary_tumor.intervention_type}\n                      onChange={this.props.handleChange}\n                      input={\n                      <OutlinedInput\n                          value={this.props.primary_tumor.intervention_type}\n                          name=\"intervention_type\"\n                          id=\"interventionType\"\n                          labelWidth={this.state.labelWidth}\n                      />\n                      }\n                  >\n                      <MenuItem value=\"\">\n                          <em>None</em>\n                      </MenuItem>\n                      {this.props.dropdownOptions.interventionTypeOptions.map(int => (\n                          <MenuItem key={int.id} value={int.id}>{int.status}</MenuItem> \n                      ))} \n                  </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={3} className={classes.gridItem}>\n                        <FormControl variant=\"outlined\" margin=\"dense\" fullWidth>\n                            <InputLabel \n                              htmlFor=\"setting\"\n                              ref={ref => {\n                                this.InputLabelRef = ref;\n                              }}\n                          >\n                              Setting\n                             </InputLabel>                  \n                                    <Select\n                                        value={this.props.primary_tumor.setting}\n                                        onChange={this.props.handleChange}\n                                        input={\n                                        <OutlinedInput\n                                            value={this.props.primary_tumor.setting}\n                                            name=\"setting\"\n                                            id=\"setting\"\n                                            labelWidth={this.state.labelWidth}\n                                        />\n                                        }\n                                    >\n                                        <MenuItem value=\"\">\n                                            <em>None</em>\n                                        </MenuItem>\n                                        {this.props.dropdownOptions.settingOptions.map(set => (\n                                            <MenuItem key={set.id} value={set.id}>{set.status}</MenuItem> \n                                        ))} \n                                    </Select>\n                                </FormControl>\n                            </Grid>\n          <Grid item xs={3} className={classes.gridItem}>\n              <FormControl variant=\"outlined\" fullWidth=\"true\" margin=\"dense\">\n              <InputLabel \n                  htmlFor=\"prime_tumor_surgery\"\n                  ref={ref => {\n                    this.InputLabelRef = ref;\n                  }}\n              >\n                  Prime Tumor Surgery\n                  </InputLabel>\n                  <Select\n                      value={this.props.primary_tumor.prime_tumor_surgery}\n                      onChange={this.props.handleChange}\n                      input={\n                      <OutlinedInput\n                          value={this.props.primary_tumor.prime_tumor_surgery}\n                          name=\"prime_tumor_surgery\"\n                          id=\"prime_tumor_surgery\"\n                          labelWidth={this.state.labelWidth}\n                      />\n                      }\n                  >\n                      <MenuItem value=\"\">\n                          <em>None</em>\n                      </MenuItem>\n                      {this.props.dropdownOptions.primaryTumorSurgeryOptions.map(pts => (\n                          <MenuItem key={pts.id} value={pts.id}>{pts.status}</MenuItem> \n                      ))} \n                  </Select>\n              </FormControl>\n          </Grid>\n          <Grid item xs={4} className={classes.gridItem}>\n              <FormControl row component=\"fieldset\" margin=\"dense\" fullWidth className={classes.formControl}>\n              <FormLabel component=\"legend\">Adjuvant Chemotherapy</FormLabel>\n                  <RadioGroup row\n                      aria-label=\"adj\"\n                      name=\"adj_chemotherapy\"\n                      className={classes.group}\n                      value={this.props.primary_tumor.adj_chemotherapy}\n                      onChange={this.props.handleChange}\n                  >\n                      <FormControlLabel value='1' control={<Radio />} label=\"Yes\" />\n                      <FormControlLabel value='2' control={<Radio />} label=\"No\" />\n                      <FormControlLabel value='3' control={<Radio />} label=\"Unknown\" />\n\n                  </RadioGroup>\n              </FormControl>\n          </Grid>\n          <Grid item xs={3} className={classes.gridItem}>\n              <FormControl variant=\"outlined\" margin=\"dense\" fullWidth>\n              <InputLabel \n                  htmlFor=\"adj_chemotherapy_type\"\n                  ref={ref => {\n                    this.InputLabelRef = ref;\n                  }}\n              >\n                  Chemotherapy Type\n                  </InputLabel>\n              <Select\n                      value={this.props.primary_tumor.adj_chemotherapy_type}\n                      onChange={this.props.handleChange}\n                      input={\n                      <OutlinedInput\n                          value={this.props.primary_tumor.adj_chemotherapy_type}\n                          name=\"adj_chemotherapy_type\"\n                          id=\"type\"\n                          labelWidth={this.state.labelWidth}\n                      />\n                      }\n                  >\n                      <MenuItem value=\"\">\n                          <em>None</em>\n                      </MenuItem>\n                      {this.props.dropdownOptions.adjChemoTypeOptions.map(adj => (\n                          <MenuItem key={adj.id} value={adj.id}>{adj.status}</MenuItem> \n                      ))} \n                  </Select>\n              </FormControl>\n          </Grid>\n          <Grid item xs={3} className={classes.gridItem}>\n              <FormControl variant=\"outlined\" margin=\"dense\" fullWidth >\n              <InputLabel \n                  htmlFor=\"biological\"\n                  ref={ref => {\n                    this.InputLabelRef = ref;\n                  }}\n              >\n                  Biological\n                  </InputLabel>\n                  <Select\n                      value={this.props.primary_tumor.biological}\n                      onChange={this.props.handleChange}\n                      input={\n                      <OutlinedInput\n                          value={this.props.primary_tumor.biological}\n                          name=\"biological\"\n                          id=\"biological\"\n                          labelWidth={this.state.labelWidth}\n                      />\n                      }\n                  >\n                      <MenuItem value=\"\">\n                          <em>None</em>\n                      </MenuItem>\n                      {this.props.dropdownOptions.biologicalOptions.map(adj => (\n                          <MenuItem key={adj.id} value={adj.id}>{adj.status}</MenuItem> \n                      ))} \n                  </Select>\n              </FormControl>\n          </Grid>\n          <Grid item xs={12} className={classes.gridItem}>\n              <TextField\n                  fullWidth=\"true\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  onChange={this.props.handleChange}\n                  value={this.props.primary_tumor.notes}\n                  name='notes'\n                  multiline\n                  rows=\"5\"\n                  variant=\"outlined\"\n                  label=\"Notes\"\n              />\n          </Grid> \n        </Grid>\n            </>\n        )\n    }\n  \n};\n\nPrimaryTumorTreatment.propTypes = {\n    classes: PropTypes.object.isRequired,\n  };\n\nconst mapStateToProps = reduxState => ({\n    dropdownOptions: reduxState.dropdownOptions,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(PrimaryTumorTreatment))\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport PrimaryTumorDetails from './PrimaryTumorDetails';\nimport PrimaryTumorTreatment from './PrimaryTumorTreatment';\n\nconst styles = theme => ({\n    gridItem:{\n        marginBottom: 30,\n    },\n    dropDown:{\n        fullWidth: true,\n    },\n    formControl: {\n        margin: theme.spacing.unit * 3,\n      },\n      group: {\n        margin: `${theme.spacing.unit}px 0`,\n      },\n});\n\nclass PrimaryTumorPage extends Component {\n    state = {\n            changesMade: false,\n            adj_chemotherapy: '',\n            adj_chemotherapy_type: '',\n            biological: '',\n            chemo_type_1: '',\n            chemo_type_2: '',\n            date_primary_diagnosis: '',\n            date_prime_surgery: '',\n            differentiation: '',\n            id: '',\n            intervention_type: '',\n            m: '',\n            m_location: '',\n            mucinous: '',\n            n: '',\n            notes: '',\n            patient_id: '',\n            primary_location: '',\n            prime_tumor_surgery: '',\n            reason_acute: '',\n            setting:'',\n            t: '',\n    };\n\n    setValuesForPatient = () => {\n        this.setState({\n            ...this.state,\n            changesMade: false,\n            adj_chemotherapy: this.props.primaryTumorReducer.adj_chemotherapy,\n            adj_chemotherapy_type: this.props.primaryTumorReducer.adj_chemotherapy_type,\n            biological: this.props.primaryTumorReducer.biological,\n            chemo_type_1: this.props.primaryTumorReducer.chemo_type_1,\n            chemo_type_2: this.props.primaryTumorReducer.chemo_type_2,\n            date_primary_diagnosis: this.props.primaryTumorReducer.date_primary_diagnosis,\n            date_prime_surgery: this.props.primaryTumorReducer.date_prime_surgery,\n            differentiation: this.props.primaryTumorReducer.differentiation,\n            id: this.props.primaryTumorReducer.id,\n            intervention_type: this.props.primaryTumorReducer.intervention_type,\n            m: this.props.primaryTumorReducer.m,\n            m_location: this.props.primaryTumorReducer.m_location,\n            mucinous: this.props.primaryTumorReducer.mucinous,\n            n: this.props.primaryTumorReducer.n,\n            notes: this.props.primaryTumorReducer.notes,\n            patient_id: this.props.primaryTumorReducer.patient_id,\n            primary_location: this.props.primaryTumorReducer.primary_location,\n            prime_tumor_surgery: this.props.primaryTumorReducer.prime_tumor_surgery,\n            reason_acute: this.props.primaryTumorReducer.reason_acute,\n            t: this.props.primaryTumorReducer.t,\n            setting: this.props.primaryTumorReducer.setting,\n            type: this.props.primaryTumorReducer.type,\n        });\n    }\n\n    upsertEntriesInDB = () => {\n        if (this.state.changesMade) {        \n            this.props.dispatch({type: 'UPSERT_DATA_FOR_PRIMARY_TUMOR', payload: {state: this.state, id: this.props.patientReducer.patient.id}});\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState ({\n            ...this.state,\n            changesMade: true,\n            [event.target.name]: event.target.value,\n        })\n    }\n\n    componentDidMount() {\n        this.setValuesForPatient();\n    }\n\n    componentWillUnmount () {\n        this.upsertEntriesInDB();\n    }\n\n    render() {\n        const { classes } = this.props;\n        return(\n            <>\n            <h4>Primary Tumor Information</h4>\n            <PrimaryTumorDetails primary_tumor={this.state} \n                handleChange={this.handleChange}/>\n            <h4>Treatment Information</h4>\n            <PrimaryTumorTreatment primary_tumor={this.state} \n                handleChange={this.handleChange}/>\n            <Grid item xs={12} className={classes.gridItem} >\n              <Button onClick={this.upsertEntriesInDB} className={classes.button}\n                  variant=\"contained\" color=\"primary\">\n                  Save\n              </Button>\n          </Grid>\n            </>\n        )\n    }\n  \n};\n\nconst mapStateToProps = reduxState => ({\n    dropdownOptions: reduxState.dropdownOptions,\n    primaryTumorReducer: reduxState.primaryTumorReducer,\n    patientReducer: reduxState.patientReducer,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(PrimaryTumorPage))\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nconst styles = theme => ({\n    gridItem:{\n        marginBottom: 10,\n    },\n    dropDown:{\n        fullWidth: true,\n    },\n    formControl: {\n        margin: theme.spacing.unit * 3,\n      },\n      group: {\n        margin: `${theme.spacing.unit}px 0`,\n      },\n});\n\nclass IntakePageGeneral extends Component {\n    render() {\n        const { classes } = this.props;\n        return(\n            <>\n            <Grid container spacing={24}>\n                <Grid item xs={2}>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        onChange={this.props.handleChange}\n                        name=\"weight_kg\"\n                        value={this.props.intake.weight_kg}\n                        id=\"patientWeightInput\"\n                        label=\"Weight/Kilograms\"\n                        notched=\"true\"\n                        className={classNames(classes.margin, classes.textField, classes.InputLabelProps)}\n                    />\n                </Grid>\n                <Grid item xs={2}>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        onChange={this.props.handleChange}\n                        name=\"length_m\"\n                        value={this.props.intake.length_m}\n                        id=\"lengthInput\"\n                        label=\"Height/Meters\"\n                    />\n                </Grid>\n                <Grid item xs={2}>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        disabled\n                        onChange={this.props.handleChange}\n                        name=\"bmi\"\n                        value={this.props.intake.bmi_auto}\n                        id=\"bmi\"\n                        label=\"BMI (Body Mass Index)\"\n                    />\n                </Grid>\n                <Grid item xs={2}>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        onChange={this.props.handleChange}\n                        name=\"ca125\"\n                        value={this.props.intake.ca125}\n                        id=\"ca125\"\n                        label=\"CEA\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={2}>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        onChange={this.props.handleChange}\n                        name=\"crp\"\n                        value={this.props.intake.crp}\n                        id=\"crp\"\n                        label=\"CRP\"\n                    />\n                </Grid>\n                <Grid item xs={2}>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        onChange={this.props.handleChange}\n                        name=\"length_m\"\n                        value={this.props.intake.leucocyte}\n                        id=\"leucocyte\"\n                        label=\"Leucocyte\"\n                    />\n                </Grid>\n            </Grid>\n            <Grid container spacing={24}>\n                <Grid item xs={2} className={classes.gridItem}>\n                    <FormControl component=\"fieldset\" className={classes.formControl}>\n                        <FormLabel component=\"legend\">Smoking</FormLabel>\n                        <RadioGroup\n                            aria-label=\"Smoking\"\n                            name=\"smoking\"\n                            className={classes.group}\n                            value={this.props.intake.smoking}\n                            onChange={this.props.handleChange}\n                        >\n                            <FormControlLabel margin='dense' value='1' control={<Radio />} label=\"Yes\" />\n                            <FormControlLabel value='2' control={<Radio />} label=\"No\" />\n                            <FormControlLabel value='3' control={<Radio />} label=\"Unknown\" />\n\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={2} className={classes.gridItem}>\n                    <FormControl component=\"fieldset\" className={classes.formControl}>\n                        <FormLabel component=\"legend\">Diabetes</FormLabel>\n                        <RadioGroup\n                            aria-label=\"diabetes\"\n                            name=\"diabetes\"\n                            className={classes.group}\n                            value={this.props.intake.diabetes}\n                            onChange={this.props.handleChange}\n                        >\n                            <FormControlLabel value='1' control={<Radio />} label=\"Yes\" />\n                            <FormControlLabel value='2' control={<Radio />} label=\"No\" />\n                            <FormControlLabel value='3' control={<Radio />} label=\"Unknown\" />\n\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={2} className={classes.gridItem}>\n                    <FormControl component=\"fieldset\" className={classes.formControl}>\n                        <FormLabel component=\"legend\">Insulin Dependent</FormLabel>\n                        <RadioGroup\n                            aria-label=\"insulinDep\"\n                            name=\"insulin_dependent\"\n                            className={classes.group}\n                            value={this.props.intake.insulin_dependent}\n                            onChange={this.props.handleChange}\n                        >\n                            <FormControlLabel value='1' control={<Radio />} label=\"Yes\" />\n                            <FormControlLabel value='2' control={<Radio />} label=\"No\" />\n                            <FormControlLabel value='3' control={<Radio />} label=\"Unknown\" />\n\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={2} className={classes.gridItem}>\n                    <FormControl component=\"fieldset\" className={classes.formControl}>\n                        <FormLabel component=\"legend\">Cardiovascular</FormLabel>\n                        <RadioGroup\n                            aria-label=\"cardiovasc\"\n                            name=\"cardiovascular\"\n                            className={classes.group}\n                            value={this.props.intake.cardiovascular}\n                            onChange={this.props.handleChange}\n                        >\n                            <FormControlLabel value='1' control={<Radio />} label=\"Yes\" />\n                            <FormControlLabel value='2' control={<Radio />} label=\"No\" />\n                            <FormControlLabel value='3' control={<Radio />} label=\"Unknown\" />\n\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={2} className={classes.gridItem}>\n                    <FormControl component=\"fieldset\" className={classes.formControl}>\n                        <FormLabel component=\"legend\">Hypertension</FormLabel>\n                        <RadioGroup\n                            aria-label=\"Hypertension\"\n                            name=\"hypertension\"\n                            className={classes.group}\n                            value={this.props.intake.hypertension}\n                            onChange={this.props.handleChange}\n                        >\n                            <FormControlLabel value='1' control={<Radio />} label=\"Yes\" />\n                            <FormControlLabel value='2' control={<Radio />} label=\"No\" />\n                            <FormControlLabel value='3' control={<Radio />} label=\"Unknown\" />\n\n                        </RadioGroup>\n                    </FormControl>\n                </Grid> \n            </Grid>\n            </>\n        )\n    }\n  \n};\n\nconst mapStateToProps = reduxState => ({\n    dropdownOptions: reduxState.dropdownOptions,\n});\n\n\nexport default connect(mapStateToProps) (withStyles(styles)(IntakePageGeneral))\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nconst styles = theme => ({\n    gridItem:{\n        marginBottom: 10,\n    },\n    dropDown:{\n        fullWidth: true,\n    },\n    formControl: {\n        margin: theme.spacing.unit * 3,\n      },\n      group: {\n        margin: `${theme.spacing.unit}px 0`,\n      },\n});\n\nclass IntakePageNeoAdjuvant extends Component {\n    render() {\n        const { classes } = this.props;\n        return(\n            <>\n            <Grid container spacing={24}>\n                <Grid item xs={4} className={classes.gridItem}>\n                    <FormControl row component=\"fieldset\" className={classes.formControl}>\n                        <FormLabel component=\"legend\">Neo Adjuvant Chemotherapy?</FormLabel>\n                        <RadioGroup row\n                            aria-label=\"nac\"\n                            name=\"neo_adjuvant_chemo\"\n                            className={classes.group}\n                            value={this.props.intake.neo_adjuvant_chemo}\n                            onChange={this.props.handleChange}\n                        >\n                            <FormControlLabel value='1' control={<Radio />} label=\"Yes\" />\n                            <FormControlLabel value='2' control={<Radio />} label=\"No\" />\n                            <FormControlLabel value='3' control={<Radio />} label=\"Unknown\" />\n\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={3} className={classes.gridItem}>\n              <FormControl variant=\"outlined\" margin=\"dense\" fullWidth>\n              <InputLabel\n                  htmlFor=\"neo_adjuvant_chemo_type\"\n              >\n                  Chemotherapy Type\n                  </InputLabel>\n              <Select\n                      value={this.props.intake.neo_adjuvant_chemo_type}\n                      onChange={this.props.handleChange}\n                      input={\n                      <OutlinedInput\n                          value={this.props.intake.neo_adjuvant_chemo_type}\n                          name=\"neo_adjuvant_chemo_type\"\n                          id=\"neo_adjuvant_chemo_type\"\n                      />\n                      }\n                  >\n                      <MenuItem value=\"\">\n                          <em>None</em>\n                      </MenuItem>\n                      {this.props.dropdownOptions.adjChemoTypeOptions.map(adj => (\n                          <MenuItem key={adj.id} value={adj.id}>{adj.status}</MenuItem> \n                      ))} \n                  </Select>\n              </FormControl>\n          </Grid>\n          <Grid item xs={3} className={classes.gridItem}>\n              <FormControl variant=\"outlined\" margin=\"dense\" fullWidth >\n              <InputLabel shrink\n                  htmlFor=\"biological\"\n              >\n                  Biological\n                  </InputLabel>\n                  <Select\n                      value={this.props.intake.biological}\n                      onChange={this.props.handleChange}\n                      input={\n                      <OutlinedInput\n                          value={this.props.intake.biological}\n                          name=\"biological\"\n                          id=\"biological\"\n                      />\n                      }\n                  >\n                      <MenuItem value=\"\">\n                          <em>None</em>\n                      </MenuItem>\n                      {this.props.dropdownOptions.biologicalOptions.map(adj => (\n                          <MenuItem key={adj.id} value={adj.id}>{adj.status}</MenuItem> \n                      ))} \n                  </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} className={classes.gridItem}>\n              <TextField\n                  fullWidth=\"true\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  className={classes.treatmentPrimeTumorNotes}\n                  onChange={this.props.handleChange}\n                  value={this.props.intake.notes}\n                  name='notes'\n                  multiline\n                  rows=\"3\"\n                  variant=\"outlined\"\n                  label=\"Notes\"\n              />\n          </Grid> \n        </Grid>\n        </>\n        )\n    }\n  \n};\n\nconst mapStateToProps = reduxState => ({\n    // intake: reduxState.intakeReducer,\n    // patient: reduxState.patientReducer,\n    dropdownOptions: reduxState.dropdownOptions,\n});\n\n\nexport default connect(mapStateToProps) (withStyles(styles)(IntakePageNeoAdjuvant))\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport moment from 'moment';\n\nconst styles = theme => ({\n    gridItem:{\n        marginBottom: 10,\n    },\n    dropDown:{\n        fullWidth: true,\n    },\n    formControl: {\n        margin: theme.spacing.unit * 3,\n      },\n      group: {\n        margin: `${theme.spacing.unit}px 0`,\n      },\n});\n\nclass IntakePageDiagnostic extends Component {\n    render() {\n        const { classes } = this.props;\n        return(\n        <>\n            <Grid container spacing={24}>\n            <Grid item xs={4} className={classes.gridItem}>\n                <FormControl component=\"fieldset\" className={classes.formControl}>\n                    <FormLabel component=\"legend\">Diagnostic Scopy</FormLabel>\n                    <RadioGroup row\n                        aria-label=\"diagnostic_scopy\"\n                        name=\"diagnostic_scopy\"\n                        className={classes.group}\n                        value={this.props.intake.diagnostic_scopy}\n                        onChange={this.props.handleChange}\n                    >\n                        <FormControlLabel value='1' control={<Radio />} label=\"Yes\" />\n                        <FormControlLabel value='2' control={<Radio />} label=\"No\" />\n                        <FormControlLabel value='3' control={<Radio />} label=\"Unknown\" />\n\n                    </RadioGroup>\n                </FormControl>\n            </Grid>\n            <Grid item xs={4} className={classes.gridItem}>\n                <FormControl component=\"fieldset\" className={classes.formControl}>\n                    <FormLabel component=\"legend\">Scopy Conclusion</FormLabel>\n                    <RadioGroup row\n                        aria-label=\"scopy_conclusion\"\n                        name=\"scopy_conclusion\"\n                        className={classes.group}\n                        value={this.props.intake.scopy_conclusion}\n                        onChange={this.props.handleChange}\n                    >\n                        <FormControlLabel value='1' control={<Radio />} label=\"Amenable\" />\n                        <FormControlLabel value='2' control={<Radio />} label=\"Benefit of Doubt\" />\n                        <FormControlLabel value='3' control={<Radio />} label=\"No Go\" />\n\n                    </RadioGroup>\n                </FormControl>\n            </Grid>\n            <Grid item xs={4} className={classes.gridItem}>\n                <TextField dense\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    variant=\"outlined\"\n                    type=\"date\"\n                    fullWidth=\"true\"\n                    onChange={this.props.handleChange}\n                    name=\"date_scopy\"\n                    label=\"Date of Diagnostic Scopy\"\n                    value={moment(this.props.intake.date_scopy).format('YYYY-MM-DD')}\n                />\n            </Grid>\n            </Grid>\n        </>\n        )\n    }\n  \n};\n\nconst mapStateToProps = reduxState => ({\n    dropdownOptions: reduxState.dropdownOptions,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(IntakePageDiagnostic))\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport IntakePageGeneralInfo from './IntakePageGeneralInfo';\nimport IntakePageNeoAdjuvant from './IntakePageNeoAdjuvant';\nimport IntakePageDiagnostic from './IntakePageDiagnostic';\n\n\nconst styles = theme => ({\n    gridItem:{\n        marginBottom: 0,\n    },\n    dropDown:{\n        fullWidth: true,\n    },\n    formControl: {\n        margin: theme.spacing.unit * 3,\n      },\n      group: {\n        margin: `${theme.spacing.unit}px 0`,\n      },\n});\n\nclass IntakePage extends Component {\n    state = {\n        changesMade: false,\n        bmi_auto: '',\n        length_m: '',\n        weight_kg: '',\n        id: '',\n        patient_id: '',\n        crp: '',\n        ca125: '',\n        leucocyte: '',\n        smoking: '',\n        diabetes: '',\n        insulin_dependent: '',\n        cardiovascular: '',\n        hypertension: '',\n        stoma_pre_hipec: '',\n        stoma_type: '',\n        neo_adjuvant_chemo: '',\n        neo_adjuvant_chemo_type: '',\n        biological: '',\n        notes: '',\n        diagnostic_scopy: '',\n        date_scopy: '',\n        scopy_conclusion: '',\n        scopy_notes: '',\n        syn_metachronous: '',\n        date_diagnosis_pc: '',\n        assessment_of_pss: '',\n        asa_score_date_time_stamp: '',\n        date: '',\n    }\n\n    setInitialState = () => {\n        this.setState ({\n            ...this.state,\n            changesMade: false,\n            bmi_auto: this.props.intake.bmi_auto,\n            length_m: this.props.intake.length_m,\n            weight_kg: this.props.intake.weight_kg,\n            id: this.props.intake.id,\n            patient_id: this.props.intake.patient_id,\n            crp: this.props.intake.crp,\n            ca125: this.props.intake.ca125,\n            leucocyte: this.props.intake.leucocyte,\n            smoking: this.props.intake.smoking,\n            diabetes: this.props.intake.diabetes,\n            insulin_dependent: this.props.intake.insulin_dependent,\n            cardiovascular: this.props.intake.cardiovascular,\n            hypertension: this.props.intake.hypertension,\n            stoma_pre_hipec: this.props.intake.stoma_pre_hipec,\n            stoma_type: this.props.intake.stoma_type,\n            neo_adjuvant_chemo: this.props.intake.neo_adjuvant_chemo,\n            neo_adjuvant_chemo_type: this.props.intake.neo_adjuvant_chemo_type,\n            biological: this.props.intake.biological,\n            notes: this.props.intake.notes,\n            diagnostic_scopy: this.props.intake.diagnostic_scopy,\n            date_scopy: this.props.intake.date_scopy,\n            scopy_conclusion: this.props.intake.scopy_conclusion,\n            scopy_notes: this.props.intake.scopy_notes,\n            syn_metachronous: this.props.intake.syn_metachronous,\n            date_diagnosis_pc: this.props.intake.date_diagnosis_pc,\n            assessment_of_pss: this.props.intake.assessment_of_pss,\n            asa_score_date_time_stamp: this.props.intake.asa_score_date_time_stamp,\n            date: this.props.intake.date,\n        }) \n    }\n\n    //Function to calculate the bmi for the patient.\n    calculateBMI = () => {\n        let bmi;\n        let height = Number(this.state.length_m);\n        let weight = Number(this.state.weight_kg);\n        let squaredHeight = height * height;\n        bmi = weight/squaredHeight;\n        if (this.state.length_m !== '' && this.state.weight_kg !== '') {\n            this.setState({\n                bmi_auto: String(parseFloat(bmi).toFixed(2)),\n            })\n        } else {\n            this.setState({\n                bmi_auto: '',\n            })\n        }\n    }\n\n    //Function to handle the changes in our inputs and selectors.\n    handleChange = (event) => {\n        this.setState ({\n            [event.target.name]: event.target.value,\n            changesMade: true,\n        }\n        , this.calculateBMI)\n        console.log(this.state);\n    }\n    \n    updateEntriesInDB = () => {\n        this.props.dispatch({type: 'UPSERT_DATA_FOR_INTAKE', payload: {state: this.state, id: this.props.patient.patient.id}})\n    }\n\n    componentDidMount(){\n        this.setInitialState();\n    }\n\n    componentWillUnmount(){\n        this.updateEntriesInDB();\n    }\n\n    render() {\n        const { classes } = this.props;\n        return(\n            <>\n            <h4>General Information</h4>\n            <IntakePageGeneralInfo intake={this.state} \n                handleChange={this.handleChange} calculateBMI={this.calculateBMI}/>\n            <h4>Neo Adjuvant Treatment</h4>\n            <IntakePageNeoAdjuvant intake={this.state} handleChange={this.handleChange} />\n            <h4>Diagnostic Laparoscopy</h4>\n            <IntakePageDiagnostic intake={this.state} handleChange={this.handleChange}/>\n            <Button variant=\"contained\" color=\"primary\" onClick={this.updateEntriesInDB}>Save</Button>\n            </>\n        )\n    }\n  \n};\n\nconst mapStateToProps = reduxState => ({\n    intake: reduxState.intakeReducer,\n    patient: reduxState.patientReducer,\n    dropdownOptions: reduxState.dropdownOptions,\n});\n\n\nexport default connect(mapStateToProps) (withStyles(styles)(IntakePage))\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport moment from 'moment';\n\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing.unit * 3,\n        overflowX: 'auto',\n      },\n    gridItem:{\n        marginBottom: 10,\n    },\n    formControl: {\n        margin: theme.spacing.unit * 3,\n      },\n      group: {\n        margin: `${theme.spacing.unit}px 0`,\n      },\n      table: {\n        paddingBottom: 20,\n      },\n      headingElements:{\n          marginTop: 10,\n          marginBottom: 30,\n      },\n      containerPaper:{\n          padding: 20,\n      }\n});\n\nclass PSDSSPage extends Component {\n\n    render() {\n        const {classes} = this.props;\n        return(\n        <Grid\n            container\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"left\"\n            >\n            <Grid item xs={12} className={classes.gridItem}>\n            <FormControlLabel\n                control={\n                    <Checkbox\n                    name=\"synchronous_liver_treatment\"\n                    checked={this.props.psdssInfo.synchronous_liver_treatment}\n                    onChange={this.props.handleChangeCheckbox}\n                    // value={this.props.psdssInfo.synchronous_liver_treatment}\n                    />\n                }\n                label=\"Synchronous Liver Metastases Treatment\"\n            />\n            </Grid>\n            <Grid item xs={3} className={classes.gridItem}>\n                <TextField \n                label=\"Treatment Date\"\n                disabled={!this.props.psdssInfo.synchronous_liver_treatment}\n                variant=\"outlined\"\n                type=\"date\"\n                dense=\"true\"\n                onChange={this.props.handleChange}\n                name=\"date_treatment\"\n                value={moment(this.props.psdssInfo.date_treatment).format('YYYY-MM-DD')}\n                />\n            </Grid>\n            <Grid item xs={3} className={classes.gridItem}>\n                <FormControl variant=\"outlined\" margin=\"dense\" fullWidth className={classes.formControl}>\n                {this.props.psdss.synchronous_liver_treatment ? <InputLabel htmlFor=\"timing\">Timing</InputLabel> : <InputLabel htmlFor=\"timing\">Timing (Disabled)</InputLabel>}\n                    <Select\n                        value={this.props.psdssInfo.timing}\n                        onChange={this.props.handleChange}\n                        input={\n                            <OutlinedInput\n                            disabled={!this.props.psdssInfo.synchronous_liver_treatment}\n                            value={this.props.psdssInfo.timing}\n                            name=\"timing\"\n                            id=\"timing\"\n                            />\n                            }\n                            >\n                            <MenuItem value=\"\">\n                                <em>None</em>\n                            </MenuItem>\n                            {this.props.timingTreamentOptions.map(time => (\n                                <MenuItem key={time.id} value={time.id}>{time.status}</MenuItem> \n                            ))} \n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs={3} className={classes.gridItem}>\n                <FormControl margin=\"dense\" fullWidth variant=\"outlined\" className={classes.formControl}>\n                    {this.props.psdss.synchronous_liver_treatment ? <InputLabel htmlFor=\"timing\">Type</InputLabel> : <InputLabel htmlFor=\"timing\">Type (Disabled)</InputLabel>}\n                    <Select\n                        value={this.props.psdssInfo.treatment_type}\n                        onChange={this.props.handleChange}\n                        input={\n                            <OutlinedInput\n                            disabled={!this.props.psdssInfo.synchronous_liver_treatment}\n                            value={this.props.psdssInfo.treatment_type}\n                            name=\"treatment_type\"\n                            id=\"typeSLM\"\n                            />\n                            }\n                            >\n                            <MenuItem value=\"\">\n                                <em>None</em>\n                            </MenuItem>\n                            {this.props.treamentTypeOptions.map(type => (\n                                <MenuItem key={type.id} value={type.id}>{type.status}</MenuItem> \n                            ))} \n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs={12} className={classes.gridItem}> \n                <Typography variant=\"overline\"> </Typography>\n            </Grid>\n            <Grid item xs={12} className={classes.gridItem}>\n                <TextField\n                    disabled={!this.props.psdssInfo.synchronous_liver_treatment}\n                    fullWidth=\"true\"\n                    className={classes.treatmentPrimeTumorNotes}\n                    onChange={this.props.handleChange}\n                    value={this.props.psdssInfo.notes}\n                    name='notes'\n                    multiline\n                    rows=\"5\"\n                    variant=\"outlined\"\n                    label={this.props.psdssInfo.synchronous_liver_treatment ? \"Notes\" : \"Notes (Disabled)\"}\n                />\n            </Grid>\n        </Grid>\n        )\n    }\n};\n\nconst mapStateToProps = reduxState => ({\n    timingTreamentOptions: reduxState.dropdownOptions.timingTreamentOptions,\n    treamentTypeOptions: reduxState.dropdownOptions.treamentTypeOptions,\n    psdss: reduxState.psdssReducer,\n    patient: reduxState.patientReducer,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(PSDSSPage))\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport classNames from 'classnames';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport PSDSSPageData from './PSDSSPageData';\n\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing.unit * 3,\n        overflowX: 'auto',\n      },\n    gridItem:{\n        marginBottom: 10,\n    },\n    dropDown:{\n        fullWidth: true,\n    },\n    formControl: {\n        margin: theme.spacing.unit * 3,\n      },\n      group: {\n        margin: `${theme.spacing.unit}px 0`,\n      },\n      table: {\n        // maxWidth: 200,\n        paddingBottom: 20,\n      },\n      headingElements:{\n          marginTop: 10,\n          marginBottom: 30,\n      },\n      containerPaper:{\n          padding: 20,\n      }\n});\n\nclass PSDSSPage extends Component {\n    state = {\n        clinical: '',\n        pci: '',\n        histology: '',\n        synchronous_liver_treatment: false,\n        timing: '',\n        date_treatment: '',\n        treatment_type: '',\n        notes: '',\n        total: '(auto)',\n    }\n\n    //Function to set the state of the component equal to the redux state\n    setInitialState = () => {\n        this.setState({\n            ...this.state,\n            patient_id: this.props.psdss.patient_id,\n            clinical: this.props.psdss.clinical,\n            pci: this.props.psdss.pci,\n            histology: this.props.psdss.histology,\n            synchronous_liver_treatment: this.props.psdss.synchronous_liver_treatment,\n            timing: this.props.psdss.timing,\n            date_treatment: this.props.psdss.date_treatment,\n            treatment_type: this.props.psdss.treatment_type,\n            notes: this.props.psdss.notes,\n            total: this.props.psdss.total,\n        })\n    }\n\n    //Function to handle the changes in our inputs and selectors.\n    handleChange = (event) => {\n        this.setState ({\n            [event.target.name]: event.target.value,\n        }\n        , this.calculatePSDSS\n        )\n        console.log(this.state);\n    }\n\n    handleChangeCheckbox = (event) => {\n        this.setState({\n            ...this.state,\n            changesMade: true,\n            [event.target.name]: event.target.checked,\n        });\n    }\n\n    //function in charge of calculating PSDSS Score\n    calculatePSDSS = () => {\n        const clin = Number(this.state.clinical);\n        const pci = Number(this.state.pci);\n        const hist = Number(this.state.histology);\n        const calculatedNum = clin + pci + hist;\n            this.setState({\n                total: calculatedNum,\n            })\n    }\n    \n    //Function in charge of toggling switches from true to false and viceverse\n    toggleSwitch = (event) => {\n        this.setState ({\n            [event.target.name]: event.target.checked\n        })\n        console.log(this.state);\n    }\n\n    //Function to update or set a new row.\n    upsertEntriesInDB = () => {\n        this.props.dispatch({type: 'UPSERT_DATA_FOR_PSDSS', payload: {state: this.state, id: this.props.patient.patient.id}})\n    }\n\n    componentDidMount(){\n        this.setInitialState();\n    }\n\n    componentWillUnmount(){\n        this.upsertEntriesInDB();\n    }\n\n    render() {\n        const {classes} = this.props;\n        return(\n            <div>\n            <Grid\n            container\n            direction=\"row\"\n            justify=\"space-evenly\"\n            alignItems=\"flex-start\"\n            >\n            <Grid item xs={12} className={classes.gridItem}>\n                <Grid\n                container\n                direction=\"row\"\n                justify=\"flex-start\"\n                // alignItems=\"center\"\n                >\n                     <Grid item xs={12} className={classes.gridItem} align=\"left\">\n                            <h4>Peritonial Surface Disease Severity Scale</h4>\n                    </Grid>\n                    <Grid item xs={12} className={classes.gridItem}></Grid>\n                        <Grid item xs={1}>\n                        </Grid>\n                        <Grid item xs={2} className={classes.gridItem}>\n                            <TextField dense\n                            variant=\"outlined\"\n                            label=\"Clinical\"\n                            onChange={this.handleChange}\n                            name=\"clinical\"\n                            value={this.state.clinical}\n                            id=\"patientWeightInput\"\n                            className={classNames(classes.margin, classes.textField)}\n                            />\n                        </Grid>\n                        <Grid item xs={2}>\n                        </Grid>\n                        <Grid item xs={2} className={classes.gridItem}>\n                            <TextField dense\n                                variant=\"outlined\"\n                                label=\"PCI\"\n                                onChange={this.handleChange}\n                                name=\"pci\"\n                                value={this.state.pci}\n                                id=\"pci\"\n                                className={classNames(classes.margin, classes.textField)}\n                            />\n                        </Grid>\n                        <Grid item xs={2}>\n                        </Grid>\n                        <Grid item xs={2} className={classes.gridItem}>\n                            <TextField dense\n                                variant=\"outlined\"\n                                label=\"Histology Score\"\n                                onChange={this.handleChange}\n                                name=\"histology\"\n                                value={this.state.histology}\n                                id=\"histologyScore\"\n                                className={classNames(classes.margin, classes.textField)}\n                            />\n                        </Grid>\n                    <Grid item xs={12} className={classes.gridItem} align=\"center\">\n                            <Grid\n                            container\n                            direction=\"row\"\n                            justify=\"space-evenly\"\n                            alignItems=\"center\"\n                            >\n                                <Grid item xs={4} className={classes.headingElements} align=\"center\">\n                                    <Typography variant=\"h7\">\n                                        Clinical Evaluation<br />\n                                        Enter a value from 0 to 6\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={4} className={classes.headingElements} align=\"center\">\n                                    <Typography variant=\"h7\">\n                                        PCI (Peritonial Cancer Index)<br />\n                                        Enter a value from 1 to 7\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={4} className={classes.headingElements} align=\"center\">\n                                    <Typography variant=\"h7\">\n                                        Histology<br />\n                                        Enter a value from 1 to 9\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={12} className={classes.gridItem} align=\"center\">\n                                    <Divider />\n                                </Grid>\n                                <Grid item xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"overline\">\n                                        No Symptoms\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"overline\">\n                                        {\"<\"}  10\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"overline\">\n                                        Good/Moderate N0\n                                    </Typography>\n                                </Grid>\n                                <Grid itme xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"subheading\">\n                                        0\n                                    </Typography>\n                                </Grid>\n                                <Grid itme xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"subheading\">\n                                        1\n                                    </Typography>\n                                </Grid>\n                                <Grid itme xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"subheading\">\n                                        1\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={12} className={classes.gridItem} align=\"center\">\n                                    <Divider variant=\"fullWidth\"></Divider>\n                                </Grid>\n                                <Grid item xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"overline\">\n                                        Mild Symptoms\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"overline\">\n                                        10-20\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"overline\">\n                                        Moderate N1-2\n                                    </Typography>\n                                </Grid>\n                                <Grid itme xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"subheading\">\n                                        1\n                                    </Typography>\n                                </Grid>\n                                <Grid itme xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"subheading\">\n                                        3\n                                    </Typography>\n                                </Grid>\n                                <Grid itme xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"subheading\">\n                                        3\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={12} className={classes.gridItem} align=\"center\">\n                                    <Divider variant=\"fullWidth\"></Divider>\n                                </Grid>\n                                <Grid item xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"overline\">\n                                        Severe Symptoms\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"overline\">\n                                        {\">\"}  20\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"overline\">\n                                        Poor/Signet\n                                    </Typography>\n                                </Grid>\n                                <Grid itme xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"subheading\">\n                                        6\n                                    </Typography>\n                                </Grid>\n                                <Grid itme xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"subheading\">\n                                        7\n                                    </Typography>\n                                </Grid>\n                                <Grid itme xs={4} className={classes.gridItem} align=\"center\">\n                                    <Typography variant=\"subheading\">\n                                        9\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={12} className={classes.gridItem} align=\"center\">\n                                    <Divider variant=\"fullWidth\"></Divider>\n                                </Grid>\n\n                            </Grid>\n                            <Grid item xs={12} className={classes.gridItem}>\n                            <Typography variant=\"h5\" align=\"center\">PSDSS Score: {this.state.total}</Typography>\n                            </Grid>\n                            <Grid item xs={12} className={classes.gridItem}>\n                            <Typography variant=\"h7\" align=\"center\">2 to 3 (Stage I) - 4 to 7 (Stage II) - 8 to 10 (Stage III) - 11+ (Stage IV) </Typography>\n                            </Grid>\n\n\n                    </Grid>\n                 </Grid>\n                </Grid>\n            </Grid>\n            <h4>Additional Information</h4>\n                <PSDSSPageData psdssInfo={this.state} toggleSwitch={this.toggleSwitch} handleChangeCheckbox={this.handleChangeCheckbox}/>\n                <Button onClick={this.upsertEntriesInDB} className={classes.button}\n                        variant=\"contained\" color=\"primary\">\n                        Save\n                </Button>\n            </div>\n        )\n    }\n};\n\nconst mapStateToProps = reduxState => ({\n    timingTreamentOptions: reduxState.dropdownOptions.timingTreamentOptions,\n    treamentTypeOptions: reduxState.dropdownOptions.treamentTypeOptions,\n    psdss: reduxState.psdssReducer,\n    patient: reduxState.patientReducer,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(PSDSSPage))\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport GridItem from '@material-ui/core/Grid';\n\nconst styles = theme => ({\n    root: {\n      width: '100%',\n      flexGrow: 1,\n      marginTop: theme.spacing.unit * 3,\n        overflowX: 'auto',\n    },\n    heading: {\n      fontSize: theme.typography.pxToRem(15),\n      fontWeight: theme.typography.fontWeightRegular,\n      \n    },\n    table: {\n        minWidth: 700,\n      },\n    paper: {\n        padding: theme.spacing.unit * 2,\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n  });\n\n  \n\n  class ResectionDropdown extends Component {\n\n    render() {\n    const { classes } = this.props;\n    const myOptions = this.props.resections;\n\n    return (\n      <div className={classes.root}>\n      <Grid container spacing={12} >\n        <ExpansionPanel>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <GridItem item xs={10} >\n              <Typography className={classes.heading}><h3>Resection</h3></Typography>\n            </GridItem>\n            <GridItem item xs={2} >\n              <Typography className={classes.heading}>(click to expand/retract)</Typography>\n            </GridItem>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <FormGroup row>\n              <Grid container spacing={24} >\n              {myOptions.map((option, index) => (\n                <GridItem item xs={2} >\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                            key={index} \n                            name={option.stateName}\n                            checked={this.props.state[option.stateName]}\n                            onChange={this.props.handleChangeCheckbox}\n                            value={option.status}\n                            />\n                        }\n                        label={option.name}\n                    />  \n                </GridItem>\n              ))\n              }\n              </Grid>\n            </FormGroup>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n        </Grid>\n      </div>\n    )};\n  }\n  \n  ResectionDropdown.propTypes = {\n    classes: PropTypes.object.isRequired,\n  };\n\nconst mapStateToProps = reduxState => ({\n  resections: reduxState.dropdownOptions.resections,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(ResectionDropdown))","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport GridItem from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\n\nconst styles = theme => ({\n    root: {\n      width: '100%',\n      flexGrow: 1,\n      marginTop: theme.spacing.unit * 3,\n        overflowX: 'auto',\n    },\n    heading: {\n      fontSize: theme.typography.pxToRem(15),\n      fontWeight: theme.typography.fontWeightRegular,\n      \n    },\n    table: {\n        minWidth: 700,\n      },\n      paper: {\n        padding: theme.spacing.unit * 2,\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n  });\n\n  class AdditionalPageInfo extends Component {\n    state = {\n        labelWidth: 0,\n    }\n\n    componentDidMount() {\n        this.setState({\n            labelWidth: ReactDOM.findDOMNode(this.InputLabelRef).offsetWidth,\n        });\n    }\n\n    render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.root}>\n           <FormGroup row>\n                <Grid container spacing={24} >\n                    <GridItem item xs={4} >\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                name=\"anastomosis\"\n                                checked={this.props.state.anastomosis}\n                                onChange={this.props.handleChangeCheckbox}\n                                value={this.props.state.anastomosis}\n                                />\n                        }\n                        label=\"Anastomosis\"\n                        />\n                        <DialogContent >\n                                <TextField\n                                onChange={this.props.handleChange}\n                                value={this.props.state.AnastomosisNumber}\n                                name=\"AnastomosisNumber\"\n                                margin=\"dense\"\n                                id=\"AnastomosisNumber\"\n                                label=\"Anastomosis Number\"\n                                type=\"text\"\n                                variant=\"outlined\"\n                                />\n                            </DialogContent>\n                </GridItem>\n                <GridItem item xs={4} >\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                name=\"revisionStoma\"\n                                checked={this.props.state.revisionStoma}\n                                onChange={this.props.handleChangeCheckbox}\n                                value={this.props.state.status}\n                                />\n                        }\n                        label=\"Revision Stoma\"\n                        />\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                name=\"stomaPostHIPEC\"\n                                checked={this.props.state.stomaPostHIPEC}\n                                onChange={this.props.handleChangeCheckbox}\n                                value={this.props.state.status}\n                                />\n                        }\n                        label=\"Stoma Post-HIPEC\"\n                        />\n                        <DialogContent >\n                            <FormControl fullWidth={true} variant=\"outlined\" margin=\"dense\" className={classes.formControl}>\n                                    <InputLabel\n                                        htmlFor=\"stomaType\"\n                                        ref={ref => {\n                                            this.InputLabelRef = ref;\n                                          }}\n                                    >\n                                        Stoma Type\n                                    </InputLabel>\n                                <Select\n                                        value={this.props.state.stomaType}\n                                        onChange={this.props.handleChange}\n                                        input={\n                                        <OutlinedInput\n                                            name=\"stomaType\"\n                                            id=\"stomaType\"\n                                            labelWidth={this.state.labelWidth}\n                                        />\n                                        }\n                                    >\n                                        {this.props.stomaTypeOptions.map( option => {\n                                            return(\n                                                <MenuItem key={option.index} value={option.id}>{option.status}</MenuItem>\n                                            )\n                                            \n                                        })}\n                                    </Select>\n                                </FormControl>\n                            </DialogContent>   \n                </GridItem>\n                <GridItem item xs={4} >\n                        <DialogContent >\n                            <TextField\n                                onChange={this.props.handleChange}\n                                value={this.props.state.bloodLoss}\n                                name=\"bloodLoss\"\n                                margin=\"dense\"\n                                id=\"bloodLoss\"\n                                label=\"Bloodloss (ml)\"\n                                type=\"text\"\n                                variant=\"outlined\"\n                                />\n                        </DialogContent>\n                        <DialogContent >\n                            <TextField\n                                onChange={this.props.handleChange}\n                                value={this.props.state.bloodLossTime}\n                                name=\"bloodLossTime\"\n                                margin=\"dense\"\n                                id=\"bloodLossTime\"\n                                label=\"Bloodloss Time (min)\"\n                                type=\"text\"\n                                variant=\"outlined\"\n                                />\n                        </DialogContent>  \n                </GridItem>\n            </Grid>\n            </FormGroup>\n            <hr/>\n            <FormGroup row>\n                <Grid container spacing={24} >\n                    <GridItem item xs={4}>\n                        <DialogContent >\n                            <FormControl fullWidth={true} variant=\"outlined\" margin=\"dense\" className={classes.formControl}>\n                                    <InputLabel\n                                        htmlFor=\"hipecRegiment\"\n                                        ref={ref => {\n                                            this.InputLabelRef = ref;\n                                          }}\n                                    >\n                                        HIPEC Regiment\n                                    </InputLabel>\n                                <Select\n                                        value={this.props.state.hipecRegiment}\n                                        onChange={this.props.handleChange}\n                                        input={\n                                        <OutlinedInput\n                                            name=\"hipecRegiment\"\n                                            id=\"hipecRegiment\"\n                                            labelWidth={this.state.labelWidth}\n                                        />\n                                        }\n                                    >\n\n                                        {this.props.hipecRegimentOptions.map( option => {\n                                            return(\n                                                <MenuItem key={option.index} value={option.id}>{option.status}</MenuItem>\n                                            )\n                                            \n                                        })}\n                                        \n                                    </Select>\n                                </FormControl>\n                            </DialogContent>\n                            <DialogContent >\n                            <FormControl fullWidth={true} variant=\"outlined\" margin=\"dense\" className={classes.formControl}>\n                                    <InputLabel\n                                        htmlFor=\"duration\"\n                                        ref={ref => {\n                                            this.InputLabelRef = ref;\n                                          }}\n                                    >\n                                        Duration\n                                    </InputLabel>\n                                <Select\n                                        value={this.props.state.duration}\n                                        onChange={this.props.handleChange}\n                                        input={\n                                        <OutlinedInput\n                                            name=\"duration\"\n                                            id=\"duration\"\n                                            labelWidth={this.state.labelWidth}\n                                        />\n                                        }\n                                    >\n\n                                        {this.props.duration.map( option => {\n                                            return(\n                                                <MenuItem key={option.index} value={option.value}>{option.status}</MenuItem>\n                                            )\n                                            \n                                        })}\n                                        \n                                    </Select>\n                                </FormControl>\n                            </DialogContent>\n                        </GridItem>\n                        <GridItem item xs={4}>\n                            <DialogContent >\n                                <TextField\n                                    onChange={this.props.handleChange}\n                                    value={this.props.state.volume}\n                                    name=\"volume\"\n                                    margin=\"dense\"\n                                    id=\"volume\"\n                                    label=\"Volume\"\n                                    type=\"text\"\n                                    variant=\"outlined\"\n                                    />\n                        </DialogContent>\n                        <DialogContent >\n                            <TextField\n                                onChange={this.props.handleChange}\n                                value={this.props.state.concentration}\n                                name=\"concentration\"\n                                margin=\"dense\"\n                                id=\"concentration\"\n                                label=\"Concentration\"\n                                type=\"text\"\n                                variant=\"outlined\"\n                                />\n                        </DialogContent>\n                    </GridItem>\n                    <GridItem item xs={4}>\n                        <DialogContent >\n                            <FormControl fullWidth={true} variant=\"outlined\" margin=\"dense\" className={classes.formControl}>\n                                    <InputLabel\n                                        htmlFor=\"outlined-age-native-simple\"\n                                        ref={ref => {\n                                            this.InputLabelRef = ref;\n                                          }}\n                                    >\n                                        R-Score\n                                    </InputLabel>\n                                <Select\n                                        value={this.props.state.rScore}\n                                        onChange={this.props.handleChange}\n                                        input={\n                                        <OutlinedInput\n                                            name=\"rScore\"\n                                            id=\"rScore\"\n                                            labelWidth={this.state.labelWidth}\n                                        />\n                                        }\n                                    >\n\n                                        {this.props.rScoreOptions.map( option => {\n                                            return(\n                                                <MenuItem key={option.index} value={option.id}>{option.status}</MenuItem>\n                                            )\n                                            \n                                        })}\n                                    </Select>\n                                </FormControl>\n                        </DialogContent>   \n                    </GridItem>\n                </Grid>\n            </FormGroup>\n      </div>\n    )};\n  }\n  \n\n\n  AdditionalPageInfo.propTypes = {\n    classes: PropTypes.object.isRequired,\n  };\n\nconst mapStateToProps = reduxState => ({\n    stomaTypeOptions: reduxState.dropdownOptions.stomaTypeOptions,\n    hipecRegimentOptions: reduxState.dropdownOptions.hipecRegimentOptions,\n    rScoreOptions: reduxState.dropdownOptions.rScoreOptions,\n    duration: reduxState.dropdownOptions.duration,\n});\n\n\nexport default connect(mapStateToProps) (withStyles(styles)(AdditionalPageInfo))","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport ResectionDropdown from '../InterventionPage/ResectionDropdown';\nimport AdditionalPageInfo from '../InterventionPage/AdditionalPageInfo';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Grid from '@material-ui/core/Grid';\nimport GridItem from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport ReactDOM from 'react-dom';\n\nconst styles = theme => ({\n    root: {\n      width: '100%',\n      flexGrow: 1,\n      marginTop: theme.spacing.unit * 3,\n        overflowX: 'auto',\n    },\n    heading: {\n      fontSize: theme.typography.pxToRem(15),\n      fontWeight: theme.typography.fontWeightRegular,\n      \n    },\n    table: {\n        minWidth: 700,\n      },\n    paper: {\n        padding: theme.spacing.unit * 2,\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n  });\n\n  const lesionSizeScore = [\n    { option: 'LS 0 No Tumor Seen', score: 0 },\n    { option: 'LS 1 Tumor up to 0.5cm', score: 1 },\n    { option: 'LS 2 Tumor up to 5.0cm', score: 2 },\n    { option: 'LS 3 Tumor > 5.0cm or confluence', score: 3 },\n  ];\n\n\n  class InterventionPage extends Component {\n    state = {\n        changesMade: false,\n        central: 0,\n        rightUpper: 0,\n        Epigastrium: 0,\n        leftUpper:0,\n        leftFlank:0,\n        leftLower:0,\n        pelvisPCI:0,\n        rightLower:0,\n        rightFlank:0,\n        upperJejunum:0,\n        lowerJejunum:0,\n        upperIlium:0,\n        lowerIlium:0,\n        PCITotal:0,\n        surgeonOne: '',\n        surgeonTwo:'',\n        surgeonThree: '',\n        nrHipec: '',\n        hipecType:'',\n        reasonOC:'',\n        expanded1: true,\n        expanded2: false,\n        ///additionalPageInfo from here down\n        checked: '',\n        anastomosis: false ,\n        AnastomosisNumber:'', \n        revisionStoma: false,\n        stomaType:'',\n        bloodLoss:'',\n        volume: '',\n        hipecRegiment: '',\n        bloodLossTime: '',\n        concentration: '',\n        rScore: '',\n        duration: '',\n        stomaPostHIPEC: false, \n        StomaPostHIPECType: '',\n        ///ResectionDropdown from here down\n        interventionId: '',\n        ovaries: false,\n        uterus: false,\n        omentum:false,\n        rectum:false,\n        sigmoid:false,\n        left_colon:false,\n        transverse_colon:false,\n        right_colon:false,\n        ileocaecal: false,\n        appendix:false,\n        duodenum:false,\n        jejunum: false,\n        ileum:false,\n        gallbladder: false,\n        stomach: false,\n        spleen:false,\n        diagphram_l:false,\n        diagphram_r:false,\n        pancreas:false,\n        bladder:false,\n        urether:false,\n        lymphnodes:false,\n        left_peritoneum:false,\n        right_peritoneum:false,\n        peritoneum:false,\n        pelvis:false,\n        labelWidth: 0,\n    }\n\n    componentDidMount(){\n        {this.props.intervention !== undefined ? \n        (\n            this.setState({\n                changesMade: false,\n                central: this.props.intervention.pci_0,\n                rightUpper: this.props.intervention.pci_1,\n                Epigastrium: this.props.intervention.pci_2,\n                leftUpper: this.props.intervention.pci_3,\n                leftFlank: this.props.intervention.pci_4,\n                leftLower: this.props.intervention.pci_5,\n                pelvisPCI: this.props.intervention.pci_6,\n                rightLower: this.props.intervention.pci_7,\n                rightFlank: this.props.intervention.pci_8,\n                upperJejunum: this.props.intervention.pci_9,\n                lowerJejunum: this.props.intervention.pci_10,\n                upperIlium: this.props.intervention.pci_11,\n                lowerIlium: this.props.intervention.pci_12,\n                PCITotal: this.props.intervention.pci_score,\n                surgeonOne: this.props.intervention.surgeon_1,\n                surgeonTwo:this.props.intervention.surgeon_2,\n                surgeonThree: this.props.intervention.surgeon_3,\n                nrHipec: this.props.intervention.nrhipec,\n                hipecType: this.props.intervention.hipec_type,\n                reasonOC:this.props.intervention.reason_oc,\n                anastomosis: this.props.intervention.anastomosis ,\n                AnastomosisNumber: this.props.intervention.anastomosis_number , \n                revisionStoma: this.props.intervention.revision_stoma ,\n                stomaType: this.props.intervention.stoma_post_hipec_type ,\n                bloodLoss: this.props.intervention.bloodloss ,\n                volume: this.props.intervention.volume ,\n                hipecRegiment: this.props.intervention.hipec_regiment ,\n                bloodLossTime: this.props.intervention.time,\n                concentration: this.props.intervention.concentration,\n                rScore: this.props.intervention.r_score,\n                duration: this.props.intervention.duration,\n                stomaPostHIPEC: this.props.intervention.stoma_post_hipec, \n                ovaries: this.props.intervention.ovaries,\n                uterus: this.props.intervention.uterus,\n                omentum:this.props.intervention.omentum,\n                rectum:this.props.intervention.rectum ,\n                sigmoid:this.props.intervention.sigmoid,\n                left_colon:this.props.intervention.left_colon,\n                transverse_colon:this.props.intervention.transverse_colon,\n                right_colon:this.props.intervention.right_colon,\n                ileocaecal: this.props.intervention.ileocaecal,\n                appendix:this.props.intervention.appendix,\n                duodenum:this.props.intervention.duodenum,\n                jejunum: this.props.intervention.jejunum,\n                ileum:this.props.intervention.ileum,\n                gallbladder: this.props.intervention.gallbladder,\n                stomach: this.props.intervention.stomach,\n                spleen:this.props.intervention.spleen,\n                diagphram_l:this.props.intervention.diagphram_l,\n                diagphram_r:this.props.intervention.diagphram_r,\n                pancreas:this.props.intervention.pancreas,\n                bladder:this.props.intervention.bladder,\n                urether:this.props.intervention.urether,\n                lymphnodes:this.props.intervention.lymphnodes,\n                left_peritoneum:this.props.intervention.left_peritoneum,\n                right_peritoneum:this.props.intervention.right_peritoneum,\n                peritoneum:this.props.intervention.peritoneum,\n                pelvis:this.props.intervention.pelvis,\n                labelWidth: ReactDOM.findDOMNode(this.InputLabelRef).offsetWidth,\n              \n            })\n        ):(\n        this.setState({\n            changesMade: false,\n            central: 0,\n            rightUpper: 0,\n            Epigastrium: 0,\n            leftUpper:0,\n            leftFlank:0,\n            leftLower:0,\n            pelvisPCI:0,\n            rightLower:0,\n            rightFlank:0,\n            upperJejunum:0,\n            lowerJejunum:0,\n            upperIlium:0,\n            lowerIlium:0,\n            PCITotal:0,\n            surgeonOne: '',\n            surgeonTwo:'',\n            surgeonThree: '',\n            nrHipec: '',\n            hipecType:'',\n            reasonOC:'',\n            expanded1: true,\n            expanded2: false,\n            ///additionalPageInfo from here down\n            checked: '',\n            anastomosis: false ,\n            AnastomosisNumber:'', \n            revisionStoma: false,\n            stomaType:'',\n            bloodLoss:'',\n            volume: '',\n            hipecRegiment: '',\n            bloodLossTime: '',\n            concentration: '',\n            rScore: '',\n            duration: '',\n            stomaPostHIPEC: false, \n            StomaPostHIPECType: '',\n            ///ResectionDropdown from here down\n            interventionId: '',\n            ovaries: false,\n            uterus: false,\n            omentum:false,\n            rectum:false,\n            sigmoid:false,\n            left_colon:false,\n            transverse_colon:false,\n            right_colon:false,\n            ileocaecal: false,\n            appendix:false,\n            duodenum:false,\n            jejunum: false,\n            ileum:false,\n            gallbladder: false,\n            stomach: false,\n            spleen:false,\n            diagphram_l:false,\n            diagphram_r:false,\n            pancreas:false,\n            bladder:false,\n            urether:false,\n            lymphnodes:false,\n            left_peritoneum:false,\n            right_peritoneum:false,\n            peritoneum:false,\n            pelvis:false,   \n            labelWidth: ReactDOM.findDOMNode(this.InputLabelRef).offsetWidth,\n            })\n        )}\n    }\n\n    calculatePCI = () => {\n        let PCI;\n        let PCI1 = Number(this.state.central);\n        let PCI2 = Number(this.state.rightUpper);\n        let PCI3 = Number(this.state.Epigastrium);\n        let PCI4 = Number(this.state.leftUpper);\n        let PCI5 = Number(this.state.leftFlank);\n        let PCI6 = Number(this.state.leftLower);\n        let PCI7 = Number(this.state.pelvisPCI);\n        let PCI8 = Number(this.state.rightLower);\n        let PCI9 = Number(this.state.rightFlank);\n        let PCI10 = Number(this.state.upperJejunum);\n        let PCI11 = Number(this.state.lowerJejunum);\n        let PCI12 = Number(this.state.upperIlium);\n        let PCI13 = Number(this.state.lowerIlium);\n        PCI = PCI1 + PCI2 + PCI3 + PCI4 + PCI5 + PCI6 + PCI7 + PCI8 + PCI9 + PCI10 + PCI11 + PCI12 + PCI13\n\n        this.setState({\n            changesMade: true,\n            PCITotal: PCI\n        })\n    }\n\n    handlePCIChange = (event) => {\n        this.setState({\n            ...this.state,\n            changesMade: true,\n            [event.target.name]: event.target.value,\n        },\n        this.calculatePCI);\n      }\n\n    handleChange = (event) => {\n        this.setState({\n            ...this.state,\n            changesMade: true,\n            [event.target.name]: event.target.value,\n        })\n      }\n\n    expansionPanel1 = () => {\n        this.setState({\n            expanded1: true\n        })\n    }\n\n    expansionPanel2 = () => {\n        this.setState({\n            expanded2: !true\n        })\n    }\n\n    saveForm = () => {\n        if (this.state.changesMade){ \n        confirmAlert({\n          title: 'Save Intervention Form',\n          message: 'Do you want to save Intervention Form?',\n          buttons: [\n            {\n              label: 'Yes',\n              onClick: () => this.props.dispatch({ type: 'POST_INTERVENTION_PAGE', \n              payload: {\n                  interventionState: this.state,\n                  userId: this.props.patient.patient.id\n              }\n               })\n            },\n            {\n              label: 'No',\n              onClick: () => alert('Form not submitted')\n            }\n          ]\n        })\n        }\n        this.setState({\n            changesMade: false,\n        })\n    }\n    \n    handleChangeCheckbox = (event) => {\n        this.setState({\n            ...this.state,\n            changesMade: true,\n            [event.target.name]: event.target.checked,\n        });\n      }\n\n    componentWillUnmount () {\n        this.saveForm();\n    }\n\n    render() {\n    const { classes } = this.props;\n    return (\n        \n      <div className={classes.root}>\n        <Grid container spacing={12} >\n            <ExpansionPanel defaultExpanded onClick={this.expansionPanel1} >\n            \n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                <GridItem item xs={5} >\n                    <Typography className={classes.heading}><h4>Peritoneal Cancer Index (PCI)</h4></Typography>\n                </GridItem>\n                <GridItem item xs={5} >\n                    <Typography className={classes.heading}><h1>PCI: {this.state.PCITotal}</h1></Typography>\n                </GridItem>\n                <GridItem item xs={2} >\n                    <Typography className={classes.heading}>(click to expand/retract)</Typography>\n                </GridItem>\n            </ExpansionPanelSummary>\n            \n            <ExpansionPanelDetails>\n                <Grid container spacing={24} >\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Region Number</TableCell>\n                                    <TableCell>Region Name</TableCell>\n                                    <TableCell>Lesion Size/Score</TableCell>\n                                </TableRow>\n                            </TableHead>\n                                <TableBody>\n                                        <TableRow >\n                                            <TableCell>\n                                                0\n                                            </TableCell>\n                                            <TableCell>\n                                                Central\n                                            </TableCell>\n                                            <TableCell>\n                                                <Select \n                                                    fullWidth={true}\n                                                    value={this.state.central}\n                                                    onChange={this.handlePCIChange}\n                                                    input={\n                                                    <OutlinedInput\n                                                        value={this.state.central}\n                                                        name=\"central\"\n                                                        id=\"central\"\n                                                    />\n                                                    }\n                                                >\n                                                    {lesionSizeScore.map( score => {\n                                                        return(\n                                                            <MenuItem key={score.index} value={score.score} >{score.option}</MenuItem>\n                                                        )\n                                                    })}\n                                                    \n                                                </Select>\n                                            </TableCell>\n                                        </TableRow>\n                                        <TableRow >\n                                            <TableCell>\n                                                1\n                                            </TableCell>\n                                            <TableCell>\n                                            Right Upper\n                                            </TableCell>\n                                            <TableCell>\n                                                <Select \n                                                    fullWidth={true}\n                                                    value={this.state.rightUpper}\n                                                    onChange={this.handlePCIChange}\n                                                    input={\n                                                    <OutlinedInput\n                                                        value={this.state.rightUpper}\n                                                        name=\"rightUpper\"\n                                                        id=\"rightUpper\"\n                                                    />\n                                                    }\n                                                >\n                                                    {lesionSizeScore.map( score => {\n                                                        return(\n                                                            <MenuItem key={score.index} value={score.score} >{score.option}</MenuItem>\n                                                        )\n                                                    })}\n                                                    \n                                                </Select>\n                                            </TableCell>\n                                        </TableRow>\n                                        <TableRow >\n                                            <TableCell>\n                                                2\n                                            </TableCell>\n                                            <TableCell>\n                                            Epigastrium\n                                            </TableCell>\n                                            <TableCell>\n                                                <Select \n                                                    fullWidth={true}\n                                                    value={this.state.Epigastrium}\n                                                    onChange={this.handlePCIChange}\n                                                    input={\n                                                    <OutlinedInput\n                                                        value={this.state.Epigastrium}\n                                                        name=\"Epigastrium\"\n                                                        id=\"Epigastrium\"\n                                                    />\n                                                    }\n                                                >\n                                                    {lesionSizeScore.map( score => {\n                                                        return(\n                                                            <MenuItem key={score.index} value={score.score} >{score.option}</MenuItem>\n                                                        )\n                                                    })}\n                                                    \n                                                </Select>\n                                            </TableCell>\n                                        </TableRow>\n                                        <TableRow >\n                                            <TableCell>\n                                                3\n                                            </TableCell>\n                                            <TableCell>\n                                            Left Upper\n                                            </TableCell>\n                                            <TableCell>\n                                                <Select \n                                                    fullWidth={true}\n                                                    value={this.state.leftUpper}\n                                                    onChange={this.handlePCIChange}\n                                                    input={\n                                                    <OutlinedInput\n                                                        value={this.state.leftUpper}\n                                                        name=\"leftUpper\"\n                                                        id=\"leftUpper\"\n                                                    />\n                                                    }\n                                                >\n                                                    {lesionSizeScore.map( score => {\n                                                        return(\n                                                            <MenuItem key={score.index} value={score.score} >{score.option}</MenuItem>\n                                                        )\n                                                    })}\n                                                    \n                                                </Select>\n                                            </TableCell>\n                                        </TableRow>\n                                        <TableRow >\n                                            <TableCell>\n                                                4\n                                            </TableCell>\n                                            <TableCell>\n                                            Left Flank\n                                            </TableCell>\n                                            <TableCell>\n                                                <Select \n                                                    fullWidth={true}\n                                                    value={this.state.leftFlank}\n                                                    onChange={this.handlePCIChange}\n                                                    input={\n                                                    <OutlinedInput\n                                                        value={this.state.leftFlank}\n                                                        name=\"leftFlank\"\n                                                        id=\"leftFlank\"\n                                                    />\n                                                    }\n                                                >\n                                                    {lesionSizeScore.map( score => {\n                                                        return(\n                                                            <MenuItem key={score.index} value={score.score} >{score.option}</MenuItem>\n                                                        )\n                                                    })}\n                                                    \n                                                </Select>\n                                            </TableCell>\n                                        </TableRow>\n                                        <TableRow >\n                                            <TableCell>\n                                                5\n                                            </TableCell>\n                                            <TableCell>\n                                            Left Lower\n                                            </TableCell>\n                                            <TableCell>\n                                                <Select \n                                                    fullWidth={true}\n                                                    value={this.state.leftLower}\n                                                    onChange={this.handlePCIChange}\n                                                    input={\n                                                    <OutlinedInput\n                                                        value={this.state.leftLower}\n                                                        name=\"leftLower\"\n                                                        id=\"leftLower\"\n                                                    />\n                                                    }\n                                                >\n                                                    {lesionSizeScore.map( score => {\n                                                        return(\n                                                            <MenuItem key={score.index} value={score.score} >{score.option}</MenuItem>\n                                                        )\n                                                    })}\n                                                </Select>\n                                            </TableCell>\n                                        </TableRow>\n                                        <TableRow >\n                                            <TableCell>\n                                                6\n                                            </TableCell>\n                                            <TableCell>\n                                            Pelvis\n                                            </TableCell>\n                                            <TableCell>\n                                                <Select \n                                                    fullWidth={true}\n                                                    value={this.state.pelvisPCI}\n                                                    onChange={this.handlePCIChange}\n                                                    input={\n                                                    <OutlinedInput\n                                                        value={this.state.pelvisPCI}\n                                                        name=\"pelvisPCI\"\n                                                        id=\"pelvisPCI\"\n                                                    />\n                                                    }\n                                                >\n                                                    {lesionSizeScore.map( score => {\n                                                        return(\n                                                            <MenuItem key={score.index} value={score.score} >{score.option}</MenuItem>\n                                                        )\n                                                    })}\n                                                    \n                                                </Select>\n                                            </TableCell>\n                                        </TableRow>\n                                        <TableRow >\n                                            <TableCell>\n                                                7\n                                            </TableCell>\n                                            <TableCell>\n                                            Right Lower\n                                            </TableCell>\n                                            <TableCell>\n                                                <Select \n                                                    fullWidth={true}\n                                                    value={this.state.rightLower}\n                                                    onChange={this.handlePCIChange}\n                                                    input={\n                                                    <OutlinedInput\n                                                        value={this.state.rightLower}\n                                                        name=\"rightLower\"\n                                                        id=\"rightLower\"\n                                                    />\n                                                    }\n                                                >\n                                                    {lesionSizeScore.map( score => {\n                                                        return(\n                                                            <MenuItem key={score.index} value={score.score} >{score.option}</MenuItem>\n                                                        )\n                                                    })}\n                                                    \n                                                </Select>\n                                            </TableCell>\n                                        </TableRow>\n                                        <TableRow >\n                                            <TableCell>\n                                                8\n                                            </TableCell>\n                                            <TableCell>\n                                            Right Flank\n                                            </TableCell>\n                                            <TableCell>\n                                                <Select \n                                                    fullWidth={true}\n                                                    value={this.state.rightFlank}\n                                                    onChange={this.handlePCIChange}\n                                                    input={\n                                                    <OutlinedInput\n                                                        value={this.state.rightFlank}\n                                                        name=\"rightFlank\"\n                                                        id=\"rightFlank\"\n                                                    />\n                                                    }\n                                                >\n                                                    {lesionSizeScore.map( score => {\n                                                        return(\n                                                            <MenuItem key={score.index} value={score.score} >{score.option}</MenuItem>\n                                                        )\n                                                    })}\n                                                    \n                                                </Select>\n                                            </TableCell>\n                                        </TableRow>\n                                        <TableRow >\n                                            <TableCell>\n                                                9\n                                            </TableCell>\n                                            <TableCell>\n                                            Upper Jejunum\n                                            </TableCell>\n                                            <TableCell>\n                                                <Select \n                                                    fullWidth={true}\n                                                    value={this.state.upperJejunum}\n                                                    onChange={this.handlePCIChange}\n                                                    input={\n                                                    <OutlinedInput\n                                                        value={this.state.upperJejunum}\n                                                        name=\"upperJejunum\"\n                                                        id=\"upperJejunum\"\n                                                    />\n                                                    }\n                                                >\n                                                    {lesionSizeScore.map( score => {\n                                                        return(\n                                                            <MenuItem key={score.index} value={score.score} >{score.option}</MenuItem>\n                                                        )\n                                                    })}\n                                                    \n                                                </Select>\n                                            </TableCell>\n                                        </TableRow>\n                                        <TableRow >\n                                            <TableCell>\n                                                10\n                                            </TableCell>\n                                            <TableCell>\n                                            Lower Jejunum\n                                            </TableCell>\n                                            <TableCell>\n                                                <Select \n                                                    fullWidth={true}\n                                                    value={this.state.lowerJejunum}\n                                                    onChange={this.handlePCIChange}\n                                                    input={\n                                                    <OutlinedInput\n                                                        value={this.state.lowerJejunum}\n                                                        name=\"lowerJejunum\"\n                                                        id=\"lowerJejunum\"\n                                                    />\n                                                    }\n                                                >\n                                                    {lesionSizeScore.map( score => {\n                                                        return(\n                                                            <MenuItem key={score.index} value={score.score} >{score.option}</MenuItem>\n                                                        )\n                                                    })}\n                                                    \n                                                </Select>\n                                            </TableCell>\n                                        </TableRow>\n                                        <TableRow >\n                                            <TableCell>\n                                                11\n                                            </TableCell>\n                                            <TableCell>\n                                            Upper Ilium\n                                            </TableCell>\n                                            <TableCell>\n                                                <Select \n                                                    fullWidth={true}\n                                                    value={this.state.upperIlium}\n                                                    onChange={this.handlePCIChange}\n                                                    input={\n                                                    <OutlinedInput\n                                                        value={this.state.upperIlium}\n                                                        name=\"upperIlium\"\n                                                        id=\"upperIlium\"\n                                                    />\n                                                    }\n                                                >\n                                                    {lesionSizeScore.map( score => {\n                                                        return(\n                                                            <MenuItem key={score.index} value={score.score} >{score.option}</MenuItem>\n                                                        )\n                                                    })}\n                                                    \n                                                </Select>\n                                            </TableCell>\n                                        </TableRow>\n                                        <TableRow >\n                                            <TableCell>\n                                                12\n                                            </TableCell>\n                                            <TableCell>\n                                            Lower Ilium\n                                            </TableCell>\n                                            <TableCell>\n                                                <Select \n                                                    fullWidth={true}\n                                                    value={this.state.lowerIlium}\n                                                    onChange={this.handlePCIChange}\n                                                    input={\n                                                    <OutlinedInput\n                                                        value={this.state.lowerIlium}\n                                                        name=\"lowerIlium\"\n                                                        id=\"lowerIlium\"\n                                                    />\n                                                    }\n                                                >\n                                                    {lesionSizeScore.map( score => {\n                                                        return(\n                                                            <MenuItem key={score.index} value={score.score} >{score.option}</MenuItem>\n                                                        )\n                                                    })}\n                                                    \n                                                </Select>\n                                        </TableCell>\n                                    </TableRow>\n                            </TableBody>\n                        </Table>\n                </Grid>\n                <Grid  container spacing={24}>\n                        <img alt=\"bodyImage\" height=\"650\" width=\"750\" src=\"images/bodyImage.png\"/>\n                        <GridItem item xs={4} sm={4}>\n                                <DialogContent >\n                                    <TextField\n                                    onChange={this.handleChange}\n                                    value={this.state.surgeonOne}\n                                    name=\"surgeonOne\"\n                                    margin=\"dense\"\n                                    id=\"surgeonOne\"\n                                    label=\"Surgeon 1\"\n                                    type=\"text\"\n                                    variant=\"outlined\"\n                                    />\n                                </DialogContent>\n                        </GridItem>\n                        <GridItem item xs={4} sm={4}>\n                                <DialogContent >\n                                    <TextField\n                                    onChange={this.handleChange}\n                                    value={this.state.surgeonTwo}\n                                    name=\"surgeonTwo\"\n                                    margin=\"dense\"\n                                    id=\"surgeonTwo\"\n                                    label=\"Surgeon 2\"\n                                    type=\"text\"\n                                    variant=\"outlined\"\n                                    />\n                                </DialogContent>\n                        </GridItem>\n                        <GridItem item xs={4} sm={4}>\n                                <DialogContent >\n                                    <TextField\n                                    onChange={this.handleChange}\n                                    value={this.state.surgeonThree}\n                                    name=\"surgeonThree\"\n                                    margin=\"dense\"\n                                    id=\"surgeonThree\"\n                                    label=\"Surgeon 3\"\n                                    type=\"text\"\n                                    variant=\"outlined\"\n                                    />\n                                </DialogContent>\n                        </GridItem>\n                        <GridItem item xs={4} sm={4}>\n                                <DialogContent >\n                                    <TextField\n                                    onChange={this.handleChange}\n                                    value={this.state.nrHipec}\n                                    name=\"nrHipec\"\n                                    margin=\"dense\"\n                                    id=\"nrHipec\"\n                                    label=\"Nr HIPEC\"\n                                    type=\"text\"\n                                    variant=\"outlined\"\n                                    />\n                                </DialogContent>\n                        </GridItem>\n                        <GridItem item xs={4} sm={4}>\n                            <DialogContent >\n                                <FormControl fullWidth={true} variant=\"outlined\" margin=\"dense\" className={classes.formControl}>\n                                        <InputLabel\n                                            htmlFor=\"hipecType\"\n                                            ref={ref => {\n                                                this.InputLabelRef = ref;\n                                              }}\n                                        >\n                                            HIPEC Type\n                                        </InputLabel>\n                                        <Select\n                                            value={this.state.hipecType}\n                                            onChange={this.handleChange}\n                                            input={\n                                            <OutlinedInput\n                                                value={this.state.hipecType}\n                                                name=\"hipecType\"\n                                                id=\"hipecType\"\n                                                labelWidth={this.state.labelWidth}\n                                            />\n                                            }\n                                        >\n                                            {this.props.hipecTypeOptions.map( option => {\n                                                return(\n                                                    <MenuItem key={option.index} value={option.id}>{option.status}</MenuItem>\n                                                )\n                                                \n                                            })}\n                                            \n                                        </Select>\n                                    </FormControl>\n                                </DialogContent>\n                        </GridItem>\n                        <GridItem item xs={4} sm={4}>\n                                <DialogContent >\n                                    <FormControl fullWidth={true} variant=\"outlined\" margin=\"dense\" className={classes.formControl}>\n                                        <InputLabel\n                                            htmlFor=\"reasonOC\"\n                                            ref={ref => {\n                                                this.InputLabelRef = ref;\n                                              }}\n                                        >\n                                            Reason O/C\n                                        </InputLabel>\n                                        <Select\n                                            value={this.state.reasonOC}\n                                            onChange={this.handleChange}\n                                            input={\n                                            <OutlinedInput\n                                                name=\"reasonOC\"\n                                                fullWidth\n                                                id=\"reasonOC\"\n                                                labelWidth={this.state.labelWidth}\n                                            />\n                                            }\n                                        >\n                                        {this.props.reasonOpenCloseOption.map( option => {\n                                                return(\n                                                    <MenuItem key={option.index} value={option.id}>{option.status}</MenuItem>\n                                                )\n                                                \n                                            })}\n                                        </Select>\n                                    </FormControl>\n                                </DialogContent>\n                        </GridItem>\n                    </Grid>                    \n            </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </Grid> \n\n        <ResectionDropdown state={this.state} handleChange={this.handleChange} expansionPanel2={this.expansionPanel2} handleChangeCheckbox={this.handleChangeCheckbox}/>\n        <AdditionalPageInfo state={this.state} handleChange={this.handleChange} handleChangeCheckbox={this.handleChangeCheckbox}/>\n        <Button variant=\"contained\" color=\"primary\" onClick={this.saveForm}>Save</Button>\n      </div>\n    )};\n  }\n\n  InterventionPage.propTypes = {\n    classes: PropTypes.object.isRequired,\n  };\n\nconst mapStateToProps = reduxState => ({\n    intervention: reduxState.pciReducer[0],\n    patient: reduxState.patientReducer,\n    hipecTypeOptions: reduxState.dropdownOptions.hipecTypeOptions,\n    reasonOpenCloseOption: reduxState.dropdownOptions.reasonOpenCloseOption,\n});\n\n\nexport default connect(mapStateToProps) (withStyles(styles)(InterventionPage))","import React from 'react'\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport moment from 'moment';\n\nconst styles = theme => ({\n    root: {\n      width: '100%',\n      marginTop: theme.spacing.unit * 3,\n    },\n    table: {\n      minWidth: 1020,\n    },\n    tableWrapper: {\n      overflowX: 'auto',\n    },\n  });\n\nclass PathologyNotesHistory extends React.Component {\n\n    componentDidMount(){\n        this.props.dispatch({ type: 'GET_PATHOLOGY_HISTORY', payload: this.props.patientReducer.patient.id })\n        this.setState ({ pathologyNotes: '',})\n      }\n\n\n  render() {\n    const { classes } = this.props;\n    return (\n        <div className={classes.root}>\n        <Table className={classes.table}>\n            <TableHead>\n                <TableRow>\n                    <TableCell>Created By</TableCell>\n                    <TableCell>Pathology Notes</TableCell>\n                    <TableCell>Note Completion Date</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {this.props.pathologyHistoryReducer.map( note => {\n                    return(\n                    <TableRow>\n                        <TableCell>{note.title} {note.last_name}, {note.first_name}</TableCell>\n                        <TableCell>{note.pathology_report}</TableCell>\n                        <TableCell>{moment(note.date_completed).format('LLLL')}</TableCell>\n                    </TableRow>\n                    )}\n                )} \n            </TableBody>\n        </Table> \n    </div> \n        )      \n    }\n}\n\nconst mapStateToProps = reduxState => ({\n    pathologyHistoryReducer: reduxState.pathologyHistoryReducer,\n    patientReducer: reduxState.patientReducer,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(PathologyNotesHistory))\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport GridItem from '@material-ui/core/Grid';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport PathologyNotesHistory from './PathologyNotesHistory';\n\nconst styles = theme => ({\n    root: {\n      width: '100%',\n      flexGrow: 1,\n      marginTop: theme.spacing.unit * 3,\n        overflowX: 'auto',\n    },\n    heading: {\n      fontSize: theme.typography.pxToRem(15),\n      fontWeight: theme.typography.fontWeightRegular,\n      \n    },\n    table: {\n        minWidth: 700,\n      },\n      paper: {\n        padding: theme.spacing.unit * 2,\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n  });\n\n\nclass PathologyNotesPage extends Component {\n\n    state = {\n        changesMade: false,\n        pathologyNotes: '',\n        userId: '',\n        title: '',\n        firstName: '',\n        lastName: '',\n    }\n\n    handleChange = (event) => {\n        this.setState ({\n            changesMade: true,\n            [event.target.name]: event.target.value,\n        })\n    }\n\n    savePathologyNotes = () => {\n        if (this.state.changesMade){ \n        this.props.dispatch({ type: 'UPDATE_PATHOLOGY_NOTE', \n        payload: {\n            pathologyNotes: this.state.pathologyNotes,\n            userId: this.props.patientReducer.patient.id,\n            title: this.props.user.title,\n            firstName: this.props.user.first_name,\n            lastName: this.props.user.last_name,\n        }\n         })\n         this.setState ({\n            changesMade: false,\n            pathologyNotes: '',\n        })\n        }\n    }\n\n    componentWillUnmount () {\n        this.savePathologyNotes();\n    }\n    \n\n    render() {\n        return(\n            <div>\n                <h4>Pathology Notes </h4>\n                <Grid container spacing={24} >\n                    <GridItem item xs={12}>\n                            <DialogContent >\n                                <TextField\n                                    onChange={this.handleChange}\n                                    value={this.state.pathologyNotes}\n                                    name=\"pathologyNotes\"\n                                    margin=\"dense\"\n                                    id=\"pathologyNotes\"\n                                    label=\"Notes\"\n                                    type=\"text\"\n                                    fullWidth={true}\n                                    multiline\n                                    rows=\"10\"\n                                    variant=\"outlined\"\n                                    />\n                            </DialogContent>    \n                    </GridItem>\n                </Grid>\n                <Button variant=\"contained\" color=\"primary\" onClick={this.savePathologyNotes}>Save</Button>\n                <br/>\n                <PathologyNotesHistory pathState={this.state}/>\n            </div>\n        )\n    }\n};\n\nPathologyNotesPage.propTypes = {\n    classes: PropTypes.object.isRequired,\n  };\n\nconst mapStateToProps = reduxState => ({\n    patientReducer: reduxState.patientReducer,\n    user: reduxState.user,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(PathologyNotesPage))\n","import React from 'react'\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport moment from 'moment';\n\nconst styles = theme => ({\n    root: {\n      width: '100%',\n      marginTop: theme.spacing.unit * 3,\n    },\n    table: {\n      minWidth: 1020,\n    },\n    tableWrapper: {\n      overflowX: 'auto',\n    },\n  });\n\n  \n\nclass OperativeNotesHistory extends React.Component {\n\n    componentDidMount(){\n        this.props.dispatch({ type: 'GET_OPERATIVE_HISTORY', payload: this.props.patientReducer.patient.id })\n      }\n\n\n  render() {\n    const { classes } = this.props;\n    return (\n        <div className={classes.root}>\n        <Table className={classes.table}>\n            <TableHead>\n                <TableRow>\n                    <TableCell>Created By</TableCell>\n                    <TableCell>Operative Notes</TableCell>\n                    <TableCell>Note Completion Date</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {this.props.operativeHistoryReducer.map( note => {\n                    return(\n                    <TableRow>\n                        <TableCell>{note.title} {note.last_name}, {note.first_name}</TableCell>\n                        <TableCell>{note.operative_notes}</TableCell>\n                        <TableCell>{moment(note.date_completed).format('LLLL')}</TableCell>\n                    </TableRow>\n                    )}\n                )} \n            </TableBody>\n        </Table> \n    </div> \n        )      \n    }\n}\n\n\nconst mapStateToProps = reduxState => ({\n    patientReducer: reduxState.patientReducer,\n    operativeHistoryReducer: reduxState.operativeHistoryReducer,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(OperativeNotesHistory))\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport GridItem from '@material-ui/core/Grid';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport OperativeNotesHistory from './OperativeNotesHistory';\n\nconst styles = theme => ({\n    root: {\n      width: '100%',\n      flexGrow: 1,\n      marginTop: theme.spacing.unit * 3,\n        overflowX: 'auto',\n    },\n    heading: {\n      fontSize: theme.typography.pxToRem(15),\n      fontWeight: theme.typography.fontWeightRegular,\n      \n    },\n    table: {\n        minWidth: 700,\n      },\n      paper: {\n        padding: theme.spacing.unit * 2,\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n  });\n\n\nclass OperativeNotesPage extends Component {\n    state = {\n        changesMade: false,\n        operativeNotes: '',\n        userId: '',\n        title: '',\n        firstName: '',\n        lastName: '',\n    }\n\n    handleChange = (event) => {\n        this.setState ({\n            changesMade: true,\n            [event.target.name]: event.target.value,\n        })\n    }\n\n    saveOperativeNotes = () => {\n        if (this.state.changesMade){ \n        this.props.dispatch({ type: 'UPDATE_OPERATIVE_NOTE', \n        payload: {\n            operativeNotes: this.state.operativeNotes,\n            userId: this.props.patientReducer.patient.id,\n            title: this.props.user.title,\n            firstName: this.props.user.first_name,\n            lastName: this.props.user.last_name,\n        }\n         })\n         this.setState ({\n            changesMade: false,\n            operativeNotes: '',\n        })\n        }\n    }\n\n    componentWillUnmount () {\n        this.saveOperativeNotes();\n    }\n\n    render() {\n        return(\n            <div>\n                <h4>Operative Notes </h4>\n                <Grid container spacing={24} >\n                    <GridItem item xs={12}>\n                            <DialogContent >\n                                <TextField\n                                    onChange={this.handleChange}\n                                    value={this.state.operativeNotes}\n                                    name=\"operativeNotes\"\n                                    margin=\"dense\"\n                                    id=\"operativeNotes\"\n                                    label=\"Notes\"\n                                    type=\"text\"\n                                    fullWidth={true}\n                                    multiline\n                                    rows=\"10\"\n                                    variant=\"outlined\"\n                                    />\n                            </DialogContent> \n                    </GridItem>\n                </Grid> \n                <Button variant=\"contained\" color=\"primary\" onClick={this.saveOperativeNotes}>Save</Button>\n            <OperativeNotesHistory/>\n            </div>\n        )\n    }\n};\n\nOperativeNotesPage.propTypes = {\n    classes: PropTypes.object.isRequired,\n  };\n\nconst mapStateToProps = reduxState => ({\n    patientReducer: reduxState.patientReducer,\n    user: reduxState.user,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(OperativeNotesPage))\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport ReactDOM from 'react-dom';\n\nconst myOptions = [\n  {id: 1, val: true, status: 'Yes'},\n  {id: 2, val: false, status: 'No'},\n  {id: 3, val: null, status: 'Unknown'}\n]\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit,\n  },\n});\n\nclass ReoperationSelector extends Component {\n\n  state = {\n    labelWidth: 0,\n    reoperation: null,\n}\n\ncomponentDidMount() {\n    this.setState({\n        labelWidth: ReactDOM.findDOMNode(this.InputLabelRef).offsetWidth,\n    });\n}\n\n  renderOptions() {\n    // \n    return myOptions.map((option, i) => {\n      return (\n        <MenuItem\n          key={i}\n          value={option.val}>\n          {option.status}\n        </MenuItem>\n      ); // end return\n    }); // end map\n  } // end renderOptions\n\n  render(){\n    const { classes } = this.props;\n\n    return (\n      <FormControl fullWidth={true} variant=\"outlined\" margin=\"dense\" className={classes.formControl}>\n          <InputLabel  \n          ref={ref => {\n            this.InputLabelRef = ref;\n          }}\n          shrink htmlFor=\"reoperation\">Reoperation</InputLabel>\n          <Select \n             \n            name=\"reoperation\"\n            value={this.props.reoperation}\n            input={\n              <OutlinedInput\n                  value={this.props.reoperation}\n                  name=\"reoperation\"\n                  id=\"reoperation\"\n                  labelWidth={this.state.labelWidth}\n              />\n              }\n            onChange={this.props.handleChange}\n          >\n            {this.renderOptions()}\n          </Select> \n      </FormControl>\n    )\n  } // end return\n} // end class TagSelector\n\nexport default connect()(withStyles(styles)(ReoperationSelector));","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport ReactDOM from 'react-dom';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\n\nconst myOptions = [\n  {id: 1, val: true, status: 'Yes'},\n  {id: 2, val: false, status: 'No'},\n  {id: 3, val: null, status: 'Unknown'}\n]\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit,\n  },\n});\n\nclass MortalitySelector extends Component {\n\n  state = {\n    labelWidth: 0,\n}\n\ncomponentDidMount() {\n    this.setState({\n        labelWidth: ReactDOM.findDOMNode(this.InputLabelRef).offsetWidth,\n    });\n}\n\n  renderOptions() {\n    // \n    return myOptions.map((option, i) => {\n      return (\n        <MenuItem\n          \n          key={i}\n          value={option.val}>\n          {option.status}\n        </MenuItem>\n      ); // end return\n    }); // end map\n  } // end renderTagOptions\n\n  render(){\n    const { classes } = this.props;\n\n    return (\n      <FormControl fullWidth={true} variant=\"outlined\" margin=\"dense\" className={classes.formControl}>\n          <InputLabel \n                ref={ref => {\n                    this.InputLabelRef = ref;\n                  }} \n                  shrink htmlFor=\"hospital_mortality\">Hospital Mortality</InputLabel>\n          <Select fullWidth={true}\n            variant=\"outlined\" \n            value={this.props.hospital_mortality}\n            \n            input={\n              <OutlinedInput\n                  value={this.props.hospital_mortality}\n                  name=\"hospital_mortality\"\n                  id=\"hospital_mortality\"\n                  labelWidth={this.state.labelWidth}\n              />\n              }\n            onChange={this.props.handleChange}\n          >\n            {this.renderOptions()}\n          </Select> \n      </FormControl>\n    )\n  } // end return\n} // end class TagSelector\n\nexport default (withStyles(styles)(MortalitySelector));","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\n\nconst myOptions = [\n  {id: 1, status: 'Death of Disease'},\n  {id: 2, status: 'Alive with Disease'},\n  {id: 3, status: 'No Evidence of Disease'},\n  {id: 4, status: 'Treatment Related Death'}\n];\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit,\n    // minWidth: 120,\n  },\n});\n\nclass DischargeStatus extends Component {\n\n  state = {\n    labelWidth: 0,\n}\n\ncomponentDidMount() {\n    this.setState({\n        labelWidth: ReactDOM.findDOMNode(this.InputLabelRef).offsetWidth,\n    });\n}\n\n  renderOptions() {\n    // \n    return myOptions.map((option, i) => {\n      return (\n        <MenuItem\n          key={i}\n          value={option.id}>\n          {option.status}\n        </MenuItem>\n      ); // end return\n    }); // end map\n  } // end renderTagOptions\n\n  render(){\n    const { classes } = this.props;\n\n    return (\n      <FormControl fullWidth={true} variant=\"outlined\" margin=\"dense\" className={classes.formControl}>\n          <InputLabel \n           ref={ref => {\n            this.InputLabelRef = ref;\n          }}\n          shrink htmlFor=\"status_at_discharge\">Discharge Status</InputLabel>\n          <Select fullWidth={true}\n            label=\"Discharge Status\"\n            value={this.props.status_at_discharge}\n            input={\n              <OutlinedInput\n                  value={this.props.status_at_discharge}\n                  name=\"status_at_discharge\"\n                  id=\"status_at_discharge\"\n                  labelWidth={this.state.labelWidth}\n              />\n              }\n            onChange={this.props.handleChange}\n          >\n            {this.renderOptions()}\n          </Select> \n      </FormControl>\n    )\n  } // end return\n} // end class TagSelector\n\nconst mapReduxStateToProps = (reduxState) => ({\n  dropdownOptions:reduxState\n});\n\nexport default connect(mapReduxStateToProps) (withStyles(styles)(DischargeStatus));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Grid from '@material-ui/core/Grid';\nimport GridItem from '@material-ui/core/Grid';\n\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit,\n  },\n});\n\nclass ClavienScore extends Component {\n\n  renderOptions() {\n    // \n    return this.props.clavienScoreOptions.map((option, i) => {\n      return (\n        <MenuItem\n          key={i}\n          value={option.id}>\n          {option.score}\n        </MenuItem>\n      ); // end return\n    }); // end map\n  } // end renderTagOptions\n\n  render(){\n    const { classes } = this.props;\n    return (\n      <Grid container spacing={12}>\n        <GridItem item xs={12}>\n          <FormControl  variant=\"outlined\" margin=\"dense\" className={classes.formControl}>\n              <Select\n                // value={this.props.clavianScore}\n                disabled={!this.props.checked}\n                id={this.props.id}\n                \n                input={\n                  <OutlinedInput\n                    \n                      value={this.props.clavienScore}\n                      name={this.props.id}\n                      id={this.props.id}\n                  />\n                  }\n                onChange={this.props.handleChangeClavienScore}\n              >\n                {this.renderOptions()}\n              </Select> \n          </FormControl>\n        </GridItem>\n      </Grid>\n    )\n  } // end return\n} // end class TagSelector\n\nconst mapReduxStateToProps = (reduxState) => ({\n  clavienScoreOptions: reduxState.dropdownOptions.clavienScore\n});\n\nexport default connect(mapReduxStateToProps)(withStyles(styles)(ClavienScore));","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ClavienScore from './ClavienScore';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport GridItem from '@material-ui/core/Grid';\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit,\n  },\n});\n\nclass SeriousAdverseEvent extends Component {\n\n  render(){\n\n    const { classes } = this.props;\n\n    return (\n      <FormGroup row>\n        <Grid  container spacing={12}>\n          \n        {\n          this.props.adverse_events.map((event, index) => (\n            <GridItem item xs={3} key={index}>\n                <FormControlLabel\n                control={\n                    <Checkbox\n                    // key={index}\n                    name={event.name}\n                    checked={this.props.adverse_events[index].checked}\n                    onChange={this.props.handleChangeAdverseEvent}\n                    value={event.id}\n                    />\n                }\n                label={event.name}\n                />\n                <ClavienScore checked={event.checked} clavienScore={event.clavien_score} id={event.id}\n                  handleChangeClavienScore={this.props.handleChangeClavienScore}/>\n                \n              </GridItem>\n              \n          ))\n        }\n          \n        </Grid>\n      </FormGroup>\n    )\n  } // end return\n} // end class SeriousAdverseEvent\n\nexport default (withStyles(styles)(SeriousAdverseEvent));","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Button from '@material-ui/core/Button';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport ReOperation from './ReoperationSelector';\nimport Mortality from './MortalitySelector'\nimport DischargeStatus from './DischargeStatus';\nimport SeriousAdverseEvents from './SeriousAdverseEvents';\n\n\nconst styles = theme => ({\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n    },\n    expanded: {\n      backgroundColor: '#cccccc',\n      minHeight: 0,\n      marginTop: 0,\n      marginBottom: 0,\n    },\n    dense: {\n      marginTop: 19,\n    },\n    menu: {\n      width: 200,\n    },\n    group: {\n        flexDirection: 'row',\n    }\n});\n\nclass PostOpPage extends Component {\n\n    state = {\n        changesMade: false,\n        patient_id: 0,\n        id: 0,\n        icu_stays: null,\n        mcu_stays: null,\n        hospital_stays: null,\n        notes: null,\n        serious_adverse_event: false,\n        score: null,\n        reoperation: null,\n        hospital_mortality: null,\n        status_at_discharge: null,\n        discharge_notes: null,\n        adverse_events: [],\n        reoperation: null,\n        labelWidth: 0,\n    };\n\n    componentDidMount () {\n        this.setState({\n            ...this.state,\n            changesMade: false,\n            id: this.props.postOp.id,\n            patient_id: this.props.postOp.patient_id,\n            icu_stays: this.props.postOp.icu_stays,\n            mcu_stays: this.props.postOp.mcu_stays,\n            hospital_stays: this.props.postOp.hospital_stays,\n            notes: this.props.postOp.notes,\n            serious_adverse_event: this.props.postOp.serious_adverse_event,\n            score: this.props.postOp.score,\n            reoperation: this.props.postOp.reoperation,\n            hospital_mortality: this.props.postOp.hospital_mortality,\n            status_at_discharge: this.props.postOp.status_at_discharge,\n            discharge_notes: this.props.postOp.discharge_notes,\n            adverse_events: this.props.adverseEvents,\n        })\n    }\n\n    componentWillUnmount () {\n        this.savePostOp();\n    }\n\n    // Called when the input field changes\n    handleChange = (event) => {\n        this.setState({\n            ...this.state,\n            changesMade: true,\n            [event.target.name]: event.target.value,\n        });\n    }\n\n    // Called when the input field changes\n    handleChangeCheckbox = (event) => {\n        this.setState({\n            ...this.state,\n            changesMade: true,\n            [event.target.name]: event.target.checked,\n        });\n    }\n    \n    handleChangeAdverseEvent = (event) => {\n        // 1. Make a shallow copy of the items\n        let adverse_events = [...this.state.adverse_events];\n        // 2. Make a shallow copy of the item you want to mutate\n        let item = {...adverse_events[event.target.value - 1]};\n        // 3. Replace the property you're intested in\n        item.checked = !item.checked;\n        // if checked off then remove the clavien score\n        if (item.checked == false) {\n            item.clavien_score = null;\n        }\n        // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\n        adverse_events[event.target.value - 1] = item;\n        // 5. Set the state to our new copy\n        this.setState({\n            ...this.state,\n            changesMade: true,\n            adverse_events: adverse_events,\n        });\n    }\n\n    handleChangeClavienScore = (event) => {\n        // 1. Make a shallow copy of the items\n        let adverse_events = [...this.state.adverse_events];\n        // 2. Make a shallow copy of the item you want to mutate\n        let item = {...adverse_events[event.target.name - 1]};\n        // 3. Replace the property you're intested in\n        item.clavien_score = event.target.value;\n        item.patient_id = this.props.patientReducer.patient.id;\n        // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\n        adverse_events[event.target.name - 1] = item;\n        // 5. Set the state to our new copy\n        this.setState({\n            ...this.state,\n            changesMade: true,\n            adverse_events: adverse_events,\n        });\n    }\n\n    savePostOp = () => {\n        if (this.state.changesMade) {\n            this.props.dispatch({ type: 'UPDATE_POST_OP', payload: this.state});\n            this.props.dispatch({ type: 'UPDATE_ADVERSE_EVENT', payload: this.state});\n        }\n    };\n\n    render() {\n        const { classes } = this.props;\n \n        return(\n            <div>\n            <h4>Post Operative Details </h4>\n            <Grid container spacing={24}>\n                <Grid item xs={3}>\n                <TextField\n                variant=\"outlined\"\n                name=\"icu_stays\"\n                label=\"ICU Stay (days)\"\n                className={classes.textField}\n                value={this.state.icu_stays}\n                fullWidth\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                onChange={this.handleChange}\n                margin=\"dense\"\n                />\n                <TextField\n                variant=\"outlined\"\n                name=\"hospital_stays\"\n                label=\"Hospital Stay (days)\"\n                className={classes.textField}\n                value={this.state.hospital_stays}\n                fullWidth\n                onChange={this.handleChange}\n                margin=\"dense\"\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                />  \n                </Grid>\n                <Grid item xs>\n                <TextField\n                variant=\"outlined\"\n                name=\"notes\"\n                label=\"Notes\"\n                className={classes.textField}\n                value={this.state.notes}\n                multiline\n                rows=\"4\"\n                fullWidth\n                onChange={this.handleChange}\n                margin=\"dense\"\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                />\n                </Grid>\n            </Grid>\n            <FormGroup row>\n                <FormControlLabel\n                control={\n                    <Checkbox\n                    name=\"serious_adverse_event\"\n                    checked={this.state.serious_adverse_event}\n                    onChange={this.handleChangeCheckbox}\n                    />\n                }\n                label=\"Serious Adverse Event\"\n                />\n            </FormGroup>\n            <ExpansionPanel expanded={this.state.serious_adverse_event}>\n                <ExpansionPanelSummary >\n                <FormControl component=\"fieldset\" className={classes.formControl}>\n                    <FormLabel component=\"legend\">Score</FormLabel>\n                        <RadioGroup \n                            aria-label=\"Serious Adverse Event Score\"\n                            name=\"score\"\n                            className={classes.group}\n                            value={this.state.score}\n                            onChange={this.handleChange}\n                        >\n                            <FormControlLabel value=\"0\" control={<Radio />} label=\"0\" />\n                            <FormControlLabel value=\"1\" control={<Radio />} label=\"1\" />\n                            <FormControlLabel value=\"2\" control={<Radio />} label=\"2\" />\n                            <FormControlLabel value=\"3\" control={<Radio />} label=\"3\" />\n                            <FormControlLabel value=\"4\" control={<Radio />} label=\"4\" />\n                            <FormControlLabel value=\"5\" control={<Radio />} label=\"5\" />\n                        </RadioGroup>\n                    </FormControl>                    \n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <Grid container spacing={24}>\n                        <SeriousAdverseEvents adverse_events={this.state.adverse_events} \n                            handleChangeAdverseEvent={this.handleChangeAdverseEvent}\n                            handleChangeClavienScore={this.handleChangeClavienScore}/>\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n            <Grid container spacing={24}>\n                <Grid item xs={2}>\n                    <ReOperation labelWidth={this.state.labelWidth} reoperation={this.state.reoperation} handleChange={this.handleChange}/>\n                </Grid>\n                <Grid item xs={2}>\n                    <Mortality labelWidth={this.state.labelWidth} hospital_mortality={this.state.hospital_mortality} handleChange={this.handleChange}/>\n                </Grid>\n                <Grid item xs={2}>\n                    <DischargeStatus labelWidth={this.state.labelWidth} status_at_discharge={this.state.status_at_discharge} handleChange={this.handleChange}/>\n                </Grid>                \n                <Grid item xs>\n                <TextField\n                variant=\"outlined\"\n                name=\"discharge_notes\"\n                label=\"Discharge Notes\"\n                className={classes.textField}\n                value={this.state.discharge_notes}\n                multiline\n                rows=\"4\"\n                fullWidth\n                onChange={this.handleChange}\n                margin=\"dense\"\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                />      \n                \n            </Grid>\n            </Grid>\n            <Button onClick={this.savePostOp} className={classes.button}\n                variant=\"contained\" color=\"primary\">\n                Save\n            </Button>      \n\n            </div>\n\n        )\n    }\n  \n};\n\nconst mapStateToProps = reduxState => ({\n    postOp: reduxState.postOp,\n    adverseEvents: reduxState.adverseEvents,\n    patientReducer: reduxState.patientReducer,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(PostOpPage));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport PropTypes from 'prop-types';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit,\n  },\n});\n\nclass Modality extends Component {\n\n  renderOptions() {\n    // \n    console.log('this.props.recurrence', this.props.recurrence)\n    return this.props.recModalityOptions.map((option, i) => {\n      return (\n        <MenuItem\n          key={i}\n          value={option.id}>\n          {option.status}\n        </MenuItem>\n      ); // end return\n    }); // end map\n  } // end renderTagOptions\n\n  render(){\n    const { classes } = this.props;\n\n    return (\n      <FormControl fullWidth={true} variant=\"outlined\" margin=\"dense\" className={classes.formControl}>\n          <InputLabel \n          ref={ref => {\n            this.InputLabelRef = ref;\n          }}\n          shrink htmlFor=\"rec_modality\">Modality</InputLabel>\n          <Select  \n            value={this.props.recurrence.rec_modality}\n            input={\n              <OutlinedInput\n                  value={this.props.recurrence.rec_modality}\n                  name=\"rec_modality\"\n                  id=\"rec_modality\"\n              />\n              }\n            onChange={this.props.handleChange}\n          >\n            {this.renderOptions()}\n          </Select> \n      </FormControl>\n    )\n  } // end return\n} // end class Modality\n\nModality.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\n\nconst mapReduxStateToProps = (reduxState) => ({\n  recModalityOptions: reduxState.dropdownOptions.recModalityOptions\n});\n\nexport default connect(mapReduxStateToProps)(withStyles(styles)(Modality));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit,\n  },\n});\n\nclass Location extends Component {\n\n  renderOptions() {\n    // \n    return this.props.recLocationOptions.map((option, i) => {\n      return (\n        <MenuItem\n          key={i}\n          value={option.id}>\n          {option.status}\n        </MenuItem>\n      ); // end return\n    }); // end map\n  } // end renderOptions\n\n  render(){\n    const { classes } = this.props;\n\n    return (\n      <FormControl fullWidth={true} variant=\"outlined\" margin=\"dense\" className={classes.formControl}>\n          <InputLabel shrink htmlFor=\"location\">Location</InputLabel>\n          <Select  \n            value={this.props.recurrence.location}\n            input={\n              <OutlinedInput\n                  value={this.props.recurrence.location}\n                  name=\"location\"\n                  id=\"location\"\n              />\n              }\n            onChange={this.props.handleChange}\n          >\n            {this.renderOptions()}\n          </Select> \n      </FormControl>\n    )\n  } // end return\n} // end class Location\n\nconst mapReduxStateToProps = (reduxState) => ({\n  recLocationOptions: reduxState.dropdownOptions.recLocationOptions\n});\n\nexport default connect(mapReduxStateToProps)(withStyles(styles)(Location));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit,\n  },\n});\n\nclass SystemicLocation extends Component {\n\n  renderOptions() {\n    // \n    return this.props.systemicLocationOptions.map((option, i) => {\n      return (\n        <MenuItem\n          key={i}\n          value={option.id}>\n          {option.status}\n        </MenuItem>\n      ); // end return\n    }); // end map\n  } // end renderOptions\n\n  render(){\n    const { classes } = this.props;\n\n    return (\n      <FormControl fullWidth={true} variant=\"outlined\" margin=\"dense\" className={classes.formControl}>\n          <InputLabel shrink htmlFor=\"location\">Systemic Location</InputLabel>\n          <Select \n            value={this.props.recurrence.syst_location}\n            input={\n              <OutlinedInput\n                  value={this.props.recurrence.syst_location}\n                  name=\"syst_location\"\n                  id=\"syst_location\"\n              />\n              }\n            onChange={this.props.handleChange}\n          >\n            {this.renderOptions()}\n          </Select> \n      </FormControl>\n    )\n  } // end return\n} // end class SystemicLocation\n\nconst mapReduxStateToProps = (reduxState) => ({\n  systemicLocationOptions: reduxState.dropdownOptions.systemicLocationOptions\n});\n\nexport default connect(mapReduxStateToProps)(withStyles(styles)(SystemicLocation));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit,\n  },\n});\n\nclass RecurrenceTreatment extends Component {\n\n  renderOptions() {\n    return this.props.recTreatmentOptions.map((option, i) => {\n      return (\n        <MenuItem\n          key={i}\n          value={option.id}>\n          {option.status}\n        </MenuItem>\n      ); // end return\n    }); // end map\n  } // end renderOptions\n\n  render(){\n    const { classes } = this.props;\n\n    return (\n      <FormControl fullWidth={true} variant=\"outlined\" margin=\"dense\" className={classes.formControl}>\n          <InputLabel shrink htmlFor=\"treatment\">Treatment</InputLabel>\n          <Select \n            value={this.props.recurrence.treatment}\n            input={\n              <OutlinedInput\n                  value={this.props.recurrence.treatment}\n                  name=\"treatment\"\n                  id=\"treatment\"\n              />\n              }\n            onChange={this.props.handleChange}\n          >\n            {this.renderOptions()}\n          </Select> \n      </FormControl>\n    )\n  } // end return\n} // end class RecurrenceTreatment\n\nconst mapReduxStateToProps = (reduxState) => ({\n  recTreatmentOptions: reduxState.dropdownOptions.recTreatmentOptions\n});\n\nexport default connect(mapReduxStateToProps)(withStyles(styles)(RecurrenceTreatment));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\n\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit,\n  },\n});\n\nclass Status extends Component {\n\n  renderOptions() {\n    // \n    return this.props.currentStatusOptions.map((option, i) => {\n      return (\n        <MenuItem\n          key={i}\n          value={option.id}>\n          {option.status}\n        </MenuItem>\n      ); // end return\n    }); // end map\n  } // end renderOptions\n\n  render(){\n    const { classes } = this.props;\n\n    return (\n      <FormControl fullWidth={true} variant=\"outlined\" margin=\"dense\" className={classes.formControl}>\n          <InputLabel shrink htmlFor=\"status\">Status</InputLabel>\n          <Select \n            value={this.props.recurrence.status}\n            input={\n              <OutlinedInput\n                  value={this.props.recurrence.status}\n                  name=\"status\"\n                  id=\"status\"\n              />\n              }\n            onChange={this.props.handleChange}\n          >\n            {this.renderOptions()}\n          </Select> \n      </FormControl>\n    )\n  } // end return\n} // end class Location\n\nconst mapReduxStateToProps = (reduxState) => ({\n  currentStatusOptions: reduxState.dropdownOptions.currentStatusOptions\n});\n\nexport default connect(mapReduxStateToProps)(withStyles(styles)(Status));","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Modality from './Modality';\nimport Location from './Location';\nimport SystemicLocation from './SystemicLocation';\nimport FollowUpDetailTreatment from './FollowUpDetailTreatment';\nimport Status from './Status';\nimport moment from 'moment';\n\nconst styles = theme => ({\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n    },\n    expanded: {\n      backgroundColor: '#cccccc',\n      minHeight: 0,\n      marginTop: 0,\n      marginBottom: 0,\n    },\n    dense: {\n      marginTop: 19,\n    },\n    menu: {\n      width: 200,\n    },\n    group: {\n        flexDirection: 'row',\n    }\n});\n\nclass FollowUpDetailRecurrence extends Component {\n    \n    render() {\n        const { classes } = this.props;\n        \n        return(\n          <Grid container spacing={24}>\n            <Grid item xs={12}>\n              <h3>Recurrence Information</h3>\n            </Grid>\n            <Grid item xs={3}>\n              <TextField \n                label=\"Date of Recurrence\"\n                type=\"date\"\n                fullWidth=\"true\"\n                variant=\"outlined\"\n                margin=\"dense\"\n                onChange={this.props.handleChange}\n                name=\"date\"\n                value={moment(this.props.recurrence.date).format('YYYY-MM-DD')}\n              />\n            </Grid>\n            <Grid item xs={3}>\n            <TextField\n                name=\"cea\"\n                label=\"CEA\"\n                className={classes.textField}\n                value={this.props.recurrence.cea}\n                fullWidth\n                onChange={this.props.handleChange}\n                margin=\"dense\"\n                variant=\"outlined\"\n                />\n            </Grid>\n            <Grid item xs={3}>\n              <Modality recurrence={this.props.recurrence} \n                            handleChange={this.props.handleChange}\n                            handleChangeCheckbox={this.props.handleChangeCheckbox}/>\n            </Grid>\n            <Grid item xs={12}>\n                Treatment\n            </Grid>\n            <Grid item xs={3}>\n              <TextField \n                  margin=\"dense\"\n                  label=\"Treatment Date\"\n                  variant=\"outlined\"\n                  type=\"date\"\n                  fullWidth=\"true\"\n                  onChange={this.props.handleChange}\n                  name=\"date_treatment\"\n                  value={moment(this.props.recurrence.date_treatment).format('YYYY-MM-DD')}\n                />\n            </Grid>\n            <Grid item xs={3}>\n              <Location recurrence={this.props.recurrence} \n                            handleChange={this.props.handleChange}\n                            handleChangeCheckbox={this.props.handleChangeCheckbox}/>\n            </Grid>\n            <Grid item xs={3}>\n              <SystemicLocation recurrence={this.props.recurrence} \n                            handleChange={this.props.handleChange}\n                            handleChangeCheckbox={this.props.handleChangeCheckbox}/>\n            </Grid>\n            <Grid item xs={3}>\n              <FollowUpDetailTreatment recurrence={this.props.recurrence} \n                            handleChange={this.props.handleChange}\n                            handleChangeCheckbox={this.props.handleChangeCheckbox}/>\n            </Grid>\n            <Grid item xs={3}>\n              <Status recurrence={this.props.recurrence} \n                            handleChange={this.props.handleChange}\n                            handleChangeCheckbox={this.props.handleChangeCheckbox}/>\n            </Grid>\n            <Grid item xs={9}>\n                <TextField shrink\n                name=\"treatment_notes\"\n                className={classes.textField}\n                value={this.props.recurrence.treatment_notes}\n                multiline\n                rows=\"4\"\n                fullWidth\n                onChange={this.props.handleChange}\n                margin=\"dense\"\n                variant=\"outlined\"\n                />\n            </Grid>\n          </Grid>\n        )\n    }\n  \n};\n\nexport default connect() (withStyles(styles)(FollowUpDetailRecurrence));","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport FollowUpDetailRecurrence from './FollowUpDetailRecurrence';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport moment from 'moment';\n\nconst styles = theme => ({\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n    },\n    expasion: {\n      backgroundColor: '#cccccc',\n      minHeight: 0,\n      marginTop: 0,\n      marginBottom: 0,\n    },\n    dense: {\n      marginTop: 19,\n    },\n    menu: {\n      width: 200,\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    superCool: {\n        backgroundColor: '#eeeeee',\n        height: 25,\n    }\n});\n\n\nclass FollowUpDetailDetail extends Component {\n\n    state = {\n        id: 0,\n        patient_id: 0,\n        follow_up_id: null,\n        date: null,\n        evidence_of_disease: false,\n        follow_up_notes: null,\n        recurrence: false,\n        cea: null,\n        rec_modality: null,\n        syst_location: false,\n        last_contact: null,\n        treatment: null,\n        date_treatment: null,\n        status: null,\n        treatment_notes: null,\n        location: null\n    };\n\n    componentDidMount () {\n        let followUpDate = null;\n        if (this.props.history.date != null) {\n            followUpDate = moment(this.props.history.date).format('YYYY-MM-DD')\n        }\n        let lastContactDate = null;\n        if (this.props.history.last_contact != null) {\n            lastContactDate = moment(this.props.history.last_contact).format('YYYY-MM-DD')\n        }\n        let treatmentDate = null;\n        if (this.props.history.date_treatment != null) {\n            treatmentDate = moment(this.props.history.date_treatment).format('YYYY-MM-DD')\n        }\n        this.setState({\n            id: this.props.history.id,\n            patient_id: this.props.history.patient_id,\n            follow_up_id: this.props.history.follow_up_id,\n            date: followUpDate,\n            evidence_of_disease: this.props.history.evidence_of_disease,\n            follow_up_notes: this.props.history.follow_up_notes,\n            recurrence: this.props.history.recurrence,\n            cea: this.props.history.cea,\n            rec_modality: this.props.history.rec_modality,\n            syst_location: this.props.history.syst_location,\n            last_contact: lastContactDate,\n            treatment: this.props.history.treatment,\n            date_treatment: treatmentDate,\n            status: this.props.history.status,\n            treatment_notes: this.props.history.treatment_notes,\n            location: this.props.history.location\n        })\n    }\n\n    // Called when the input field changes\n    handleChange = (event) => {\n        this.setState({\n            ...this.state,\n            [event.target.name]: event.target.value,\n        });\n    };\n\n    // Called when the input field changes\n    handleChangeCheckbox = (event) => {\n        this.setState({\n            ...this.state,\n            [event.target.name]: event.target.checked,\n        });\n    };\n\n    updateFollowUpHistory = () => {\n        this.props.dispatch({type: 'UPDATE_FOLLOW_UP_HISTORY', payload: this.state});\n    };\n    \n    render() {\n\n        const { classes } = this.props;\n        \n        return(\n            <div>\n                <ExpansionPanelDetails>\n                <Grid container spacing={24}>\n                    <Grid item xs={3}>\n                    <TextField\n                        name=\"date\"\n                        label=\"Follow Up Date\"\n                        className={classes.textField}\n                        value={moment(this.state.date).format('YYYY-MM-DD')}\n                        // fullWidth\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        type=\"date\"\n                        onChange={this.handleChange}\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                    />\n                    </Grid>\n\n                    <Grid item xs={3}>\n                        <FormGroup row>\n                            <FormControlLabel\n                            control={\n                                <Checkbox\n                                name=\"evidence_of_disease\"\n                                checked={this.state.evidence_of_disease}\n                                onChange={this.handleChangeCheckbox}\n                                value={this.state.evidence_of_disease}\n                                />\n                            }\n                            label=\"Evidence of Disease\"\n                            />\n                        </FormGroup>\n                        <FormGroup row>\n                            <FormControlLabel\n                            control={\n                                <Checkbox\n                                name=\"recurrence\"\n                                checked={this.state.recurrence}\n                                onChange={this.handleChangeCheckbox}\n                                value={this.state.recurrence}\n                                />\n                            }\n                            label=\"Recurrence\"\n                            />\n                        </FormGroup>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <TextField\n                        variant=\"outlined\"\n                        name=\"follow_up_notes\"\n                        className={classes.textField}\n                        value={this.state.follow_up_notes}\n                        rows={8}\n                        multiline\n                        fullWidth\n                        onChange={this.handleChange}\n                        margin=\"dense\"\n                        />\n                    </Grid>\n                    <Divider variant=\"middle\" />\n                    {/* display recurrence information only if evidence of disease */}\n                    {this.state.recurrence && \n                    <FollowUpDetailRecurrence recurrence={this.state} \n                        handleChange={this.handleChange}\n                        handleChangeCheckbox={this.handleChangeCheckbox}/>\n                    }\n                </Grid>\n            </ExpansionPanelDetails>\n            <ExpansionPanelActions>\n                <Button onClick={this.updateFollowUpHistory} className={classes.button}\n                        variant=\"contained\" color=\"primary\">\n                    Update\n                </Button>      \n            </ExpansionPanelActions>\n            </div>\n        )\n    }\n};\n\nexport default connect() (withStyles(styles)(FollowUpDetailDetail));","import React, { Component, Fragment } from 'react'\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport FollowUpDetailDetail from './FollowUpDetailDetail';\nimport moment from 'moment';\n\nconst styles = theme => ({\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n    },\n    expasion: {\n      backgroundColor: '#cccccc',\n      minHeight: 0,\n      marginTop: 0,\n      marginBottom: 0,\n    },\n    dense: {\n      marginTop: 19,\n    },\n    menu: {\n      width: 200,\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    superCool: {\n        backgroundColor: '#eeeeee',\n        height: 25,\n    }\n});\n\n\nclass FollowUpDetail extends Component {\n\n    render() {\n\n        const { classes } = this.props;\n        \n        return(\n            <div>\n            {\n                this.props.followUpHistory.map((history, index) => (\n                    <div key={history.id}>\n                         <ExpansionPanel defaultExpanded>\n                            <ExpansionPanelSummary className={classes.superCool} expandIcon={<ExpandMoreIcon />}>\n                                {history.date ? (<h3>{moment(history.date).format('MM-DD-YYYY')}</h3>) : (<h3>Enter Details</h3>)}\n                            </ExpansionPanelSummary>\n                            <FollowUpDetailDetail history={history} />\n                        </ExpansionPanel>\n                    </div>\n                ))\n            }\n            </div>\n        )\n    }\n};\n\nconst mapStateToProps = reduxState => ({\n    followUpHistory: reduxState.followUpHistory,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(FollowUpDetail));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit,\n  },\n});\n\nclass ChemotherapyType extends Component {\n\n  renderOptions() {\n    return this.props.adjChemoTypeOptions.map((option, i) => {\n      return (\n        <MenuItem\n          key={i}\n          value={option.id}>\n          {option.status}\n        </MenuItem>\n      ); // end return\n    }); // end map\n  } // end renderTagOptions\n\n  render(){\n    const { classes } = this.props;\n\n    return (\n      <FormControl fullWidth=\"true\" variant=\"outlined\" margin=\"dense\" className={classes.formControl} disabled={this.props.adjuvant_chemo == 2 || this.props.adjuvant_chemo == 3}>\n          <InputLabel shrink htmlFor=\"adjuvant_chemo_type\">Chemotherapy Type</InputLabel>\n          <Select fullWidth={true}\n            name=\"adjuvant_chemo_type\"\n            value={this.props.adjuvant_chemo_type}\n            input={\n              <OutlinedInput\n                  value={this.props.adjuvant_chemo_type}\n                  name=\"adjuvant_chemo_type\"\n                  id=\"adjuvant_chemo_type\"\n              />\n              }\n            onChange={this.props.handleChange}\n          >\n            {this.renderOptions()}\n          </Select> \n      </FormControl>\n    )\n  } // end return\n} // end class TagSelector\n\nconst mapReduxStateToProps = (reduxState) => ({\n  adjChemoTypeOptions: reduxState.dropdownOptions.adjChemoTypeOptions\n});\n\nexport default connect(mapReduxStateToProps)(withStyles(styles)(ChemotherapyType));","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit,\n  },\n  group: {\n    flexDirection: 'row',\n}\n});\n\nclass AdjuvantChemotherapy extends Component {\n\n  render(){\n    const { classes } = this.props;\n    const myValue = this.props.adjuvant_chemo + '';\n\n    return (\n\n      <FormControl component=\"fieldset\" className={classes.formControl}>\n      <FormLabel component=\"legend\">Adjuvant Chemotherapy</FormLabel>\n          <RadioGroup \n              aria-label=\"Adjuvant Chemotherapy\"\n              name=\"adjuvant_chemo\"\n              className={classes.group}\n              value={myValue}\n              onChange={this.props.handleChange}\n          >\n              <FormControlLabel value='1' control={<Radio />} label=\"Yes\" />\n              <FormControlLabel value='2' control={<Radio />} label=\"No\" />\n              <FormControlLabel value='3' control={<Radio />} label=\"Unknown\" />\n          </RadioGroup>\n      </FormControl>\n    )\n  } // end return\n} // end class TagSelector\n\nexport default (withStyles(styles)(AdjuvantChemotherapy));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing.unit,\n  },\n});\n\nclass Biological extends Component {\n\n  renderOptions() {\n    // \n    return this.props.biologicalOptions.map((option, i) => {\n      return (\n        <MenuItem\n          key={i}\n          value={option.id}>\n          {option.status}\n        </MenuItem>\n      ); // end return\n    }); // end map\n  } // end renderTagOptions\n\n  render(){\n    const { classes } = this.props;\n\n    return (\n      <FormControl fullWidth=\"true\" variant=\"outlined\" margin=\"dense\" className={classes.formControl} disabled={this.props.adjuvant_chemo == 2 || this.props.adjuvant_chemo == 3}>\n          <InputLabel shrink htmlFor=\"biological\">Biological</InputLabel>\n          <Select fullWidth={true}\n            // variant=\"outlined\" \n            value={this.props.biological}\n            input={\n              <OutlinedInput\n                  value={this.props.biological}\n                  name=\"biological\"\n                  id=\"biological\"\n              />\n              }\n            onChange={this.props.handleChange}\n          >\n            {this.renderOptions()}\n          </Select> \n      </FormControl>\n    )\n  } // end return\n} // end class TagSelector\n\nconst mapReduxStateToProps = (reduxState) => ({\n  biologicalOptions: reduxState.dropdownOptions.biologicalOptions\n});\n\nexport default connect(mapReduxStateToProps)(withStyles(styles)(Biological));","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport moment from 'moment';\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n  },\n  expasion: {\n    backgroundColor: '#cccccc',\n    minHeight: 0,\n    marginTop: 0,\n    marginBottom: 0,\n  },\n  dense: {\n    marginTop: 19,\n  },\n  menu: {\n    width: 200,\n  },\n  group: {\n      flexDirection: 'row',\n  },\n  superCool: {\n      backgroundColor: '#eeeeee',\n      height: 25,\n  }\n});\n\nclass AddFollowUpDialog extends Component {\n\n  state = {\n    open: false,\n    id: 0,\n    patient_id: 0,\n    date: null,\n  };\n\n  componentDidMount () {\n    this.setState({\n        patient_id: this.props.patientReducer.patient.id\n    })\n  };\n\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  // Called when the input field changes\n  handleChange = (event) => {\n    this.setState({\n        ...this.state,\n        [event.target.name]: event.target.value,\n    });\n  };\n\n  addFollowUpHistory = () => {\n    this.props.dispatch({type: 'ADD_FOLLOW_UP_HISTORY', payload: this.state});\n    this.props.dispatch({type: 'FETCH_FOLLOW_UP_HISTORY', payload: this.state.patient_id});\n    this.setState({ open: false });\n    this.setState({ date: null });\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <Fragment>\n        <Button variant=\"contained\" color=\"primary\" onClick={this.handleClickOpen}>\n          New Followup\n        </Button>\n        <Dialog\n          open={this.state.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"form-dialog-title\">New Follow Up</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Enter the new follow up date to add to the list.\n            </DialogContentText>\n                <TextField\n                    name=\"date\"\n                    label=\"Follow Up Date\"\n                    className={classes.textField}\n                    value={moment(this.state.date).format('YYYY-MM-DD')}\n                    // fullWidth\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    type=\"date\"\n                    onChange={this.handleChange}\n                    margin=\"normal\"\n                    // variant=\"outlined\"\n                />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={this.addFollowUpHistory} color=\"primary\">\n              Add\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = reduxState => ({\n  patientReducer: reduxState.patientReducer,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(AddFollowUpDialog));","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport FollowUpDetail from './FollowUpDetail';\nimport ChemotherapyType from './ChemotherapyType';\nimport AdjuvantChemotherapy from './AdjuvantChemotherapy';\nimport Biological from './Biological';\nimport AddFollowUpDialog from './AddFollowUpDialog';\n\nconst styles = theme => ({\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n    },\n    button: {\n        margin: `${theme.spacing.unit * 3}px`\n    },\n    expanded: {\n      backgroundColor: '#cccccc',\n      minHeight: 0,\n      marginTop: 0,\n      marginBottom: 0,\n    },\n    dense: {\n      marginTop: 19,\n    },\n    menu: {\n      width: 200,\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    section: {\n        margin: `${theme.spacing.unit * 3}px ${theme.spacing.unit * 2}px`,\n      },\n});\n\nclass FollowUpPage extends Component {\n\n    state = {\n        id: 0,\n        patient_id: 0,\n        adjuvant_chemo: null,\n        adjuvant_chemo_type: null,\n        biological: null,\n        evidence_of_disease: false,\n        last_contact: null,\n        date_of_death: null,\n    };\n\n    componentDidMount () {\n        this.setState({\n            id: this.props.followUp.id,\n            patient_id: this.props.patientReducer.patient.id,\n            adjuvant_chemo: this.props.followUp.adjuvant_chemo,\n            adjuvant_chemo_type: this.props.followUp.adjuvant_chemo_type,\n            biological: this.props.followUp.biological,\n            evidence_of_disease: this.props.followUp.evidence_of_disease,\n            last_contact: this.props.followUp.last_contact,\n            date_of_death: this.props.followUp.date_of_death,\n        })\n    };\n    \n    updateFollowUp = () => {\n        this.props.dispatch({ type: 'UPDATE_FOLLOW_UP', payload: this.state});\n    };\n\n    // Called when the input field changes\n    handleChange = (event) => {\n        this.setState({\n            ...this.state,\n            [event.target.name]: event.target.value,\n        });\n    }\n\n    // Called when the input field changes\n    handleChangeCheckbox = (event) => {\n        this.setState({\n            ...this.state,\n            [event.target.name]: event.target.checked,\n        });\n    }\n    \n    render() {\n        const { classes } = this.props;\n        console.log('in render follow up page:', this.state, this.props.followUpHistory);\n        return(\n            <div>\n                <h4>Follow Up Treatment Plan</h4>\n                <Grid container spacing={24} className={classes.section}>\n                    <Grid item xs={3}>\n                    <AdjuvantChemotherapy adjuvant_chemo={this.state.adjuvant_chemo} handleChange={this.handleChange} />\n                    </Grid>\n                    <Grid item xs={4}>\n                    <ChemotherapyType adjuvant_chemo={this.state.adjuvant_chemo} adjuvant_chemo_type={this.state.adjuvant_chemo_type} handleChange={this.handleChange} />\n                    </Grid>\n                    <Grid item xs={4}>\n                    <Biological adjuvant_chemo={this.state.adjuvant_chemo} biological={this.state.biological} handleChange={this.handleChange} />\n                    </Grid>\n                </Grid>\n                <Button onClick={this.updateFollowUp} className={classes.button}\n                            variant=\"contained\" color=\"primary\">\n                        Save\n                    </Button>\n                    {this.props.followUp.id ? (<AddFollowUpDialog />) : ''\n                    }\n                <Divider variant=\"middle\" />\n                <h4>Follow Up History</h4>\n                <FollowUpDetail />\n            </div>\n        )\n    }\n};\n\nconst mapStateToProps = reduxState => ({\n    followUp: reduxState.followUp,\n    followUpHistory: reduxState.followUpHistory,\n    patientReducer: reduxState.patientReducer,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(FollowUpPage));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Grid from '@material-ui/core/Grid';\nimport red from '@material-ui/core/colors/red';\nimport moment from 'moment';\n\n\nconst styles = theme => ({\n    root: {\n      width: '100%',\n      flexGrow: 1,\n      marginTop: theme.spacing.unit * 3,\n        overflowX: 'auto',\n    },\n    heading: {\n      fontSize: theme.typography.pxToRem(15),\n      fontWeight: theme.typography.fontWeightRegular,\n      \n    },\n    table: {\n        minWidth: 700,\n      },\n    paper: {\n        padding: theme.spacing.unit * 2,\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n    redBold: {\n        color: red[500],\n        textTransform: 'uppercase',\n        fontWeight: '900',\n        // useNextVariants: true,\n    },\n    superCool: {\n        backgroundColor: '#FFFFFF',\n        border: 'none',\n        boxShadow: 'none',\n    },\n  });\n\nclass CurrentPatientInfo extends Component {\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div>\n                {/* <pre>{JSON.stringify(this.props.patient)}</pre> */}\n                <ExpansionPanel className={classes.superCool}>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography className={classes.heading}>\n            <Grid container spacing={24}>\n                <Grid item xs={2.5}>\n                <span className={classes.redBold}>Patient ID: </span>{this.props.patient.patient_no}\n                </Grid>\n                <Grid item xs={2.5}>\n                <span className={classes.redBold}>Date of Birth: </span>{moment(this.props.patient.dob).format('MM-DD-YYYY')}\n                </Grid>\n                <Grid item xs={2.5}>\n                <span className={classes.redBold}>Age: </span>{Math.floor((new Date() - new Date(this.props.patient.dob).getTime()) / 3.15576e+10)}\n                </Grid>\n                {/* {age = Math.floor((new Date() - new Date(this.props.patient.dob).getTime()) / 3.15576e+10)} */}\n                <Grid item xs={2.5}>\n                <span className={classes.redBold}>Gender: </span>{this.props.patient.gender}\n                </Grid>\n                {this.props.patient.hipec_date ? (<Grid item xs={2.5}><span className={classes.redBold}>HIPEC: </span>YES</Grid>) : (<></>)}\n                {this.props.patient.hipec_date ? (<Grid item xs={2.5}><span className={classes.redBold}>Date of HIPEC: </span>{moment(this.props.patient.hipec_date).format('MM-DD-YYYY')}</Grid>) : (<></>)}\n                {this.props.patient.referal_date ? (<Grid item xs={2.5}><span className={classes.redBold}>Date of Referral: </span>{moment(this.props.patient.referal_date).format('MM-DD-YYYY')}</Grid>) : (<></>)}\n                {this.props.patient.type_of_cancer ? (<Grid item xs={2.5}><span className={classes.redBold}>Type of Cancer: </span>{this.props.patient.type_of_cancer}</Grid>) : (<></>)}\n            </Grid>\n            </Typography>\n          </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                <Typography>\n                <Grid container spacing={24}>\n                  {this.props.patient.diagnosis_date ? (<Grid item xs={2.5}><span className={classes.redBold}>Diagnosis Date: </span>{moment(this.props.patient.diagnosis_date).format('MM-DD-YYYY')}</Grid>) : (<></>)}\n                  {this.props.patient.alive_on_date ? (<Grid item xs={2.5}><span className={classes.redBold}>Alive on Date: </span>{moment(this.props.patient.alive_on_date).format('MM-DD-YYYY')}</Grid>) : (<></>)}\n                  {this.props.patient.sensor ? (<Grid item xs={2.5}><span className={classes.redBold}>Sensor: </span>YES</Grid>) : (<></>)}\n                  {this.props.patient.hospital_telephone ? (<Grid item xs={2.5}><span className={classes.redBold}>Hospital Telephone: </span>{this.props.patient.hospital_telephone}</Grid>) : (<></>)}\n                  {this.props.patient.referring_doctor ? (<Grid item xs={2.5}><span className={classes.redBold}>Referring Doctor: </span>{this.props.patient.referring_doctor}</Grid>) : (<></>)}\n                  {this.props.patient.current_status ? (<Grid item xs={2.5}><span className={classes.redBold}>Current Status: </span>{this.props.patient.current_status}</Grid>) : (<></>)}\n                  {this.props.patient.interval_prime_surgery ? (<Grid item xs={2.5}><span className={classes.redBold}>Interval Prime Surgery - HIPEC: </span>{this.props.patient.interval_prime_surgery}</Grid>) : (<></>)}\n                  {this.props.patient.survival_hipec_death ? (<Grid item xs={2.5}><span className={classes.redBold}>Survival (HIPEC Death): </span>{this.props.patient.survival_hipec_death}</Grid>) : (<></>)}\n                  {this.props.patient.survival_hipec_last_contact ? (<Grid item xs={2.5}><span className={classes.redBold}>Survival (HIPEC Last Contact): </span>{this.props.patient.survival_hipec_last_contact}</Grid>) : (<></>)}\n                  {this.props.patient.interval_diagnosis_pc_hipec ? (<Grid item xs={2.5}><span className={classes.redBold}>Interval Diagnosis PC-HIPEC: </span>{this.props.patient.interval_diagnosis_pc_hipec}</Grid>) : (<></>)}\n                </Grid>\n                </Typography>\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n            </div>\n        );\n    }\n}\n\nCurrentPatientInfo.propTypes = {\n    classes: PropTypes.object.isRequired,\n  };\n\nconst mapStateToProps = reduxState => ({\n    patient: reduxState.patientReducer.patient,\n});\n\n\nexport default withStyles(styles)(connect(mapStateToProps)(CurrentPatientInfo));","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst appTheme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#0849eb',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      main: '#789dfa',\n    },\n    background: {\n      paper: \"#fff\",\n      default: \"#fff\"\n    },\n    // error: will use the default color\n  },\n  typography: {\n    useNextVariants: true,\n    fontSize: 16,\n  },\n  overrides: {\n    MuiExpansionPanelSummary: { // Name of the component ⚛️ / style sheet\n      root: { // Name of the rule\n        // backgroundColor: '#888888', // Some CSS\n      },\n    },\n  },\n});\n\nexport default appTheme;","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst appTheme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#0849eb',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      main: '#789dfa',\n    },\n    background: {\n      paper: \"#fff\",\n      default: \"#fff\"\n    },\n    // error: will use the default color\n  },\n  typography: {\n    useNextVariants: true,\n    fontSize: 16,\n  },\n  overrides: {\n    MuiExpansionPanelSummary: { // Name of the component ⚛️ / style sheet\n      root: { // Name of the rule\n        // backgroundColor: '#888888', // Some CSS\n      },\n    },\n  },\n});\n\nexport default appTheme;","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst appTheme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#18c675',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      main: '#70eeb3',\n    },\n    background: {\n      paper: \"#fff\",\n      default: \"#fff\"\n    },\n    // error: will use the default color\n  },\n  typography: {\n    useNextVariants: true,\n    fontSize: 16,\n  },\n  overrides: {\n    MuiExpansionPanelSummary: { // Name of the component ⚛️ / style sheet\n      root: { // Name of the rule\n        // backgroundColor: '#888888', // Some CSS\n      },\n    },\n  },\n});\n\nexport default appTheme;","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst appTheme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#904ebc',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      main: '#caaadf',\n    },\n    background: {\n      paper: \"#fff\",\n      default: \"#fff\"\n    },\n    // error: will use the default color\n  },\n  typography: {\n    useNextVariants: true,\n    fontSize: 16,\n  },\n  overrides: {\n    MuiExpansionPanelSummary: { // Name of the component ⚛️ / style sheet\n      root: { // Name of the rule\n        // backgroundColor: '#888888', // Some CSS\n      },\n    },\n  },\n});\n\nexport default appTheme;","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst appTheme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#c6c6c6',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      main: '#ffffff',\n    },\n    background: {\n      paper: \"#fff\",\n      default: \"#fff\"\n    },\n    // error: will use the default color\n  },\n  typography: {\n    useNextVariants: true,\n    fontSize: 16,\n  },\n  overrides: {\n    MuiExpansionPanelSummary: { // Name of the component ⚛️ / style sheet\n      root: { // Name of the rule\n        // backgroundColor: '#888888', // Some CSS\n      },\n    },\n  },\n});\n\nexport default appTheme;","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst appTheme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#ed1c24',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      main: '#f69296',\n    },\n    background: {\n      paper: \"#fff\",\n      default: \"#fff\"\n    },\n    // error: will use the default color\n  },\n  typography: {\n    useNextVariants: true,\n    fontSize: 16,\n  },\n  overrides: {\n    MuiExpansionPanelSummary: { // Name of the component ⚛️ / style sheet\n      root: { // Name of the rule\n        // backgroundColor: '#888888', // Some CSS\n      },\n    },\n  },\n});\n\nexport default appTheme;","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst appTheme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#f0bec1',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      main: '#ffffff',\n    },\n    background: {\n      paper: \"#fff\",\n      default: \"#fff\"\n    },\n    // error: will use the default color\n  },\n  typography: {\n    useNextVariants: true,\n    fontSize: 16,\n  },\n  overrides: {\n    MuiExpansionPanelSummary: { // Name of the component ⚛️ / style sheet\n      root: { // Name of the rule\n        // backgroundColor: '#888888', // Some CSS\n      },\n    },\n  },\n});\n\nexport default appTheme;","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst appTheme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#ecc43e',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      main: '#f7e7b2',\n    },\n    background: {\n      paper: \"#fff\",\n      default: \"#fff\"\n    },\n    // error: will use the default color\n  },\n  typography: {\n    useNextVariants: true,\n    fontSize: 16,\n  },\n  overrides: {\n    MuiExpansionPanelSummary: { // Name of the component ⚛️ / style sheet\n      root: { // Name of the rule\n        // backgroundColor: '#888888', // Some CSS\n      },\n    },\n  },\n});\n\nexport default appTheme;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\n// import TextField from '@material-ui/core/TextField';\n// import PatientProfileSearchPage from '../PatientProfileSearchPage/PatientProfileSearchPage';\n// import TreatmentFormPatientData from '../TreatmentFormPatientData/TreatmentFormPatientData';\nimport PrimaryTumorPage from '../PrimaryTumorPage/PrimaryTumorPage';\nimport IntakePage from '../IntakePage/IntakePage';\nimport PSDSSPage from '../PSDSSPage/PSDSSPage';\nimport InterventionPage from '../InterventionPage/InterventionPage';\nimport PathologyNotesPage from '../PathologyNotesPage/PathologyNotesPage';\nimport OperativeNotesPage from '../OperativeNotesPage/OperativeNotesPage';\nimport PostOpPage from '../PostOpPage/PostOpPage';\nimport FollowUpPage from '../FollowUpPage/FollowUpPage';\n// import ManageUsersPage from '../ManageUsersPage/ManageUsersPage';\nimport CurrentPatientInfo from '../CurrentPatientInfo/CurrentPatientInfo';\nimport ColorectalTheme from '../App/ColorectalTheme';\nimport AppendixTheme from '../App/AppendixTheme';\nimport GastricTheme from '../App/GastricTheme';\nimport MesotheliomaTheme from '../App/MesotheliomaTheme';\nimport OtherTheme from '../App/OtherTheme';\nimport OvarianTheme from '../App/OvarianTheme';\nimport PseudomyxomaTheme from '../App/PseudomyxomaTheme';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport appTheme from '../App/AppTheme';\n\nfunction TabContainer(props) {\n    return (\n      <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n        {props.children}\n      </Typography>\n    );\n  }\n\n  TabContainer.propTypes = {\n    children: PropTypes.node.isRequired,\n  };\n\n\n  const styles = theme => ({\n    root: {\n      flexGrow: 1,\n      width: '100%',\n    },\n  });\nclass MainTabsPage extends Component {\nstate = {\n    value: 0,\n  };\n\n  componentDidMount () {    \n    // console.log('in main tabs page for patient#', this.props.patient);\n    // this.getPatientIDFromCookie(patientId)\n    // let patientId;\n    // if (this.props.patient.id == undefined) {\n    //   patientId = document.cookie.replace(/(?:(?:^|.*;\\s*)patientID\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\");\n    //   this.props.dispatch({type:'GET_PATIENT_ID_FROM_COOKIE', payload: patientId});\n    // } else {\n    // let patientId = this.props.patient.id;\n    // }\n    let patientId = document.cookie.replace(/(?:(?:^|.*;\\s*)patientID\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\");\n    // let patientId = this.props.patient.id;\n    this.props.dispatch({type: 'GET_PATIENT_ID_FROM_COOKIE', payload: patientId});\n    this.props.dispatch({type: 'GET_DROPDOWN_OPTIONS'});\n    this.props.dispatch({type: 'GET_INITIAL_VALUES', payload: patientId});\n    this.props.dispatch({type: 'GET_INITIAL_DATA_FOR_INTAKE', payload: patientId});\n    this.props.dispatch({type: 'GET_INITIAL_DATA_FOR_PSDSS', payload: patientId});\n    this.props.dispatch({type: 'GET_PCI_TOTAL', payload: patientId });\n    this.props.dispatch({type: 'FETCH_POST_OP', payload: patientId});\n    this.props.dispatch({type: 'FETCH_ADVERSE_EVENT', payload: patientId});\n    this.props.dispatch({type: 'FETCH_FOLLOW_UP', payload: patientId});\n    this.props.dispatch({type: 'FETCH_FOLLOW_UP_HISTORY', payload: patientId});\n  }\n\n  handleTabChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  \n  \n  // CancerTheme = () => {\n  //   console.log('toc', patientTOC);\n  //   let patientTOC = document.cookie.replace(/(?:(?:^|.*;\\s*)patientTOC\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\")\n  //   let theme;\n  //   if (patientTOC === 1) {\n  //      theme={ColorectalTheme}\n  //    }\n  //   else if (patientTOC === 2){\n  //     theme={AppendixTheme}\n  //   }\n  //   else if (patientTOC === 3){\n  //     theme={GastricTheme}\n  //   }\n  //   else if (patientTOC === 4){\n  //     theme={OvarianTheme}\n  //   }\n  //   else if (patientTOC === 5){\n  //    theme={MesotheliomaTheme}\n  //   }\n  //   else if (patientTOC === 6){\n  //      theme={PseudomyxomaTheme}\n  //   }\n  //   else if (patientTOC === 7){\n  //      theme={OtherTheme}\n  //   }\n  //   else {\n  //      theme={appTheme}\n  //   }\n  //   return theme\n  // }\n\n    render() {\n        const { classes } = this.props;\n        const { value } = this.state;\n        // const cancerThemes = {\n        //   1: ColorectalTheme,\n        //   2: AppendixTheme,\n        // };\n\n        // const themeTest = cancerThemes[this.props.patient.toc_id] || appTheme;\n\n        // let themeOption = this.CancerTheme(this.props.patient.toc_id)\n        return(\n            <div className={classes.root}>\n            {this.props.patient !== null ? (\n              <MuiThemeProvider theme={appTheme}>\n\n                {this.props.patient ? (<CurrentPatientInfo/>) : (<></>)}\n                <AppBar position=\"static\" color=\"default\">\n                    <Tabs\n                    value={value}\n                    onChange={this.handleTabChange}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    scrollable\n                    scrollButtons=\"auto\"\n                    >\n                    <Tab label=\"Primary Tumor\" />\n                    <Tab label=\"Intake\" />\n                    <Tab label=\"PSDSS\" />\n                    <Tab label=\"Intervention\" />\n                    <Tab label=\"Pathology Notes\" />\n                    <Tab label=\"Operative Notes\" />\n                    <Tab label=\"Post-Op\" />\n                    <Tab label=\"Follow Up\" />\n                    </Tabs>\n                </AppBar>\n                {value === 0 && <TabContainer><PrimaryTumorPage /></TabContainer>}\n                {value === 1 && <TabContainer><IntakePage /></TabContainer>}\n                {value === 2 && <TabContainer><PSDSSPage /></TabContainer>}\n                {value === 3 && <TabContainer><InterventionPage /></TabContainer>}\n                {value === 4 && <TabContainer><PathologyNotesPage /></TabContainer>}\n                {value === 5 && <TabContainer><OperativeNotesPage /></TabContainer>}\n                {value === 6 && <TabContainer><PostOpPage /></TabContainer>}\n                {value === 7 && <TabContainer><FollowUpPage /></TabContainer>}\n                \n                </MuiThemeProvider>\n                ):(<MuiThemeProvider theme={appTheme}>\n                  {this.props.patient ? (<CurrentPatientInfo/>) : (<></>)}\n                <AppBar position=\"static\" color=\"default\">\n                    <Tabs\n                    value={value}\n                    onChange={this.handleTabChange}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    scrollable\n                    scrollButtons=\"auto\"\n                    >\n                    <Tab label=\"Primary Tumor\" />\n                    <Tab label=\"Intake\" />\n                    <Tab label=\"PSDSS\" />\n                    <Tab label=\"Intervention\" />\n                    <Tab label=\"Pathology Notes\" />\n                    <Tab label=\"Operative Notes\" />\n                    <Tab label=\"Post-Op\" />\n                    <Tab label=\"Follow Up\" />\n                    </Tabs>\n                </AppBar>\n                  {value === 0 && <TabContainer><PrimaryTumorPage /></TabContainer>}\n                  {value === 1 && <TabContainer><IntakePage /></TabContainer>}\n                  {value === 2 && <TabContainer><PSDSSPage /></TabContainer>}\n                  {value === 3 && <TabContainer><InterventionPage /></TabContainer>}\n                  {value === 4 && <TabContainer><PathologyNotesPage /></TabContainer>}\n                  {value === 5 && <TabContainer><OperativeNotesPage /></TabContainer>}\n                  {value === 6 && <TabContainer><PostOpPage /></TabContainer>}\n                  {value === 7 && <TabContainer><FollowUpPage /></TabContainer>}\n                \n                </MuiThemeProvider>\n                  \n                  )}\n            </div>\n\n        )\n    }\n  \n};\n\n\nconst mapStateToProps = reduxState => ({\n    patient: reduxState.patientReducer.patient,\n});\n\n\nexport default connect(mapStateToProps) (withStyles(styles)(MainTabsPage))","import React from 'react'\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport { lighten } from '@material-ui/core/styles/colorManipulator';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport swal from 'sweetalert';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport FormControl from '@material-ui/core/FormControl';\n\n\nconst rows = [\n  { label: 'ID' },\n  { label: 'First Name' },\n  { label: 'Last Name' },\n  { label: 'Active' },\n  { label: 'Access Level' },\n  { label: 'Edit' },\n];\n\n\n\nclass EnhancedTableHead extends React.Component {\n\n  render() {\n    const { order, orderBy } = this.props;\n\n    return (\n      <TableHead>\n        <TableRow padding=\"checkbox\">\n          \n          {rows.map(row => {\n            return (\n              <TableCell\n                \n                key={row.id}\n                align={row.numeric ? 'right' : 'left'}\n                padding=\"default\"\n                sortDirection={orderBy === row.id ? order : false}\n              >\n               \n                  <TableSortLabel\n                    \n                    active={orderBy === row.id}\n                    direction={order}\n                  >\n                    {row.label}\n                  </TableSortLabel>\n              </TableCell>\n            );\n          }, this)}\n        </TableRow>\n      </TableHead>\n    );\n  }\n}\n\nEnhancedTableHead.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.string.isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst toolbarStyles = theme => ({\n  root: {\n    paddingRight: theme.spacing.unit,\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  spacer: {\n    flex: '1 1 100%',\n  },\n  actions: {\n    color: theme.palette.text.secondary,\n  },\n  title: {\n    flex: '0 0 auto',\n  },\n});\n\nlet EnhancedTableToolbar = props => {\n  const { numSelected, classes } = props;\n\n  return (\n    <Toolbar\n      className={classNames(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      <div className={classes.title}>\n          <Typography variant=\"h6\" id=\"tableTitle\">\n            Current Users\n          </Typography>\n      </div>\n      <div className={classes.spacer} />\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n};\n\nEnhancedTableToolbar = withStyles(toolbarStyles)(EnhancedTableToolbar);\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 3,\n  },\n  table: {\n    minWidth: 1020,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n});\n\nclass EnhancedTable extends React.Component {\n  state = {\n    order: 'asc',\n    orderBy: 'ID',\n    selected: [],\n    data: [],\n    page: 0,\n    rowsPerPage: 5,\n    open: false,\n    userId: '',\n    title: '',\n    firstName:'',\n    lastName: '', \n    accessLevel: '',\n    active: '',\n    // username: '', \n    // password: '',\n    \n  };\n\n  componentDidMount(){\n    this.props.dispatch({ type: 'RENDER_ALL_USERS' })\n  }\n\n  handleRequestSort = (event, property) => {\n    const orderBy = property;\n    let order = 'desc';\n\n    if (this.state.orderBy === property && this.state.order === 'desc') {\n      order = 'asc';\n    }\n\n    this.setState({ order, orderBy });\n  };\n\n  handleSelectAllClick = event => {\n    if (event.target.checked) {\n      this.setState(state => ({ selected: state.data.map(n => n.id) }));\n      return;\n    }\n    this.setState({ selected: [] });\n  };\n\n\n  handleChangePage = (event, page) => {\n    this.setState({ page });\n  };\n\n  handleChangeRowsPerPage = event => {\n    this.setState({ rowsPerPage: event.target.value });\n  };\n\n  isSelected = id => this.state.selected.indexOf(id) !== -1;\n\n  handleClickOpen = (n) => {\n    console.log('in handleClickOpen profile', n);\n    this.setState({\n        userId: n.id,\n        title: n.title,\n        firstName: n.first_name,\n        lastName: n.last_name, \n        accessLevel: n.access_level,\n        active: n.active,\n        // username: n.username, \n        // password: n.password,\n        open: true,\n    })\n  };\n\n  editProfile = () => {\n    this.setState({ open: false });\n    this.props.dispatch({\n      type: 'EDIT_INDIVIDUAL_USER', payload: {\n        userId: this.state.userId,  \n        title: this.state.title,\n        firstName: this.state.firstName,\n        lastName: this.state.lastName, \n        accessLevel: this.state.accessLevel,\n        active: this.state.active,\n        // username: this.state.username, \n        // password: this.state.password,\n      }\n    })\n    swal(\"Success!\", \"Profile is Updated!\", \"success\");\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\n  handleClose = () => {\n    this.setState({ open: false });\n  \n  };\n\n  render() {\n    const { classes } = this.props;\n    const { data, order, orderBy, selected, rowsPerPage, page } = this.state;\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n\n    return (\n    \n      <Paper className={classes.root}>\n        \n        \n        {this.props.reduxState.individualUserReducer[0] == null ? (\n            <div>\n            <EnhancedTableToolbar numSelected={selected.length} />\n            <div className={classes.tableWrapper}>\n            <Table className={classes.table} aria-labelledby=\"tableTitle\">\n            <EnhancedTableHead\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={this.handleSelectAllClick}\n              onRequestSort={this.handleRequestSort}\n              rowCount={data.length}\n            />\n            <TableBody>\n              {this.props.reduxState.allUsersReducer.map(n => {\n                  return (\n                    <TableRow\n                      key={n.id}\n                      \n                    >\n                \n                      <TableCell component=\"th\" scope=\"row\" padding=\"default\">\n                        {n.id}\n                      </TableCell>\n                      <TableCell align=\"right\">{n.first_name}</TableCell>\n                      <TableCell align=\"right\">{n.last_name}</TableCell>\n                      {n.active === true ? (\n                          <TableCell align=\"right\"><p>Active</p></TableCell>\n                      ):(\n                        <TableCell align=\"right\"><p>Inactive</p></TableCell>\n                      )\n                      }\n                      \n                      <TableCell align=\"right\">{n.access_level}</TableCell>\n                      <TableCell><Button variant=\"contained\" color=\"primary\" component=\"span\" className={classes.button} onClick={() => this.handleClickOpen(n)}>Edit</Button></TableCell>\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 49 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </div>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={data.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          backIconButtonProps={{\n            'aria-label': 'Previous Page',\n          }}\n          nextIconButtonProps={{\n            'aria-label': 'Next Page',\n          }}\n          onChangePage={this.handleChangePage}\n          onChangeRowsPerPage={this.handleChangeRowsPerPage}\n        />\n          </div>\n        ) : ( \n            <div>\n            <EnhancedTableToolbar numSelected={selected.length} />\n            <div className={classes.tableWrapper}>\n            <Table className={classes.table} aria-labelledby=\"tableTitle\">\n            <EnhancedTableHead\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={this.handleSelectAllClick}\n              onRequestSort={this.handleRequestSort}\n              rowCount={data.length}\n            />\n            <TableBody>\n              {this.props.reduxState.individualUserReducer.map(n => {\n                  return (\n                    <TableRow\n                      key={n.id}\n                      \n                    >\n                      \n                      <TableCell component=\"th\" scope=\"row\" padding=\"default\">\n                        {n.id}\n                      </TableCell>\n                      <TableCell align=\"right\">{n.first_name}</TableCell>\n                      <TableCell align=\"right\">{n.last_name}</TableCell>\n                      {n.active === true ? (\n                          <TableCell align=\"right\"><p>Active</p></TableCell>\n                      ):(\n                        <TableCell align=\"right\"><p>Inactive</p></TableCell>\n                      )\n                      }\n                      \n                      <TableCell align=\"right\">{n.access_level}</TableCell>\n                      <TableCell><Button variant=\"outlined\" onClick={() => this.handleClickOpen(n)}>Edit</Button></TableCell>\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 49 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </div>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={data.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          backIconButtonProps={{\n            'aria-label': 'Previous Page',\n          }}\n          nextIconButtonProps={{\n            'aria-label': 'Next Page',\n          }}\n          onChangePage={this.handleChangePage}\n          onChangeRowsPerPage={this.handleChangeRowsPerPage}\n        />\n          </div>\n        )\n    }\n         \n{/* // Conditionally rendered form */}\n        <div>\n          <Dialog\n          open={this.state.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"form-dialog-title\">Edit User Profile</DialogTitle>\n          <DialogContent>\n                <FormControl variant=\"outlined\" margin=\"normal\" className={classes.formControl}>\n                            <InputLabel\n                                ref={ref => {\n                                this.InputLabelRef = ref;\n                                }}\n                                htmlFor=\"outlined-age-native-simple\"\n                            >\n                                Title\n                            </InputLabel>\n                                <Select\n                                    value={this.state.title}\n                                    onChange={this.handleChange}\n                                    input={\n                                    <OutlinedInput\n                                        name=\"title\"\n                                        labelWidth={this.state.labelWidth}\n                                        id=\"outlined-age-native-simple\"\n                                    />\n                                    }\n                                >\n                                    <MenuItem value=\"None\">None</MenuItem>\n                                    <MenuItem value=\"Dr.\">Dr.</MenuItem>\n                                    <MenuItem value=\"Mr.\">Mr.</MenuItem>\n                                    <MenuItem value=\"Mrs.\">Mrs.</MenuItem>\n                                    <MenuItem value=\"Miss\">Miss</MenuItem>\n                                </Select>\n                            </FormControl>\n          </DialogContent>\n          <DialogContent>\n            <TextField\n              onChange={this.handleChange}\n              value={this.state.firstName}\n              name=\"firstName\"\n              autoFocus\n              margin=\"dense\"\n              id=\"firstName\"\n              label=\"Update First Name\"\n              type=\"text\"\n              fullWidth\n              variant=\"outlined\"\n            />\n          </DialogContent>\n          <DialogContent>\n            <TextField\n              onChange={this.handleChange}\n              value={this.state.lastName}\n              name=\"lastName\"\n              autoFocus\n              margin=\"dense\"\n              id=\"lastName\"\n              label=\"Update Last Name\"\n              type=\"text\"\n              fullWidth\n              variant=\"outlined\"\n            />\n          </DialogContent>\n          <DialogContent>\n          <FormControl variant=\"outlined\" margin=\"normal\" className={classes.formControl}>\n                            <InputLabel\n                                ref={ref => {\n                                this.InputLabelRef = ref;\n                                }}\n                                htmlFor=\"outlined-age-native-simple\"\n                            >\n                                User Role\n                            </InputLabel>\n                                <Select\n                                    value={this.state.accessLevel}\n                                    onChange={this.handleChange}\n                                    input={\n                                    <OutlinedInput\n                                        name=\"accessLevel\"\n                                        labelWidth={this.state.labelWidth}\n                                        id=\"outlined-age-native-simple\"\n                                    />\n                                    }\n                                >\n                                    <MenuItem value=\"3\">Admin</MenuItem>\n                                    <MenuItem value=\"2\">Surgeon</MenuItem>\n                                    <MenuItem value=\"1\">Researcher</MenuItem>\n                                </Select>\n                        </FormControl> \n          \n          </DialogContent>\n          <DialogContent>\n          <FormControl variant=\"outlined\" margin=\"normal\" className={classes.formControl}>\n                            <InputLabel\n                                ref={ref => {\n                                this.InputLabelRef = ref;\n                                }}\n                                htmlFor=\"outlined-age-native-simple\"\n                            >\n                                Active User?\n                            </InputLabel>\n                                <Select\n                                    value={this.state.active}\n                                    onChange={this.handleChange}\n                                    input={\n                                    <OutlinedInput\n                                        name=\"active\"\n                                        labelWidth={this.state.labelWidth}\n                                        id=\"outlined-age-native-simple\"\n                                    />\n                                    }\n                                >\n                                    <MenuItem value={true}>True</MenuItem>\n                                    <MenuItem value={false}>False</MenuItem>\n                                </Select>\n                        </FormControl>\n          </DialogContent>\n          {/* <DialogContent>\n            <TextField\n              onChange={this.handleChange}\n              value={this.state.username}\n              name=\"username\"\n              autoFocus\n              margin=\"dense\"\n              id=\"username\"\n              label=\"Update Username\"\n              type=\"text\"\n              fullWidth\n              variant=\"outlined\"\n            />\n          </DialogContent>\n          <DialogContent>\n            <TextField\n              onChange={this.handleChange}\n              value={this.state.password}\n              name=\"password\"\n              autoFocus\n              margin=\"dense\"\n              id=\"password\"\n              label=\"Update Password\"\n              type=\"password\"\n              fullWidth\n              variant=\"outlined\"\n            />\n          </DialogContent> */}\n\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={() => this.editProfile()} color=\"primary\">\n              Complete\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n   \n      </Paper>\n    );\n  }\n}\n\nEnhancedTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = reduxState => ({\n    reduxState,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(EnhancedTable))\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport EnhancedTableHead from './ManageUsersTable'\n\n\nconst styles = theme => ({\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n    },\n    dense: {\n      marginTop: 16,\n    },\n    menu: {\n      width: 200,\n    },\n    button: {\n        margin: theme.spacing.unit,\n      },\n      leftIcon: {\n        marginRight: theme.spacing.unit,\n      },\n      rightIcon: {\n        marginLeft: theme.spacing.unit,\n      },\n      iconSmall: {\n        fontSize: 20,\n      },\n    icon: {\n    margin: theme.spacing.unit * 2,\n    },\n  });\n\n\n\nclass ManageUsersPage extends Component {\n    state = {\n        userId:'',\n        title: '',\n        firstName: '',\n        lastName: '',\n        accessLevel: '',\n        active: true,\n        username: '',\n        password: '',\n        maxWidth: 'lg',\n        fullWidth: true,\n        labelWidth: 30,\n        open: false,\n\n    }\n\n    handleChange = event => {\n        console.log('in handle Change for User ID', this.state.userId);\n        \n        this.setState({\n                [event.target.name]: event.target.value,\n                \n        });\n    }\n\n    searchForm = (event) => {\n        console.log('in submit form', this.state.userId);\n        event.preventDefault();\n        this.props.dispatch({ type: 'FIND_USER_PROFILE', \n        payload: {\n            userID: this.state.userId\n            }\n         })\n        \n    }\n\n    handleClickOpen = () => {\n        this.setState({ open: true });\n      };\n\n    handleClose = () => {\n        this.setState({ open: false });\n      };\n\n    handleActiveUserChange = event => {\n        this.setState({ active: event.target.checked });\n      };\n\n    handleNewUserSubmit = event => {\n        console.log('in handleNewUserSubmit form', this.state);\n        event.preventDefault();\n        this.props.dispatch({ type: 'ADD_NEW_USER', \n        payload: this.state\n         })\n         /// set some sort of alert\n         this.setState({ open: false });\n    }\n\n    render() {\n        const { classes } = this.props;\n        \n        return(\n            <div>\n                <h1>Manage Users or Add New User</h1>\n                \n                    <TextField\n                    id=\"outlined-name\"\n                    label=\"User ID\"\n                    className={classes.textField}\n                    value={this.state.userId}\n                    onChange={this.handleChange}\n                    name=\"userId\"\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    />\n                    <Button variant=\"contained\" color=\"primary\" className={classes.button} type=\"submit\" onClick={this.searchForm}>\n                        Search\n                        <SearchIcon className={classes.rightIcon} />\n                    </Button>\n\n                    <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={this.handleClickOpen}>\n                        Add New User\n                    \n                        <AddIcon />\n                    </Button>\n                <Dialog\n                    fullWidth={this.state.fullWidth}\n                    maxWidth={this.state.maxWidth}\n                    open={this.state.open}\n                    onClose={this.handleClose}\n                    aria-labelledby=\"max-width-dialog-title\"\n                    >\n                    <DialogTitle id=\"max-width-dialog-title\">Add New User</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                        Please complete all input fields\n                        </DialogContentText>\n\n                        <FormControl variant=\"outlined\" margin=\"normal\" className={classes.formControl}>\n                            <InputLabel\n                                ref={ref => {\n                                this.InputLabelRef = ref;\n                                }}\n                                htmlFor=\"outlined-age-native-simple\"\n                            >\n                                Title\n                            </InputLabel>\n                                <Select\n                                    value={this.state.title}\n                                    onChange={this.handleChange}\n                                    input={\n                                    <OutlinedInput\n                                        name=\"title\"\n                                        labelWidth={this.state.labelWidth}\n                                        id=\"outlined-age-native-simple\"\n                                    />\n                                    }\n                                >\n                                    <MenuItem value=\"None\">None</MenuItem>\n                                    <MenuItem value=\"Dr.\">Dr.</MenuItem>\n                                    <MenuItem value=\"Mr.\">Mr.</MenuItem>\n                                    <MenuItem value=\"Mrs.\">Mrs.</MenuItem>\n                                    <MenuItem value=\"Miss\">Miss</MenuItem>\n                                </Select>\n                            </FormControl>\n\n                        <FormControl className={classes.formControl}>\n                            <TextField\n                                id=\"outlined-name\"\n                                label=\"First Name\"\n                                className={classes.textField}\n                                value={this.state.firstName}\n                                onChange={this.handleChange}\n                                name=\"firstName\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                />\n                        </FormControl>\n                        <FormControl className={classes.formControl}>\n                            <TextField\n                                id=\"outlined-name\"\n                                label=\"Last Name\"\n                                className={classes.textField}\n                                value={this.state.lastName}\n                                onChange={this.handleChange}\n                                name=\"lastName\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                />\n                        </FormControl>\n\n                        <FormControl className={classes.formControl}>\n                            <TextField\n                                id=\"outlined-name\"\n                                label=\"New Username\"\n                                className={classes.textField}\n                                value={this.state.username}\n                                onChange={this.handleChange}\n                                name=\"username\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                />\n                        </FormControl>\n\n\n                        <FormControl className={classes.formControl}>\n                            <TextField\n                                id=\"outlined-name\"\n                                label=\"New Password\"\n                                className={classes.textField}\n                                value={this.state.password}\n                                onChange={this.handleChange}\n                                name=\"password\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                />\n                        </FormControl>\n\n                        <FormControl variant=\"outlined\" margin=\"normal\" className={classes.formControl}>\n                            <InputLabel\n                                ref={ref => {\n                                this.InputLabelRef = ref;\n                                }}\n                                htmlFor=\"outlined-age-native-simple\"\n                            >\n                                User Role\n                            </InputLabel>\n                                <Select\n                                    value={this.state.accessLevel}\n                                    onChange={this.handleChange}\n                                    input={\n                                    <OutlinedInput\n                                        name=\"accessLevel\"\n                                        labelWidth={this.state.labelWidth}\n                                        id=\"outlined-age-native-simple\"\n                                    />\n                                    }\n                                >\n                                    <MenuItem value=\"3\">Admin</MenuItem>\n                                    <MenuItem value=\"2\">Surgeon</MenuItem>\n                                    <MenuItem value=\"1\">Researcher</MenuItem>\n                                </Select>\n                        </FormControl> \n                        \n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                        Cancel\n                        </Button>\n                    </DialogActions>\n                    <DialogActions>\n                        <Button onClick={this.handleNewUserSubmit} color=\"primary\">\n                        Add New User\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n                <EnhancedTableHead/>\n\n            </div>\n\n        )\n    }\n  \n};\n\nconst mapStateToProps = reduxState => ({\n    reduxState,\n});\n\nManageUsersPage.propTypes = {\n    classes: PropTypes.object.isRequired,\n  };\n  \n\nexport default connect(mapStateToProps) (withStyles(styles)(ManageUsersPage))","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { withRouter } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport moment from 'moment';\n\nconst styles = theme => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      ...theme.mixins.gutters(),\n      paddingTop: theme.spacing.unit * 2,\n      paddingBottom: theme.spacing.unit * 2,\n    },\n    formControl: {\n      margin: theme.spacing.unit,\n      minWidth: 500,\n    },\n    formControlSub: {\n        minWidth: 100,\n        margin: theme.spacing.unit,\n        marginTop: theme.spacing.unit * 2,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing.unit * 2,\n    },\n    radio: {\n        display: 'inline-block',\n    },\n    formLabel: {\n        diaplay: 'none',\n    },\n    button: {\n        marginBottom: `${theme.spacing.unit * 3}px`,\n        marginTop: `${theme.spacing.unit * 3}px`,\n    },\n    grid: {\n        padding: `${theme.spacing.unit * 3}px`,\n      },\n  });\n\nclass PatientProfileSearchResult extends Component {\n\n    clearState = () => {\n        this.props.dispatch({type: 'DROP_PATIENT_RESULT'});\n      }\n\n    selectPatient = () => {\n        console.log('patientSearch', this.props.patientSearch);\n        \n    this.props.dispatch({type: 'SET_PATIENT_RESULT', payload: this.props.patientSearch});\n    document.cookie = `patientID=${this.props.patientSearch.patient_no}`\n    // document.cookie = `patientTOC=${this.props.patientSearch.toc_id}`\n    this.props.history.push(`/MainTabsPage`);\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div>\n                <Grid container spacing={24}>\n                {this.props.patientSearch !== \"patient not found\" ?\n                (<>\n                <Grid container xs={3}></Grid>\n                <Grid container xs={6}>\n                <Grid item xs={12}><Button onClick={this.clearState} className={classes.button} variant=\"contained\" color=\"primary\">X</Button></Grid>\n                {(this.props.patientSearch.patient_no) ? (<Grid item xs={6}><Typography><strong>Patient ID: </strong>{this.props.patientSearch.patient_no}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.dob) ? (<Grid item xs={6}><Typography><strong>Date of Birth: </strong>{moment(this.props.patientSearch.dob).format('MM-DD-YYYY')}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.type_of_cancer) ? (<Grid item xs={6}><Typography><strong>Type of Cancer: </strong>{this.props.patientSearch.type_of_cancer}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.gender) ? (<Grid item xs={6}><Typography><strong>Gender: </strong>{this.props.patientSearch.gender}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.referal_date) ? (<Grid item xs={6}><Typography><strong>Referral Date: </strong>{moment(this.props.patientSearch.referal_date).format('MM-DD-YYYY')}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.hipec_date) ? (<Grid item xs={6}><Typography><strong>HIPEC Date: </strong>{moment(this.props.patientSearch.hipec_date).format('MM-DD-YYYY')}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.diagnosis_date) ? (<Grid item xs={6}><Typography><strong>Diagnosis Date: </strong>{moment(this.props.patientSearch.diagnosis_date).format('MM-DD-YYYY')}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.sensor) ? (<Grid item xs={6}><Typography><strong>Sensor: Yes</strong></Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.hospital_telephone) ? (<Grid item xs={6}><Typography><strong>Hospital Telephone Number: </strong>{this.props.patientSearch.hospital_telephone}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.refering_doctor) ? (<Grid item xs={6}><Typography><strong>Referring Doctor: </strong>{this.props.patientSearch.refering_doctor}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.notes) ? (<Grid item xs={6}><Typography><strong>Notes: </strong>{this.props.patientSearch.notes}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.current_status) ? (<Grid item xs={6}><Typography><strong>Current Status: </strong>{this.props.patientSearch.current_status}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.current_date) ? (<Grid item xs={6}><Typography><strong>Current Date: </strong>{moment(this.props.patientSearch.current_date).format('MM-DD-YYYY')}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.current_time) ? (<Grid item xs={6}><Typography><strong>Current Time: </strong>{this.props.patientSearch.current_time}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.last_contact_date) ? (<Grid item xs={6}><Typography><strong>Last Contact Date: </strong>{moment(this.props.patientSearch.last_contact_date).format('MM-DD-YYYY')}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.date_of_death) ? (<Grid item xs={6}><Typography><strong>Date of Death: </strong>{moment(this.props.patientSearch.date_of_death).format('MM-DD-YYYY')}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.alive_on_date) ? (<Grid item xs={6}><Typography><strong>Alive on Date: </strong>{moment(this.props.patientSearch.alive_on_date).format('MM-DD-YYYY')}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.interval_prime_surgery) ? (<Grid item xs={6}><Typography><strong>Interval prime surgery HIPEC: </strong>{this.props.patientSearch.interval_prime_surgery}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.survival_hipec_death) ? (<Grid item xs={6}><Typography><strong>Survival HIPEC death: </strong>{this.props.patientSearch.survival_hipec_death}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.survival_hipec_last_contact) ? (<Grid item xs={6}><Typography><strong>Survival HIPEC last contact: </strong>{this.props.patientSearch.survival_hipec_last_contact}</Typography></Grid>) : (<></>)}\n                {(this.props.patientSearch.interval_diagnosis_pc_hipec) ? (<Grid item xs={6}><Typography><strong>Interval diagnosis PC-HIPEC: </strong>{this.props.patientSearch.interval_diagnosis_pc_hipec}</Typography></Grid>) : (<></>)}\n                <Grid item xs={12}><Button onClick={this.selectPatient} className={classes.button} variant=\"contained\" color=\"primary\">Select this patient</Button></Grid>\n                </Grid><Grid container xs={3}></Grid></>) : (<><h3>Patient Not Found</h3></>)}\n                </Grid>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = reduxState => ({\n    patientSearch: reduxState.patientReducer.patientSearch,\n});\n\n\nexport default withRouter(withStyles(styles)(connect(mapStateToProps)(PatientProfileSearchResult)));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddIcon from '@material-ui/icons/Add';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport PropTypes from 'prop-types';\nimport PatientProfileSearchResult from '../PatientProfileSearchResult/PatientProfileSearchResult';\nimport InputBase from '@material-ui/core/InputBase';\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    formControl: {\n        margin: theme.spacing.unit,\n        minWidth: 500,\n        verticalAlign: 'unset',\n    },\n    formControlSub: {\n        minWidth: 100,\n        margin: theme.spacing.unit,\n        marginTop: theme.spacing.unit * 2,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing.unit * 2,\n    },\n    radio: {\n        display: 'inline-block',\n    },\n    formLabel: {\n        diaplay: 'none',\n    },\n    button: {\n        verticalAlign: 'bottom',\n    }\n  });\n\nclass PatientProfileSearchPage extends Component {\n\n    state = {\n        variables: {\n        open: false,\n        labelWidth: 0,\n        name: '',\n        },\n        patient: {\n            currentStatus: 0,\n            gender: '',\n        },\n      };\n\n    componentDidMount(){\n        this.props.dispatch({type: 'LAST_PATIENT_ID_PLUS_ONE'});\n    }\n    \n    handleNewPatientChange = (name) => (event) => {\n        this.setState({patient: {...this.state.patient, [name]: (event.target.value)} });\n    };\n\n    calculateAge = (dob) => (event) => {\n        let age = Math.floor((new Date() - new Date(event.target.value).getTime()) / 3.15576e+10);\n        this.setState({patient: {...this.state.patient, age: age} });\n    };\n      \n    handleSearchChange = (name) => (event) => {\n        this.setState({ [name]: (event.target.value) });\n    };\n    \n    handleClickOpen = () => {\n        this.setState({ variables: {open: true}, patient: {patient_no: this.props.newPatientId} });\n    };\n    \n    handleClose = () => {\n        this.setState({ variables: {open: false}, patient: {} });\n    };\n\n    addPatient = () => {\n        this.props.dispatch({type: 'ADD_PATIENT', \n            payload: {\n                patientObject: this.state.patient,\n                history: this.props.history,\n            }\n    });\n        this.setState({ variables: {open: false}});\n        document.cookie = `patientID=${this.state.patient.patient_no}`\n        this.props.history.push(`/MainTabsPage`);\n    }\n\n    searchPatient = () => {\n        if(this.state.patientSearch){\n        this.setState({ patientSearch: '' });\n        this.props.dispatch({type: 'FIND_PATIENT', payload: this.state.patientSearch});} else {\n            alert('Please enter a Patient ID Number!');\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n        return(\n            <div>\n                <Grid container spacing={24}\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{ minHeight: '100vh' }}>\n                    <Grid item xs={3}></Grid>\n                    <Grid item xs={6}>\n                    {/* Patient Profile Search Field */}\n                        <TextField\n                        className={classes.formControl}\n                        required\n                        id=\"outlined-required\"\n                        label=\"Search for a Patient\"\n                        placeholder=\"Patient ID e.x. 1234567890\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={this.state.patientSearch}\n                        onChange={this.handleSearchChange('patientSearch')}\n                        />\n                        {/* Patient Profile Search Button */}\n                            <Button  onClick={this.searchPatient} className={classes.button} variant=\"contained\" color=\"primary\">\n                            Search <SearchIcon/>\n                            </Button>\n                    </Grid>\n                    <Grid item xs={3}></Grid>\n                    <Grid item xs={12}>\n                    {/* Patient Profile Search Result */}\n                        {this.props.patientSearch ? (<PatientProfileSearchResult/>) : (<></>)}\n                    </Grid>\n                    <Grid item xs={3}>\n                    </Grid>\n                    <Grid item xs={6}>\n                    {/* Add New Patient Button */}\n                        <Button className={classes.formControl} onClick={this.handleClickOpen} variant=\"contained\" color=\"primary\">\n                        Add New Patient<AddIcon/>\n                        </Button>\n                    </Grid>\n                    <Grid item xs={3}>\n                    </Grid>\n                    {/* Add New Patient Pop Up Form */}\n                        <Dialog\n                            fullWidth\n                            disableBackdropClick\n                            open={this.state.variables.open}\n                            onClose={this.handleClose}>\n                            <DialogContent>\n                        {/* Patient ID [auto-generated based on last patient in database] Input */}\n                        <FormControl className={classes.formControl}>\n                            <InputBase disabled value=\"New Patient ID: \">{\"New Patient ID: \" + this.props.newPatientId}</InputBase>\n                            <InputBase\n                            required\n                            id=\"outlined-required\"\n                            label=\"New Patient ID\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            InputProps={{\n                                readOnly: true,\n                              }}\n                            placeholder={\"New Patient ID: \" + this.props.newPatientId}\n                            value={this.props.newPatientId}\n                            margin=\"normal\"\n                            fullWidth={true}\n                            type=\"number\"\n                            onChange={this.handleNewPatientChange('patientId', 'value')}\n                            />\n                        </FormControl>\n                        {/* Date of Birth Input */}\n                        <FormControl className={classes.formControl}>\n                        <TextField\n                        required\n                        id=\"outlined-required\"\n                        label=\"Date of Birth\"\n                        InputLabelProps={{\n                            shrink: true,\n                          }}\n                        margin=\"normal\"\n                        type=\"date\"\n                        variant=\"outlined\"\n                        fullWidth={true}\n                        onChange={this.handleNewPatientChange('dob')}\n                        onBlur={this.calculateAge('age', this.state.patient.dob)}\n                        /></FormControl>\n                        {/* Age Input [auto-calculated via Date of Birth Input] */}\n                        <FormControl className={classes.formControlAge}>\n                        <TextField\n                        id=\"outlined-required\"\n                        label=\"Age\"\n                        InputLabelProps={{\n                            shrink: true,\n                          }}\n                          InputProps={{\n                            readOnly: true,\n                          }}\n                          value={this.state.patient.age}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        /></FormControl>\n                        {/* Gender Input */}\n                        <FormControl  className={classes.formControl}>\n                            <InputLabel shrink\n                                htmlFor=\"gender-label-placeholder\"                                \n                            >\n                                Gender\n                            </InputLabel>\n                            <Select\n                                value={this.state.patient.gender}\n                                onChange={this.handleNewPatientChange('gender', 'value')}\n                                displayEmpty\n                                name=\"gender\"\n                                className={classes.selectEmpty}\n                                >\n                                <MenuItem value='Female'>Female</MenuItem>\n                                <MenuItem value='Male'>Male</MenuItem>\n                                <MenuItem value='Other'>Other</MenuItem>\n                            </Select>\n                        </FormControl>\n                        {/* Type of Cancer Input */}\n                        <FormControl className={classes.formControl} variant=\"outlined\">\n                            <InputLabel shrink\n                                htmlFor=\"outlined-toc-simple\"                                \n                            >\n                                Type of Cancer\n                            </InputLabel>\n                            <Select\n                                value={this.state.patient.toc}\n                                onChange={this.handleNewPatientChange('toc', 'value')}\n                                input={\n                                <OutlinedInput\n                                    name=\"Type of Cancer\"\n                                    id=\"outlined-toc-simple\"\n                                    labelWidth={this.state.labelWidth}\n                                />\n                                }\n                            >\n                                <MenuItem value={1}>CRC</MenuItem>\n                                <MenuItem value={2}>Appendiceal</MenuItem>\n                                <MenuItem value={3}>Gastric</MenuItem>\n                                <MenuItem value={4}>Ovarian</MenuItem>\n                                <MenuItem value={5}>Other</MenuItem>\n                            </Select>\n                        </FormControl>\n                        {/* HIPEC Input */}\n                        <FormControl component=\"fieldset\" className={classes.formControlSub}>\n                            <FormLabel component=\"legend\" style={{display: 'inline-block'}}>HIPEC</FormLabel>\n                            <RadioGroup\n                                aria-label=\"HIPEC\"\n                                name=\"hipec\"\n                                value={this.state.patient.hipec}\n                                onChange={this.handleNewPatientChange('hipec', 'value')}\n                                style={{display: 'flex', flexDirection: 'row'}}\n                            >\n                                <FormControlLabel value=\"yes\" control={<Radio className={classes.radio}/>} label=\"Yes\" />\n                                <FormControlLabel value=\"no\" control={<Radio className={classes.radio}/>} label=\"No\" />\n                            </RadioGroup>\n                        </FormControl>\n                        {/* If HIPEC is yes, show additional inputs */}\n                        {this.state.patient.hipec === 'yes' ? (<><FormControl className={classes.formControl}>\n                        <TextField\n                        required\n                        id=\"outlined-required\"\n                        label=\"Date of HIPEC\"\n                        InputLabelProps={{\n                            shrink: true,\n                          }}\n                        margin=\"normal\"\n                        type=\"date\"\n                        variant=\"outlined\"\n                        onChange={this.handleNewPatientChange('dateOfHipec', 'value')}\n                        /></FormControl>\n                        {/* HIPEC Date of Referral Input */}\n                        <FormControl className={classes.formControl}>\n                        <TextField\n                        required\n                        id=\"outlined-required\"\n                        label=\"Date of Referral\"\n                        InputLabelProps={{\n                            shrink: true,\n                          }}\n                        margin=\"normal\"\n                        type=\"date\"\n                        variant=\"outlined\"\n                        onChange={this.handleNewPatientChange('dateOfReferral', 'value')}\n                        /></FormControl>\n                        {/* HIPEC Date of Diagnosis Input */}\n                        <FormControl className={classes.formControl}>\n                        <TextField\n                        required\n                        id=\"outlined-required\"\n                        label=\"Diagnosis Date\"\n                        InputLabelProps={{\n                            shrink: true,\n                          }}\n                        margin=\"normal\"\n                        type=\"date\"\n                        variant=\"outlined\"\n                        onChange={this.handleNewPatientChange('diagnosisDate', 'value')}\n                        /></FormControl>\n                        </>\n                        ) : (<></>)} {/* <-- Render nothing if no HIPEC */}\n                        {/* Alive on Date Input */}\n                        <FormControl className={classes.formControl}>\n                            <TextField\n                            required\n                            id=\"outlined-required\"\n                            label=\"Alive on Date\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            margin=\"normal\"\n                            type=\"date\"\n                            variant=\"outlined\"\n                            onChange={this.handleNewPatientChange('aliveOnDate', 'value')}\n                            />\n                        </FormControl>\n                        {/* Sensor */}\n                        <FormControl component=\"fieldset\" className={classes.formControlSub}>\n                            <FormLabel component=\"legend\" style={{display: 'inline-block'}}>Sensor</FormLabel>\n                            <RadioGroup\n                                aria-label=\"sensor\"\n                                name=\"sensor\"\n                                value={this.state.patient.sensor}\n                                onChange={this.handleNewPatientChange('sensor', 'value')}\n                                style={{display: 'flex', flexDirection: 'row'}}\n                            >\n                                <FormControlLabel value=\"yes\" control={<Radio className={classes.radio}/>} label=\"Yes\" />\n                                <FormControlLabel value=\"no\" control={<Radio className={classes.radio}/>} label=\"No\" />\n                            </RadioGroup>\n                        </FormControl>\n                        {/* Hospital Tel Input */}\n                        <FormControl className={classes.formControl}>\n                            <TextField\n                            required\n                            id=\"outlined-required\"\n                            label=\"Hospital Telephone Number\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            placeholder=\"Hospital Telephone Number e.x. 555-555-5555\"\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            fullWidth={true}\n                            type=\"string\"\n                            onChange={this.handleNewPatientChange('hospitalTel', 'value')}\n                            />\n                        </FormControl>\n                        {/* Referring Doctor Input */}\n                        <FormControl className={classes.formControl}>\n                            <TextField\n                            required\n                            id=\"outlined-required\"\n                            label=\"Referring Doctor\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            placeholder=\"Referring Doctor e.x. Dr. Claudio Gonzales\"\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            fullWidth={true}\n                            type=\"string\"\n                            onChange={this.handleNewPatientChange('refDoc', 'value')}\n                            />\n                        </FormControl>\n                        {/* HIPEC Current Status Input */}\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\n                            <InputLabel shrink\n                                htmlFor=\"outlined-age-native-simple\"\n                            >\n                                Current Status\n                            </InputLabel>\n                            <Select\n                                value={this.state.patient.currentStatus}\n                                onChange={this.handleNewPatientChange('currentStatus', 'value')}\n                                input={<OutlinedInput\n                                    name=\"title\"\n                                    fullWidth\n                                    id=\"outlined-age-native-simple\"\n                                    />}\n                            >\n                            {this.props.dropdownOptions.map( option => {\n                                return(\n                                    <MenuItem key={option.id} value={option.id}>{option.status}</MenuItem>\n                                )\n                            })}\n                            </Select>\n                        </FormControl>\n                        {/* Interval Prime Surgery - HIPEC Input */}\n                        <FormControl className={classes.formControl}>\n                            <TextField\n                            required\n                            id=\"outlined-required\"\n                            label=\"Interval Prime Surgery - HIPEC\"\n                            InputLabelProps={{shrink: true,}}\n                            value={this.state.patient.ipshipec}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            fullWidth={true}\n                            type=\"string\"\n                            onChange={this.handleNewPatientChange('ipshipec', 'value')}\n                            /></FormControl>\n                        {/* Survival (HIPEC Death) Input */}\n                        <FormControl className={classes.formControl}>\n                            <TextField\n                            required\n                            id=\"outlined-required\"\n                            label=\"Survival (HIPEC Death)\"\n                            InputLabelProps={{shrink: true,}}\n                            value={this.state.patient.survivalhipecdeath}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            fullWidth={true}\n                            type=\"string\"\n                            onChange={this.handleNewPatientChange('survivalhipecdeath', 'value')}\n                            />\n                        </FormControl>\n                        {/* Survival (HIPEC Last Contact) Input */}\n                        <FormControl className={classes.formControl}>\n                            <TextField\n                            required\n                            id=\"outlined-required\"\n                            label=\"Survival (HIPEC Last Contact)\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            value={this.state.patient.survivalhipeclastcontact}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                                                        fullWidth={true}\n                                type=\"string\"\n                                onChange={this.handleNewPatientChange('survivalhipeclastcontact', 'value')}\n                            />\n                        </FormControl>\n                        {/* Interval Diagnosis PC-HIPEC Input */}\n                        <FormControl className={classes.formControl}>\n                            <TextField\n                            required\n                            id=\"outlined-required\"\n                            label=\"Interval Diagnosis PC-HIPEC\"\n                            InputLabelProps={{shrink: true,}}\n                            value={this.state.patient.intervalDiagnosisPcHipec}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            fullWidth={true}\n                            type=\"string\"\n                            onChange={this.handleNewPatientChange('intervalDiagnosisPcHipec', 'value')}\n                            />\n                        </FormControl>\n                    </DialogContent>\n                            <DialogActions>\n                                {/* Cancel Add New Patient Button */}\n                                <Button onClick={this.handleClose} color=\"primary\">\n                                Cancel\n                                </Button>\n                                {/* Finish Add New Patient Button */}\n                                <Button onClick={this.addPatient} color=\"primary\">\n                                Add Patient\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                </Grid>\n            </div>\n        )\n    }\n};\n\nPatientProfileSearchPage.propTypes = {\n    classes: PropTypes.object.isRequired,\n  };\n\nconst mapStateToProps = reduxState => ({\n    patientSearch: reduxState.patientReducer.patientSearch,\n    newPatientId: reduxState.patientReducer.newPatientId,\n    dropdownOptions: reduxState.dropdownOptions.currentStatusOptions,\n});\n\nexport default withStyles(styles)(connect(mapStateToProps)(PatientProfileSearchPage));","import React, {Component} from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport Nav from '../Nav/Nav';\nimport Footer from '../Footer/Footer';\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\nimport AboutPage from '../AboutPage/AboutPage';\nimport InfoPage from '../InfoPage/InfoPage';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport MainTabsPage from '../MainTabsPage/MainTabsPage';\nimport appTheme from './AppTheme';\nimport ManageUsersPage from '../ManageUsersPage/ManageUsersPage';\nimport PatientProfileSearchPage from '../PatientProfileSearchPage/PatientProfileSearchPage';\n// import UserPage from '../UserPage/UserPage';\n// import './App.css';\n\nclass App extends Component {\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_USER'})\n    this.props.dispatch({type:'GET_DROPDOWN_OPTIONS'})\n  }\n\n  \n\n  render() {\n    \n    return (\n      <Router>\n        <div>\n        <MuiThemeProvider theme={appTheme}>\n          <Nav />\n          <Switch>\n            {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n            <Redirect exact from=\"/\" to=\"/home\" />\n            {/* Visiting localhost:3000/about will show the about page.\n            This is a route anyone can see, no login necessary */}\n            <Route\n              exact\n              path=\"/about\"\n              component={AboutPage}\n            />\n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n            {/* <ProtectedRoute\n              exact\n              path=\"/home\"\n              component={UserPage}\n            /> */}\n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n            <ProtectedRoute\n              exact\n              path=\"/info\"\n              component={InfoPage}\n            />\n            \n            <ProtectedRoute path=\"/MainTabsPage\" component={MainTabsPage} />\n            <ProtectedRoute path=\"/ManageUsersPage\" component={ManageUsersPage} />\n            <ProtectedRoute path=\"/home\" component={PatientProfileSearchPage} />\n\n\n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n          <Footer />\n          </MuiThemeProvider>\n        </div>\n      </Router>\n  )}\n}\n\nconst mapStateToProps = reduxState => ({\n  reduxState,\n});\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}